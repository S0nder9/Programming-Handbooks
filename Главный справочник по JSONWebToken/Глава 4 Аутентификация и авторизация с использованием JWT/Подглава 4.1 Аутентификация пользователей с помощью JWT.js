// Глава 4: Аутентификация и авторизация с использованием JWT

// Подглава 4.1: Аутентификация пользователей с помощью JWT

// Процесс аутентификации: генерация и выдача JWT при успешной аутентификации

// JSON Web Token (JWT) - это стандартный формат токенов, используемый для аутентификации и авторизации.
// JWT позволяет серверу создавать токен, который может быть использован клиентом для доступа к защищенным ресурсам.

// Шаги для реализации аутентификации с использованием JWT:

// 1. Установка необходимых библиотек
// Для работы с JWT на сервере потребуется библиотека jsonwebtoken. Установите её с помощью npm:
const jwt = require('jsonwebtoken');

// 2. Создание функции для генерации JWT
// При успешной аутентификации пользователю выдается JWT, который содержит закодированную информацию о пользователе.
// Пример создания JWT:
const generateToken = (userId) => {
  // Подпись токена с использованием секретного ключа
  return jwt.sign({ userId }, 'your-secret-key', { expiresIn: '1h' });
};

// 3. Реализация маршрута для аутентификации
// На сервере необходимо создать маршрут, который будет принимать учетные данные пользователя и выдавать JWT при успешной аутентификации.
// Пример реализации маршрута аутентификации:
const express = require('express');
const app = express();
app.use(express.json());

app.post('/api/login', (req, res) => {
  const { username, password } = req.body;

  // Здесь должна быть проверка учетных данных
  // Если проверка успешна:
  const userId = 1; // Пример идентификатора пользователя
  const token = generateToken(userId);
  
  res.json({ token });
});

// Использование JWT в заголовке Authorization при запросах к защищенным ресурсам

// 1. Проверка JWT в защищенных маршрутах
// Для доступа к защищенным маршрутам, клиент должен передавать JWT в заголовке Authorization запроса.
// Сервер проверяет токен и разрешает доступ к защищенному ресурсу, если токен валидный.
// Пример middleware для проверки JWT:
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (token == null) return res.sendStatus(401);

  jwt.verify(token, 'your-secret-key', (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// 2. Реализация защищенного маршрута
// Пример маршрута, защищенного JWT:
app.get('/api/protected', authenticateToken, (req, res) => {
  res.json({ message: 'This is a protected resource' });
});

// Итог:
// Аутентификация с использованием JWT включает генерацию и выдачу токена при успешной аутентификации и использование этого токена в заголовке Authorization для доступа к защищенным ресурсам.
// Этот подход обеспечивает безопасный и масштабируемый способ управления доступом в веб-приложениях.
