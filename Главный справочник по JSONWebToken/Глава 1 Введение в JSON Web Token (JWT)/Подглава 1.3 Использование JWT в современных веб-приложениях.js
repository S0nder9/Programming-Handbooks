// Глава 1: Введение в JSON Web Token (JWT)

// Подглава 1.3: Использование JWT в современных веб-приложениях

// JSON Web Token (JWT) является стандартом для безопасного обмена информацией между клиентом и сервером в виде JSON-объекта.
// JWT используется для аутентификации и авторизации пользователей в современных веб-приложениях, таких как RESTful API и SPA (Single Page Applications).

// Сравнение JWT с другими методами аутентификации и авторизации:

// 1. Сессионные куки (Session Cookies):
// В традиционных веб-приложениях часто используется механизм сессионных куков, где сервер создает сессию при входе пользователя и сохраняет данные сессии в базе данных.
// Клиент получает уникальный идентификатор сессии, который отправляется в cookie и передается на сервер с каждым запросом.
// Недостатки этого подхода включают необходимость хранения состояния сессии на сервере и сложности с масштабированием.

// 2. Basic Authentication:
// В Basic Authentication пользователь отправляет свои учетные данные (логин и пароль) в каждом запросе, закодированные в Base64.
// Это простой, но небезопасный метод, так как учетные данные передаются в каждом запросе и могут быть перехвачены.
// Обычно используется в сочетании с HTTPS, чтобы минимизировать риски.

// 3. OAuth2:
// OAuth2 является протоколом авторизации, который позволяет приложению действовать от имени пользователя и получать доступ к защищенным ресурсам.
// Он сложнее в реализации по сравнению с JWT, но предоставляет больше возможностей для контроля доступа и защиты данных.
// Часто используется в крупных системах с распределенными сервисами и множеством клиентов.

// Преимущества JWT по сравнению с другими методами:
// - JWT является самодостаточным токеном, который содержит всю необходимую информацию для авторизации, что позволяет серверу не хранить состояние сессии.
// - JWT может быть подписан и/или зашифрован для защиты от подделки и несанкционированного доступа.
// - Легкость интеграции с RESTful API и SPA, где клиент может хранить токен в браузере и отправлять его с каждым запросом.

// Примеры использования JWT в RESTful API и SPA:

// 1. Аутентификация с помощью JWT в RESTful API:
// Пользователь отправляет свои учетные данные (например, имя пользователя и пароль) на сервер через POST-запрос.
// Сервер проверяет учетные данные и, если они правильные, создает JWT, который содержит идентификатор пользователя и другую необходимую информацию.
// JWT возвращается клиенту, который хранит его (например, в localStorage или sessionStorage).
// При каждом последующем запросе клиент отправляет JWT в заголовке Authorization:
const token = 'your-jwt-token';
fetch('/api/protected', {
  headers: { 'Authorization': `Bearer ${token}` }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

// На сервере JWT проверяется и расшифровывается с использованием секретного ключа:
const jwt = require('jsonwebtoken');

app.get('/api/protected', (req, res) => {
  const token = req.headers['authorization'].split(' ')[1];
  jwt.verify(token, 'your-secret-key', (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Unauthorized' });
    }
    // Если токен валиден, сервер предоставляет доступ к защищенному ресурсу
    res.json({ message: 'Access granted', user: decoded });
  });
});

// 2. Использование JWT в SPA (Single Page Applications):
// В SPA токен JWT обычно сохраняется в localStorage или sessionStorage после аутентификации пользователя.
// Затем токен добавляется к каждому запросу на защищенные ресурсы.
// Пример хранения JWT в localStorage:
localStorage.setItem('token', 'your-jwt-token');

// Пример добавления токена в заголовок запроса в SPA:
const token = localStorage.getItem('token');
fetch('/api/protected', {
  headers: { 'Authorization': `Bearer ${token}` }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

// Итог:
// JWT является популярным и эффективным методом аутентификации и авторизации в современных веб-приложениях.
// Он позволяет избежать хранения сессий на сервере, упрощает масштабирование, а также легко интегрируется с RESTful API и SPA.
