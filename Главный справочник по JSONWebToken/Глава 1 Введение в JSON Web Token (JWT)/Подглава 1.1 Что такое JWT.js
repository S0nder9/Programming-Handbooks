// Глава 1: Введение в JSON Web Token (JWT)

// Подглава 1.1: Что такое JWT

// Определение и назначение JWT:
// JSON Web Token (JWT) - это компактный, URL-безопасный способ представления информации между двумя сторонами в виде JSON-объекта.
// Он используется для безопасной передачи данных между клиентом и сервером, обычно для целей аутентификации и авторизации.
// JWT является самодостаточным токеном, что означает, что он содержит всю необходимую информацию внутри себя и не требует серверного хранилища данных.

// Обзор структуры JWT:
// JWT состоит из трех частей: Header (заголовок), Payload (полезная нагрузка) и Signature (подпись).
// Эти части разделены точками, образуя строку формата Header.Payload.Signature.

// 1. Header (Заголовок):
// Заголовок обычно содержит тип токена (JWT) и алгоритм шифрования, используемый для создания подписи.
// Пример заголовка:
// {
//   "alg": "HS256",
//   "typ": "JWT"
// }

// 2. Payload (Полезная нагрузка):
// Полезная нагрузка содержит утверждения (claims), которые представляют собой информацию о пользователе и других данных.
// Пример полезной нагрузки:
// {
//   "sub": "1234567890",
//   "name": "John Doe",
//   "iat": 1516239022
// }
// Важно понимать, что информация в полезной нагрузке не зашифрована, а просто закодирована в Base64, поэтому её можно легко декодировать.

// 3. Signature (Подпись):
// Подпись создается с использованием алгоритма, указанного в заголовке, и секретного ключа.
// Она необходима для обеспечения целостности токена и подтверждения его подлинности.
// Пример создания подписи:
// HMACSHA256(
//   base64UrlEncode(header) + "." + base64UrlEncode(payload),
//   your-256-bit-secret
// )

// Основные применения JWT в веб-разработке:
// 1. Аутентификация:
// JWT часто используется для аутентификации пользователей. После успешного входа на сайт сервер генерирует JWT и отправляет его клиенту.
// Клиент хранит JWT (обычно в localStorage или cookies) и отправляет его в каждом последующем запросе к серверу для доступа к защищенным ресурсам.

// Пример использования JWT для аутентификации:
const jwt = require('jsonwebtoken');

const user = { id: 1, username: 'JohnDoe' };
const token = jwt.sign(user, 'your-secret-key', { expiresIn: '1h' });
console.log('Generated JWT:', token);

// 2. Авторизация:
// JWT также используется для авторизации, позволяя серверу проверять, имеет ли пользователь доступ к определенным ресурсам.
// При получении JWT сервер может декодировать его и проверять утверждения для определения прав доступа пользователя.

// Пример проверки JWT на сервере:
const decoded = jwt.verify(token, 'your-secret-key');
console.log('Decoded JWT:', decoded);

// 3. Обмен информацией:
// JWT может использоваться для безопасного обмена информацией между различными сервисами.
// Поскольку токен самодостаточен и подписан, его можно передавать между службами без необходимости обращения к центральному серверу для проверки.

// Итог:
// JWT является мощным инструментом для аутентификации и авторизации в веб-приложениях.
// Понимание структуры и основных применений JWT поможет вам эффективно использовать этот стандарт в своих проектах.
