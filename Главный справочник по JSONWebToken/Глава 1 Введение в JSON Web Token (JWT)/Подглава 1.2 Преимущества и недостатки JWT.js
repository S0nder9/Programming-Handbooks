// Глава 1: Введение в JSON Web Token (JWT)

// JSON Web Token (JWT) - это открытый стандарт (RFC 7519), который определяет компактный и автономный способ безопасной передачи информации между сторонами в виде JSON объекта.
// Информация в JWT может быть проверена и доверена, так как она подписана с использованием секрета или пары ключей публичный/приватный.

// Подглава 1.2: Преимущества и недостатки JWT

// Преимущества JWT:

// 1. Компактность
// JWT состоят из трех частей: заголовка, полезной нагрузки и подписи, что делает их очень компактными.
// Это позволяет легко передавать JWT в URL, заголовках HTTP-запросов или в теле POST-запросов.
// Компактный формат также способствует уменьшению нагрузки на сеть, что делает JWT эффективным способом передачи информации.

const jwtExample = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';

// 2. Переносимость
// JWT являются автономными и содержат всю необходимую информацию, включая идентификационные данные пользователя и метаданные.
// Это означает, что токен можно передавать между различными службами без необходимости доступа к общему состоянию на сервере.
// JWT могут быть использованы в распределенных системах, что делает их идеальными для микросервисной архитектуры.

const jwtPayload = {
  sub: '1234567890',
  name: 'John Doe',
  iat: 1516239022
};

// 3. Безопасность
// JWT могут быть подписаны с использованием секрета (HMAC алгоритмы) или пары ключей публичный/приватный (RSA или ECDSA).
// Подпись гарантирует, что токен не был изменен, и помогает защитить данные от несанкционированного доступа.
// При правильной настройке и использовании JWT может обеспечить высокий уровень безопасности в веб-приложениях.

const jwtHeader = {
  alg: 'HS256',
  typ: 'JWT'
};

// Недостатки JWT:

// 1. Отсутствие встроенной возможности отзыва
// Один из основных недостатков JWT - отсутствие встроенного механизма для отзыва токенов.
// Если токен был выпущен, он остается действительным до истечения срока действия, если не предприняты дополнительные меры для его отзыва.
// Это может стать проблемой, если токен был скомпрометирован или если нужно принудительно завершить сессию пользователя.

const tokenExpiry = {
  exp: Math.floor(Date.now() / 1000) + (60 * 60) // Токен истечет через 1 час
};

// 2. Риск компрометации ключей
// Безопасность JWT зависит от секретного ключа или приватного ключа, используемого для подписи токена.
// Если этот ключ будет скомпрометирован, злоумышленник сможет создать поддельные токены, которые будут восприниматься как легитимные.
// Поэтому крайне важно надежно хранить ключи и использовать безопасные методы их управления.

const secretKey = 'your-256-bit-secret'; // Пример секретного ключа для HMAC-SHA256

// Итог:
// JWT обладает рядом преимуществ, таких как компактность, переносимость и безопасность, что делает его популярным выбором для аутентификации и передачи данных в современных веб-приложениях.
// Однако, при использовании JWT следует учитывать его недостатки, такие как отсутствие встроенной возможности отзыва и риск компрометации ключей, и принимать соответствующие меры для обеспечения безопасности.
