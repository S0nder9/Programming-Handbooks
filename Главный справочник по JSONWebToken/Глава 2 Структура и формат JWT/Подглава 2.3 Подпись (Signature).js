// Глава 2: Структура и формат JWT

// Подглава 2.3: Подпись (Signature)

// В JSON Web Token (JWT) подпись играет важную роль в обеспечении целостности и подлинности токена.
// Подпись позволяет проверить, что токен не был изменен после его создания и что он был выдан доверенным источником.

// Назначение подписи в JWT:
// Подпись JWT используется для проверки того, что токен был выдан авторизованным сервером и не был изменен.
// Подпись гарантирует, что данные токена (заголовок и полезная нагрузка) не были изменены после его создания.

// Генерация подписи с использованием секретного ключа или публично-приватной пары ключей:
// JWT подпись создается с использованием алгоритма, указанного в заголовке токена.
// Основные алгоритмы для генерации подписи включают HMAC (с использованием секретного ключа) и RSA/ECDSA (с использованием пары ключей).

// 1. Генерация подписи с использованием секретного ключа (HMAC):
// При использовании алгоритма HMAC (например, HS256) секретный ключ используется для создания подписи.
// Пример генерации подписи с использованием HMAC в Node.js с библиотекой jsonwebtoken:
const jwt = require('jsonwebtoken');

const payload = { userId: 1 };
const secretKey = 'your-secret-key';
const token = jwt.sign(payload, secretKey, { algorithm: 'HS256' });

console.log('JWT:', token);

// 2. Генерация подписи с использованием публично-приватной пары ключей (RSA/ECDSA):
// При использовании алгоритмов RSA или ECDSA (например, RS256) создается пара ключей: один приватный ключ для подписи и один публичный ключ для проверки.
// Пример генерации подписи с использованием RSA в Node.js с библиотекой jsonwebtoken:
const fs = require('fs');

const privateKey = fs.readFileSync('private.key');
const payload = { userId: 1 };
const token = jwt.sign(payload, privateKey, { algorithm: 'RS256' });

console.log('JWT:', token);

// Проверка подписи при валидации JWT:
// При валидации JWT подпись используется для проверки подлинности токена.
// Важно использовать тот же ключ или пару ключей, которые использовались для его создания, чтобы правильно проверить подпись.

// 1. Проверка подписи с использованием секретного ключа (HMAC):
// Пример проверки подписи с использованием HMAC в Node.js с библиотекой jsonwebtoken:
const verified = jwt.verify(token, secretKey, { algorithms: ['HS256'] });
console.log('Verified Payload:', verified);

// 2. Проверка подписи с использованием публичного ключа (RSA):
// Пример проверки подписи с использованием RSA в Node.js с библиотекой jsonwebtoken:
const publicKey = fs.readFileSync('public.key');
const verified = jwt.verify(token, publicKey, { algorithms: ['RS256'] });
console.log('Verified Payload:', verified);

// Итог:
// Подпись JWT обеспечивает целостность и подлинность токена, позволяя проверить, что данные не были изменены и что токен был выдан авторизованным источником.
// Генерация и проверка подписи осуществляются с использованием соответствующих алгоритмов и ключей.
