// Глава 2: Структура и формат JWT

// JWT (JSON Web Token) — это компактный, URL-безопасный способ передачи утверждений между сторонами в виде JSON-объекта.
// В этой главе мы рассмотрим структуру и формат JWT, уделив особое внимание заголовку (Header).

// Подглава 2.1: Заголовок (Header)

// Заголовок (Header) — это первая часть JWT. Он содержит метаинформацию о токене,
// такую как используемый алгоритм подписи и тип токена.

// Формат и содержимое заголовка JWT:
// Заголовок представлен в виде JSON-объекта и затем кодируется в Base64Url.
// Обычно он включает два ключа: "alg" и "typ".

// Пример заголовка JWT:
const header = {
    alg: 'HS256', // Алгоритм подписи
    typ: 'JWT'    // Тип токена
  };
  
  // После кодирования в Base64Url заголовок может выглядеть так:
  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');
  console.log(encodedHeader); // Пример: "eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9"
  
  // Алгоритмы подписи и их назначение:
  // Алгоритм подписи (указанный в поле "alg") определяет, каким образом будет подписан токен для обеспечения его целостности.
  // Подпись токена гарантирует, что содержимое JWT не было изменено с момента его создания.
  
  // 1. HS256 (HMAC with SHA-256):
  // Этот алгоритм использует симметричную криптографию, где один и тот же секретный ключ используется для подписи и проверки токена.
  // Подходит для приложений, где контролируется серверная среда, так как оба конца коммуникации должны знать секретный ключ.
  // Пример использования HS256:
  const jwt = require('jsonwebtoken');
  const payload = { userId: 1 };
  const secret = 'your-256-bit-secret';
  const token = jwt.sign(payload, secret, { algorithm: 'HS256' });
  console.log(token); // Пример JWT с использованием HS256
  
  // 2. RS256 (RSA with SHA-256):
  // Этот алгоритм использует асимметричную криптографию, где пара ключей (закрытый и открытый) используется для подписи и проверки токена.
  // Закрытый ключ используется для подписи, а открытый — для проверки подписи.
  // Подходит для сценариев, где необходимо отделить сервер подписи от серверов проверки.
  // Пример использования RS256:
  const privateKey = 'your-private-key';
  const tokenRS256 = jwt.sign(payload, privateKey, { algorithm: 'RS256' });
  console.log(tokenRS256); // Пример JWT с использованием RS256
  
  // Другие алгоритмы:
  // - ES256 (ECDSA with SHA-256): Использует эллиптическую криптографию для подписи и проверки токена.
  // - PS256 (RSA-PSS with SHA-256): Вариант RS256 с более высокой криптографической стойкостью.
  
  // Итог:
  // Заголовок JWT содержит информацию о типе токена и используемом алгоритме подписи.
  // Правильный выбор алгоритма важен для безопасности и производительности приложения.
  