// Глава 5: Безопасность JWT

// Подглава 5.3: Работа с JSON Web Token в многопользовательской среде
// Масштабирование приложений с использованием JWT
// Управление JWT в распределенных системах

// JSON Web Tokens (JWT) играют важную роль в обеспечении безопасности и аутентификации в многопользовательских приложениях.
// В этой подглаве рассмотрим, как эффективно работать с JWT в масштабируемых и распределенных системах.

// 1. Масштабирование приложений с использованием JWT

// JWT обеспечивают безгосударственную аутентификацию, что делает их подходящими для масштабируемых приложений.
// Каждому пользователю предоставляется токен, который содержит все необходимые данные для идентификации, что позволяет серверу не хранить состояние сеансов.

// Преимущества использования JWT в масштабируемых системах:
// - **Отсутствие состояния:** Токены могут быть проверены без необходимости обращения к базе данных для проверки сессии.
// - **Упрощенная аутентификация:** JWT можно легко передавать между микросервисами, что упрощает аутентификацию в распределенных системах.

// Пример генерации и проверки JWT в Node.js с использованием библиотеки `jsonwebtoken`:
const jwt = require('jsonwebtoken');

const generateToken = (user) => {
  return jwt.sign({ userId: user.id }, 'your-secret-key', { expiresIn: '1h' });
};

const verifyToken = (token) => {
  try {
    return jwt.verify(token, 'your-secret-key');
  } catch (error) {
    return null;
  }
};

// 2. Управление JWT в распределенных системах

// В распределенных системах важно управлять JWT и обеспечивать их безопасность.
// Ниже рассмотрены ключевые аспекты управления JWT в таких системах:

// a. **Хранение секретных ключей:** 
// Секретные ключи, используемые для подписания JWT, должны храниться безопасно и быть недоступными посторонним лицам.
// Рекомендуется использовать защищенные хранилища ключей или конфигурации среды.

const secretKey = process.env.JWT_SECRET;

// b. **Обновление и отзыв токенов:**
// Для управления долгосрочными токенами может быть полезно использовать обновляющие токены (refresh tokens).
// При истечении срока действия основного токена, обновляющий токен может быть использован для получения нового основного токена.

const generateRefreshToken = (user) => {
  return jwt.sign({ userId: user.id }, 'your-refresh-secret-key', { expiresIn: '7d' });
};

// c. **Ротация и отзыв JWT:**
// В некоторых случаях может возникнуть необходимость в отзыве JWT. Это можно реализовать через черные списки (blacklists) или базы данных с отзывами токенов.
// При этом важно учитывать влияние на производительность и сложность реализации.

const blacklistedTokens = new Set();

const isTokenBlacklisted = (token) => {
  return blacklistedTokens.has(token);
};

const blacklistToken = (token) => {
  blacklistedTokens.add(token);
};

// d. **Обеспечение безопасности:**
// JWT должны быть переданы по защищенному каналу (например, HTTPS) для предотвращения перехвата.
// Также следует использовать безопасные методы хранения токенов на стороне клиента, такие как HttpOnly cookies.

const token = generateToken(user);

// Пример использования HttpOnly cookie для хранения JWT:
app.use((req, res, next) => {
  const token = req.cookies['jwt'];
  if (token && !isTokenBlacklisted(token)) {
    const user = verifyToken(token);
    req.user = user;
  }
  next();
});

// Итог:
// Использование JWT в масштабируемых и распределенных системах позволяет упростить аутентификацию и управление пользователями.
// Важно правильно управлять секретными ключами, обновляющими токенами и обеспечивать безопасность данных.
// Эти практики помогут создать надежные и безопасные многопользовательские приложения.
