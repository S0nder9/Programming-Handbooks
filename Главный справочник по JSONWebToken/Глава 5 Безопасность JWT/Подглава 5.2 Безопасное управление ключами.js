// Глава 5: Безопасность JWT
// Подглава 5.2: Безопасное управление ключами

// Генерация и хранение секретных ключей
// Секретные ключи являются основным элементом безопасности при работе с JSON Web Tokens (JWT).
// Они используются для подписания и проверки токенов, обеспечивая их подлинность и целостность.

// 1. Генерация секретных ключей
// Генерация секретного ключа должна обеспечивать его уникальность и сложность.
// Используйте криптографически безопасные методы генерации ключей для создания сильных и случайных ключей.
// В Node.js можно использовать модуль `crypto` для генерации ключей:
// Пример генерации секретного ключа:
const crypto = require('crypto');

const secretKey = crypto.randomBytes(64).toString('hex');
console.log('Generated Secret Key:', secretKey);

// 2. Хранение секретных ключей
// Хранение секретных ключей должно обеспечивать их безопасность и доступность только для авторизованных пользователей.
// Ключи не должны быть захардкожены в исходном коде или передаваться по незащищенным каналам.
// Рекомендуется использовать безопасные хранилища, такие как:
// - Переменные окружения
// - Секреты в облачных хранилищах (AWS Secrets Manager, Azure Key Vault и т.д.)
// - Конфигурационные файлы с ограниченным доступом

// Пример хранения ключа в переменной окружения:
process.env.JWT_SECRET = secretKey;

// Пример использования ключа из переменной окружения для подписания токенов:
const jwt = require('jsonwebtoken');

const token = jwt.sign({ userId: 1 }, process.env.JWT_SECRET, { expiresIn: '1h' });
console.log('Generated Token:', token);

// Регулярная ротация ключей для обеспечения безопасности
// Регулярная ротация секретных ключей помогает минимизировать риски в случае их компрометации.
// Это включает в себя замену ключей через определенные интервалы времени или при подозрении на утечку.

// 1. Планы и частота ротации ключей
// Определите план ротации ключей на основе ваших требований безопасности и уровня риска.
// Это может быть ежемесячно, ежеквартально или по мере необходимости в зависимости от чувствительности данных.

// 2. Реализация ротации ключей
// При ротации ключей необходимо учитывать обновление существующих токенов и сохранение совместимости.
// Один из подходов - использовать несколько версий ключей одновременно:
// - Старый ключ для проверки существующих токенов
// - Новый ключ для подписания новых токенов

// Пример реализации ротации ключей:
const oldSecretKey = process.env.OLD_JWT_SECRET;
const newSecretKey = process.env.NEW_JWT_SECRET;

// Проверка токенов с использованием старого ключа:
const verifyToken = (token) => {
  try {
    return jwt.verify(token, oldSecretKey);
  } catch (err) {
    if (err.name === 'JsonWebTokenError') {
      return jwt.verify(token, newSecretKey);
    }
    throw err;
  }
};

// Подписывание новых токенов с новым ключом:
const newToken = jwt.sign({ userId: 1 }, newSecretKey, { expiresIn: '1h' });
console.log('New Token:', newToken);

// Итог:
// Безопасное управление секретными ключами включает в себя их надежную генерацию, хранение и регулярную ротацию.
// Следуйте лучшим практикам для обеспечения безопасности ваших JWT и защиты ваших приложений.
