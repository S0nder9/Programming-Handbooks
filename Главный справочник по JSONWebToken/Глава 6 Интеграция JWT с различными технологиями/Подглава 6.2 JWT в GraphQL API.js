// –ì–ª–∞–≤–∞ 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è JWT —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
// –ü–æ–¥–≥–ª–∞–≤–∞ 6.2: JWT –≤ GraphQL API

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GraphQL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JWT

// GraphQL –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–∏–±–∫–∏–π —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã.
// –í–Ω–µ–¥—Ä–µ–Ω–∏–µ JWT (JSON Web Tokens) –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ GraphQL API –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º.

// –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ JWT —Å GraphQL:

// 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
// –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏–Ω–∏—Ç—Å—è), —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–µ—Ç JWT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É.
// –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GraphQL API.

const jwt = require('jsonwebtoken');

// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è JWT –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
const generateToken = (user) => {
  return jwt.sign({ userId: user.id }, 'your-secret-key', { expiresIn: '1h' });
};

// 2. –ü–µ—Ä–µ–¥–∞—á–∞ JWT –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
// –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è JWT –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `Authorization` –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É GraphQL.

// –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å JWT –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ:
const token = 'your-jwt-token';

fetch('/graphql', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  },
  body: JSON.stringify({
    query: `
      query {
        user {
          id
          name
        }
      }
    `
  })
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
// –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ GraphQL –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å JWT –≤ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
// –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞ GraphQL.

const { ApolloServer, gql } = require('apollo-server');
const { AuthenticationError } = require('apollo-server-errors');

// –ü—Ä–∏–º–µ—Ä middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT:
const context = ({ req }) => {
  const token = req.headers.authorization || '';
  if (token) {
    try {
      const decoded = jwt.verify(token.replace('Bearer ', ''), 'your-secret-key');
      return { userId: decoded.userId };
    } catch (e) {
      throw new AuthenticationError('Invalid or expired token');
    }
  }
  return {};
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ApolloServer:
const typeDefs = gql`
  type User {
    id: ID!
    name: String!
  }

  type Query {
    user: User
  }
`;

const resolvers = {
  Query: {
    user: (parent, args, context) => {
      if (!context.userId) {
        throw new AuthenticationError('You must be logged in');
      }
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ userId
      return { id: context.userId, name: 'John Doe' };
    }
  }
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context
});

server.listen().then(({ url }) => {
  console.log(`üöÄ Server ready at ${url}`);
});

// –ò—Ç–æ–≥:
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è JWT —Å GraphQL API –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞—á—É –∏—Ö –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
// –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –≤ GraphQL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
