// Глава 5: Трансформации и анимации в Canvas

// В HTML5 Canvas API трансформации используются для изменения расположения, размера и ориентации объектов на холсте.
// Трансформации позволяют манипулировать контекстом рисования с помощью функций `translate()`, `rotate()`, `scale()`, `transform()` и `setTransform()`.

// Подглава 5.1: Трансформации

// 1. translate()
// Функция `translate(x, y)` перемещает систему координат на холсте.
// После вызова этой функции все последующие рисования будут смещены на (x, y) от исходного положения.

const canvas = document.getElementById('myCanvas');
const ctx = canvas.getContext('2d');

ctx.translate(50, 50); // Перемещаем систему координат на (50, 50)

// Рисуем прямоугольник на новой системе координат
ctx.fillStyle = 'red';
ctx.fillRect(10, 10, 100, 100); // Прямоугольник рисуется на (60, 60)

// 2. rotate()
// Функция `rotate(angle)` поворачивает систему координат на заданный угол в радианах.

ctx.rotate(Math.PI / 4); // Поворот на 45 градусов

// Рисуем прямоугольник, который будет наклонен на 45 градусов
ctx.fillStyle = 'green';
ctx.fillRect(10, 10, 100, 100); // Прямоугольник будет наклонен

// 3. scale()
// Функция `scale(x, y)` изменяет масштаб системы координат. Умножает координаты на (x, y).

ctx.scale(2, 2); // Увеличиваем масштаб в 2 раза по обеим осям

// Рисуем прямоугольник, который будет в два раза больше по ширине и высоте
ctx.fillStyle = 'blue';
ctx.fillRect(10, 10, 100, 100); // Прямоугольник будет увеличен в 2 раза

// 4. transform()
// Функция `transform(a, b, c, d, e, f)` применяет произвольное преобразование к системе координат с помощью матрицы 2D преобразования.

// Аргументы: a, b, c, d — матрица преобразования, e и f — трансляция

ctx.transform(1, 0, 0, 1, 50, 50); // Применяет матрицу преобразования и перемещает систему координат на (50, 50)

// 5. setTransform()
// Функция `setTransform(a, b, c, d, e, f)` устанавливает матрицу преобразования и трансляцию как новые значения, сбрасывая предыдущее состояние.

ctx.setTransform(1, 0, 0, 1, 0, 0); // Устанавливаем единичную матрицу (отменяем все предыдущие трансформации)

// Пример использования setTransform для создания новой трансформации
ctx.setTransform(1, 0, 0, 1, 100, 100); // Устанавливаем новую матрицу преобразования и перемещаем систему координат на (100, 100)
ctx.fillStyle = 'purple';
ctx.fillRect(10, 10, 100, 100); // Рисуем прямоугольник в новой системе координат

// Итог:
// В Canvas API трансформации позволяют управлять тем, как объекты рисуются на холсте.
// Функции `translate()`, `rotate()`, `scale()`, `transform()` и `setTransform()` дают возможности для перемещения, поворота, масштабирования и произвольного преобразования объектов.

// Используйте эти функции для создания сложных визуальных эффектов и анимаций в ваших графических приложениях.
