// Глава 12: Интеграция Canvas с другими технологиями

// Подглава 12.1: Использование Canvas в сочетании с SVG
// В этой подглаве рассмотрим преимущества и недостатки использования Canvas и SVG вместе.

// Canvas и SVG являются двумя мощными технологиями для создания графики на веб-страницах. Каждая из них имеет свои сильные и слабые стороны, и их можно использовать в комбинации для создания сложных графических приложений.


// Преимущества использования Canvas:

// 1. Высокая производительность для анимации:
// Canvas отлично подходит для задач, требующих высокой производительности, таких как игры и интерактивные анимации. Он предоставляет прямой доступ к пикселям, что позволяет быстро обновлять содержимое.

// Пример использования Canvas для анимации:
const canvas = document.getElementById('myCanvas');
const ctx = canvas.getContext('2d');
let x = 0;

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = 'blue';
  ctx.fillRect(x, 50, 100, 100);
  x += 2;
  requestAnimationFrame(animate);
}

animate();


// 2. Гибкость рисования:
// Canvas позволяет рисовать практически что угодно: линии, кривые, изображения и текст. Это делает его идеальным для создания сложных графических эффектов и визуализаций.

// Пример рисования на Canvas:
ctx.beginPath();
ctx.arc(150, 75, 50, 0, 2 * Math.PI);
ctx.stroke();


// Преимущества использования SVG:

// 1. Высокая точность и масштабируемость:
// SVG является векторной графикой, что означает, что она не теряет качества при масштабировании. Это делает её идеальной для отображения графики на устройствах с различным разрешением.

// Пример использования SVG для масштабируемой графики:
const svgNS = "http://www.w3.org/2000/svg";
const svg = document.createElementNS(svgNS, "svg");
const circle = document.createElementNS(svgNS, "circle");

circle.setAttribute("cx", 50);
circle.setAttribute("cy", 50);
circle.setAttribute("r", 40);
circle.setAttribute("stroke", "black");
circle.setAttribute("stroke-width", 3);
circle.setAttribute("fill", "red");

svg.appendChild(circle);
document.body.appendChild(svg);


// 2. Поддержка событий и стилей:
// SVG поддерживает DOM-события и стили CSS, что упрощает создание интерактивных и стилизованных элементов. Это делает SVG отличным выбором для создания интерактивных диаграмм и интерфейсов.

// Пример добавления событий к SVG-элементам:
circle.addEventListener('click', () => {
  alert('Circle clicked!');
});


// Недостатки использования Canvas:

// 1. Отсутствие интерактивности:
// Canvas является растровым, и каждый раз при изменении нужно перерисовывать всё содержимое. Это может усложнить создание интерактивных элементов и работу с событиями.


// Недостатки использования SVG:

// 1. Ограниченная производительность для анимации:
// SVG может быть медленным для сложных анимаций и большого количества объектов. Его производительность ограничена, особенно при работе с большим количеством элементов или сложными анимациями.


// Интеграция Canvas и SVG:

// Использование Canvas и SVG вместе позволяет воспользоваться преимуществами обеих технологий. Например, можно использовать SVG для создания интерактивных элементов и Canvas для высокопроизводительной анимации.

// Пример комбинированного использования Canvas и SVG:
const svgContainer = document.createElementNS(svgNS, "svg");
const svgRect = document.createElementNS(svgNS, "rect");

svgRect.setAttribute("x", 10);
svgRect.setAttribute("y", 10);
svgRect.setAttribute("width", 100);
svgRect.setAttribute("height", 100);
svgRect.setAttribute("fill", "green");

svgRect.addEventListener('click', () => {
  ctx.fillStyle = 'red';
  ctx.fillRect(50, 50, 200, 200);
});

svgContainer.appendChild(svgRect);
document.body.appendChild(svgContainer);

// В этом примере SVG используется для создания интерактивного элемента, а Canvas - для выполнения высокопроизводительных графических операций в ответ на взаимодействие с пользователем.


// Итог:
// Использование Canvas и SVG вместе позволяет создавать мощные и гибкие графические приложения. Canvas предоставляет высокую производительность для анимаций и сложных графических операций, в то время как SVG обеспечивает высокую точность и масштабируемость для интерактивных элементов и диаграмм.
