// Глава 7: Обработка событий в Canvas

// Подглава 7.1: Введение в обработку событий

// В Canvas API JavaScript предоставляет возможности для рисования графики на веб-страницах.
// В этой главе мы рассмотрим, как обрабатывать события мыши и клавиатуры, чтобы взаимодействовать с графикой на Canvas.

// Основные события мыши:

// 1. `click` - Срабатывает, когда пользователь нажимает на Canvas:
// Пример обработчика события клика:
const canvas = document.getElementById('myCanvas');
canvas.addEventListener('click', (event) => {
  const rect = canvas.getBoundingClientRect();
  const x = event.clientX - rect.left; // Координата X на Canvas
  const y = event.clientY - rect.top;  // Координата Y на Canvas
  console.log(`Клик по координатам: (${x}, ${y})`);
  // Вы можете использовать x и y для выполнения действий, например, для рисования или обработки кликов по элементам.
});

// 2. `mousemove` - Срабатывает, когда пользователь перемещает курсор мыши по Canvas:
// Пример обработчика события перемещения мыши:
canvas.addEventListener('mousemove', (event) => {
  const rect = canvas.getBoundingClientRect();
  const x = event.clientX - rect.left; // Координата X на Canvas
  const y = event.clientY - rect.top;  // Координата Y на Canvas
  console.log(`Перемещение мыши по координатам: (${x}, ${y})`);
  // Это событие полезно для создания инструментов рисования или отслеживания движения мыши по Canvas.
});

// 3. `mousedown` - Срабатывает, когда пользователь нажимает кнопку мыши на Canvas:
// Пример обработчика события нажатия кнопки мыши:
canvas.addEventListener('mousedown', (event) => {
  const rect = canvas.getBoundingClientRect();
  const x = event.clientX - rect.left; // Координата X на Canvas
  const y = event.clientY - rect.top;  // Координата Y на Canvas
  console.log(`Нажата кнопка мыши по координатам: (${x}, ${y})`);
  // Используйте это событие для начала рисования или обработки других действий при нажатии кнопки мыши.
});

// 4. `mouseup` - Срабатывает, когда пользователь отпускает кнопку мыши на Canvas:
// Пример обработчика события отпускания кнопки мыши:
canvas.addEventListener('mouseup', (event) => {
  const rect = canvas.getBoundingClientRect();
  const x = event.clientX - rect.left; // Координата X на Canvas
  const y = event.clientY - rect.top;  // Координата Y на Canvas
  console.log(`Отпущена кнопка мыши по координатам: (${x}, ${y})`);
  // Это событие полезно для завершения рисования или выполнения действий после отпускания кнопки мыши.
});

// 5. `contextmenu` - Срабатывает, когда пользователь вызывает контекстное меню (щелчок правой кнопкой мыши):
// Пример обработчика события вызова контекстного меню:
canvas.addEventListener('contextmenu', (event) => {
  event.preventDefault(); // Предотвращаем появление стандартного контекстного меню
  const rect = canvas.getBoundingClientRect();
  const x = event.clientX - rect.left; // Координата X на Canvas
  const y = event.clientY - rect.top;  // Координата Y на Canvas
  console.log(`Вызвано контекстное меню по координатам: (${x}, ${y})`);
  // Вы можете добавить пользовательское контекстное меню или выполнять другие действия при вызове контекстного меню.
});

// Основные события клавиатуры:

// 1. `keydown` - Срабатывает, когда пользователь нажимает клавишу на клавиатуре:
// Пример обработчика события нажатия клавиши:
document.addEventListener('keydown', (event) => {
  console.log(`Нажата клавиша: ${event.key}`);
  // Используйте это событие для обработки нажатий клавиш, например, для управления игровыми персонажами или выполнения команд.
});

// 2. `keyup` - Срабатывает, когда пользователь отпускает клавишу на клавиатуре:
// Пример обработчика события отпускания клавиши:
document.addEventListener('keyup', (event) => {
  console.log(`Отпущена клавиша: ${event.key}`);
  // Это событие полезно для обработки действий после отпускания клавиши, например, для прекращения выполнения команды.
});

// 3. `keypress` - Срабатывает, когда пользователь нажимает клавишу на клавиатуре (устаревший метод, рекомендуется использовать `keydown`):
// Пример обработчика события нажатия клавиши:
document.addEventListener('keypress', (event) => {
  console.log(`Нажата клавиша: ${event.key}`);
  // Важно отметить, что это событие может не срабатывать для всех клавиш, например, для клавиш Shift или Ctrl.
});

// Итог:
// Обработка событий в Canvas позволяет взаимодействовать с пользователем через мышь и клавиатуру.
// Знание основных событий и методов обработки событий поможет вам создавать более интерактивные и динамичные веб-приложения.
