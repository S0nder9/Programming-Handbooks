// Глава 1: Введение в MongoDB (mongoose) - Повышение производительности чтения с помощью индексов

// В MongoDB индексы являются мощным инструментом для повышения производительности запросов.
// Индексы позволяют MongoDB находить документы быстрее, уменьшая количество сканируемых записей.

// В mongoose можно легко создать индексы в схемах, что значительно улучшит производительность операций чтения.
// В этом примере мы добавим индексы для повышения скорости выборки данных по цене, рейтингу и slug.


// 1. Что такое индексы и зачем они нужны?
// Индексы позволяют MongoDB находить данные быстрее, чем при последовательном обходе всех документов в коллекции.
// Без индексов MongoDB должно будет проверять каждый документ в коллекции для выполнения поиска, что может занимать много времени при больших объемах данных.

// Пример:
// Предположим, у нас есть коллекция `users`, содержащая информацию о пользователях.
// Если мы часто ищем пользователей по полю `email`, имеет смысл создать индекс для этого поля.
// Это позволит MongoDB быстро находить документы с определенным email.

// 2. Создание индексов в Mongoose

// В Mongoose можно создавать индексы несколькими способами:
// - Явно при определении схемы
// - Динамически, используя метод `.createIndex()`

// Пример создания индекса при определении схемы:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: {
    type: String,
    unique: true, // Уникальный индекс
    required: true
  },
  age: Number,
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// Теперь Mongoose создаст уникальный индекс для поля `email`.
// Это гарантирует, что в коллекции не будет двух документов с одинаковым значением поля `email`.
const User = mongoose.model('User', userSchema);

// 3. Динамическое создание индексов
// Если необходимо добавить индекс после определения схемы, можно использовать метод `.createIndex()`.
// Например, можно создать индекс для поля `age`:
User.collection.createIndex({ age: 1 }, (err, result) => {
  if (err) {
    console.error('Error creating index:', err);
  } else {
    console.log('Index created:', result);
  }
});

// 4. Виды индексов в MongoDB
// MongoDB поддерживает разные типы индексов, включая:
// - Однопольные индексы (Single Field Index): Индекс по одному полю, например, `age: 1`.
// - Композитные индексы (Compound Index): Индекс по нескольким полям, например, `{ age: 1, createdAt: -1 }`.
// - Уникальные индексы (Unique Index): Гарантирует уникальность значений, например, `{ email: 1, unique: true }`.

// Пример создания композитного индекса для `age` и `createdAt`:
User.collection.createIndex({ age: 1, createdAt: -1 }, (err, result) => {
  if (err) {
    console.error('Error creating composite index:', err);
  } else {
    console.log('Composite index created:', result);
  }
});

// 5. Как индексы повышают производительность
// С индексами MongoDB может быстро находить документы по указанным полям, что уменьшает нагрузку на сервер и снижает время выполнения запросов.
// Однако индексы занимают дополнительное место в памяти, поэтому важно использовать их рационально.

// 6. Просмотр и удаление индексов
// После создания индексов можно просмотреть все индексы коллекции и удалить ненужные.
// Пример вывода списка индексов:
User.collection.indexes((err, indexes) => {
  if (err) {
    console.error('Error retrieving indexes:', err);
  } else {
    console.log('Indexes:', indexes);
  }
});

// Пример удаления индекса:
User.collection.dropIndex('age_1', (err, result) => {
  if (err) {
    console.error('Error dropping index:', err);
  } else {
    console.log('Index dropped:', result);
  }
});


// Пример использования метода `explain()`
// `explain()` позволяет получить информацию о том, как MongoDB выполняет запрос и какие индексы используются.
// Это полезный способ понять, как работает оптимизация и где индексы могут улучшить производительность.

const doc = await features.query.explain(); // Анализирует выполнение запроса и возвращает статистику

// Оптимизация производительности с помощью индексов:

// 1. Индекс по цене и среднему рейтингу
// Создание композитного индекса на `price` и `ratingAverage` позволяет MongoDB оптимизировать сортировку и фильтрацию данных по этим полям.
tourSchema.index({
    price: 1,            // Индекс по цене в порядке возрастания
    ratingAverage: -1    // Индекс по среднему рейтингу в порядке убывания
});

// 2. Индекс по полю `slug`
// Создание индекса по `slug` ускоряет поиск конкретных туров по их уникальным идентификаторам `slug`.
tourSchema.index({
    slug: 1              // Индекс по полю slug в порядке возрастания
});

// Итог:
// Создание индексов в MongoDB с помощью mongoose позволяет улучшить производительность запросов, особенно когда данные активно читаются.
// Индексы уменьшают количество операций поиска и сортировки, что делает выборку данных значительно быстрее.
// Использование `explain()` помогает понять, как оптимизация индексов влияет на производительность запросов.
