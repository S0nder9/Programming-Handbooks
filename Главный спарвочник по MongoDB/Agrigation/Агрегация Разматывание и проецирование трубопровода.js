// Глава 1: Введение в MongoDB - Агрегация. Разматывание и проецирование трубопровода.

// В MongoDB агрегация позволяет выполнять сложные запросы и трансформации данных с помощью нескольких стадий, 
// которые обрабатываются последовательно в так называемом "трубопроводе". 
// В этой главе мы рассмотрим базовые принципы агрегации на примере разматывания и проецирования данных в трубопроводе.

// 1. Разматывание (Unwind)
// Оператор `$unwind` используется для "разматывания" массивов, превращая каждый элемент массива в отдельный документ.
// Это полезно, когда необходимо обработать каждый элемент массива по отдельности.
// В примере ниже, мы разматываем массив `startDates`, превращая каждую дату начала тура в отдельный документ.

{
    $unwind: "$startDates"
}

// 2. Сопоставление (Match)
// После разматывания массива можно отфильтровать данные с помощью оператора `$match`.
// В данном примере, мы выбираем только те туры, которые начинаются в указанном году. Для этого используется оператор `$gte` и `$lte`,
// чтобы указать диапазон дат для фильтрации.

{
    $match: {
        startDates: {
            $gte: new Date(`${year}-01-01`),
            $lte: new Date(`${year}-12-31`)
        }
    }
}

// 3. Группировка (Group)
// Оператор `$group` позволяет сгруппировать документы по определённому полю.
// В данном случае, мы группируем туры по месяцу начала, используя `$month` для извлечения месяца из поля `startDates`.
// Мы также считаем количество туров с помощью `$sum` и сохраняем названия туров в массиве с помощью `$push`.

{
    $group: {
        _id: { $month: "$startDates" },
        numTourStarts: { $sum: 1 },
        tours: { $push: "$name" }
    }
}

// 4. Добавление полей (Add Fields)
// Оператор `$addFields` позволяет добавить или изменить поля в документе.
// В данном примере, мы добавляем поле `month`, которое будет содержать номер месяца, извлечённого в предыдущей стадии группировки.

{
    $addFields: { month: "$_id" }
}

// 5. Проецирование (Project)
// Оператор `$project` используется для управления тем, какие поля должны быть включены в конечный результат.
// В данном случае, мы убираем поле `_id`, чтобы оно не отображалось в ответе.

{
    $project: {
        _id: 0
    }
}

// 6. Сортировка (Sort)
// Оператор `$sort` позволяет отсортировать результаты агрегации по определённому полю.
// Здесь мы сортируем данные по полю `numTourStarts` в порядке убывания, чтобы самые популярные месяцы отображались первыми.

{
    $sort: {
        numTourStarts: -1
    }
}

// Полный пример:

exports.getMonthlyPlay = async (req, res) => {
    try {
        const year = req.params.year * 1; // Получаем год из параметров запроса

        const plan = await Tour.aggregate([
            {
                $unwind: "$startDates" // Разматываем массив дат начала тура
            },
            {
                $match: {
                    startDates: {
                        $gte: new Date(`${year}-01-01`), // Фильтруем туры по датам в указанном году
                        $lte: new Date(`${year}-12-31`)
                    }
                }
            },
            {
                $group: {
                    _id: { $month: "$startDates" }, // Группируем по месяцу начала тура
                    numTourStarts: { $sum: 1 }, // Считаем количество туров в каждом месяце
                    tours: { $push: "$name" } // Сохраняем названия туров
                }
            },
            {
                $addFields: { month: "$_id" } // Добавляем поле с номером месяца
            },
            {
                $project: { _id: 0 } // Убираем поле _id из результата
            },
            {
                $sort: { numTourStarts: -1 } // Сортируем по количеству туров в порядке убывания
            }
        ]);

        res.status(200).json({
            status: "success",
            data: {
                plan
            }
        });
    } catch (err) {
        console.error("Error fetching tour stats:", err);
        res.status(400).json({
            status: "fail",
            message: "Failed to retrieve stats",
            error: err.message
        });
    }
};

// Итог:
// В MongoDB агрегация позволяет выполнять мощные трансформации и фильтрацию данных.
// Мы рассмотрели такие стадии, как разматывание массивов, сопоставление, группировка, проецирование и сортировка, которые часто используются для обработки данных.
