// Глава 1: Введение в MongoDB - Ловля не пойманных исключений

// В работе с MongoDB и Node.js важно учитывать обработку непредвиденных ошибок.
// Иногда ошибки могут возникать вне обработанных блоков try-catch, что может привести к падению приложения.
// Чтобы предотвратить крах приложения и корректно завершить его работу, можно использовать глобальную обработку таких ошибок.

// Ловля не пойманных исключений:
// В Node.js можно использовать глобальный обработчик событий process.on("uncaughtException")
// для перехвата ошибок, которые не были обработаны на уровне кода. Это позволяет регистрировать ошибки и корректно завершать процесс.

process.on("uncaughtException", (err) => {
    console.log(`ERROR: \n${err.name}, ${err.message}`);
    console.log("uncaught Exception! Shutting down...");
    // Завершаем процесс, чтобы избежать некорректного состояния приложения
    process.exit(1);
});

// Пример:
// Представьте, что у вас есть ошибка в подключении к MongoDB или другая ошибка в коде, которая не была обработана.
// Глобальный обработчик исключений перехватит эту ошибку, выведет сообщение и корректно завершит приложение.

const mongoose = require('mongoose');

// Предположим, у вас есть подключение к MongoDB, но что-то пошло не так:
const connectToDB = async () => {
  try {
    await mongoose.connect('mongodb://localhost:27017/testdb', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('Connected to MongoDB');
  } catch (error) {
    // В случае ошибки в подключении она будет обработана в блоке catch
    console.error('Error connecting to MongoDB:', error.message);
  }
};

// Тем не менее, если в приложении возникнет ошибка, не связанная напрямую с базой данных
// и не обработанная внутри try-catch, global process.on("uncaughtException") перехватит ее.

// Запуск функции подключения к базе данных:
connectToDB();

// Итог:
// Обработка не пойманных исключений — это важный аспект создания стабильного приложения на Node.js с MongoDB.
// Используйте глобальный обработчик process.on("uncaughtException"), чтобы фиксировать неожиданные ошибки
// и корректно завершать работу приложения, минимизируя риски оставления приложения в некорректном состоянии.
