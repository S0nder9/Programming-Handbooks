// Глава 1: Введение в MongoDB - Ошибки при разработке и производстве

// При работе с MongoDB важно правильно обрабатывать ошибки как на этапе разработки, так и в продакшн среде.
// Обработка ошибок помогает улучшить стабильность и безопасность приложения.
// Рассмотрим, как можно реализовать обработку ошибок с разделением логики для разработки и продакшн сред.

// 1. Функция sendErrorDev
// Эта функция предназначена для вывода ошибок во время разработки.
// Она возвращает подробную информацию об ошибке, такую как статус, сообщение и стек вызовов (stack), чтобы разработчик мог легко найти и исправить проблему.
const sendErrorDev = (err, res) => {
    res.status(err.statusCode).json({
        status: err.status,
        error: err,
        message: err.message,
        stack: err.stack,
    });
};

// 2. Функция sendErrorProd
// Эта функция используется в продакшн среде, чтобы минимизировать утечку информации о внутренних деталях сервера.
// Если ошибка является операционной (то есть предсказуемой и обработанной), то возвращается сообщение об ошибке пользователю.
// В противном случае возвращается общее сообщение, а ошибка логируется на сервере.
const sendErrorProd = (err, res) => {
    if (err.isOperational) {
        // Операционная ошибка: возвращаем сообщение пользователю
        res.status(err.statusCode).json({
            status: err.status,
            message: err.message,
        });
    } else {
        // Неоперационная ошибка: логируем и возвращаем общее сообщение
        console.error("ERROR!", err);

        res.status(500).json({
            status: "error",
            message: "Something went wrong!",
        });
    }
};

// 3. Основная функция обработки ошибок
// Эта функция экспортируется и используется в Express приложении как middleware для глобальной обработки ошибок.
// В зависимости от среды (разработка или продакшн) вызывается соответствующая функция для отправки ответа об ошибке.
module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500; // По умолчанию код ошибки 500 (Internal Server Error)
    err.status = err.status || "error"; // По умолчанию статус "error"

    // Определяем среду и вызываем соответствующую функцию для обработки ошибки
    if (process.env.NODE_ENV === "development") {
        sendErrorDev(err, res);
    } else if (process.env.NODE_ENV === "production") {
        sendErrorProd(err, res);
    }
};

// Ошибки в разработке и в продакшн среде могут обрабатываться по-разному:
// - В разработке предоставляется полная информация, чтобы помочь разработчику.
// - В продакшн среде информация ограничена, чтобы защитить приложение и данные.

// Типичные ошибки при работе с MongoDB:
// - Ошибки подключения к базе данных (например, неверный URL или недоступный сервер).
// - Ошибки валидации данных при попытке сохранить или обновить документы в базе данных.
// - Ошибки прав доступа или авторизации при работе с коллекциями.

// Правильная обработка ошибок в MongoDB приложениях помогает создавать более стабильные и защищенные системы.
