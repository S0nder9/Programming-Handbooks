// Глава 1: Введение в MongoDB - Ловля ошибок в Async-функциях

// При работе с MongoDB в Node.js часто используются асинхронные функции для взаимодействия с базой данных.
// Однако, ошибки, возникающие в этих функциях, могут привести к сбоям в приложении, если они не обрабатываются должным образом.
// Для упрощения обработки ошибок можно использовать специальную функцию-обертку для async-функций.
// Это помогает автоматически перехватывать и обрабатывать ошибки, возникающие в асинхронных операциях.

// Пример функции-обертки для асинхронных маршрутов:
module.exports = (fn) => {
    return (req, res, next) => {
        fn(req, res, next).catch(next);
    };
};

// В этом примере функция `catchAsync` принимает асинхронную функцию `fn` и возвращает новую функцию, которая перехватывает ошибки.
// Если внутри `fn` возникает ошибка, она автоматически передается в `next()`, и Express.js обрабатывает ее в middleware для ошибок.

// Пример использования функции `catchAsync` для обработки ошибок в контроллере:
exports.getAllTours = catchAsync(async (req, res) => {
    // Создаем экземпляр APIFeatures для применения фильтрации, сортировки, ограничения полей и пагинации
    const features = new APIFeatures(Tour.find(), req.query)
        .filter()
        .sort()
        .limitFields()
        .paginate();

    // Выполняем запрос к базе данных и получаем туры
    const tours = await features.query;

    // Возвращаем успешный ответ с полученными данными
    res.status(200).json({
        status: "success",
        results: tours.length,
        data: {
            tours,
        },
    });
});

// В этом контроллере `getAllTours` используется `catchAsync` для оборачивания асинхронной функции.
// Если при выполнении запроса или обработке данных произойдет ошибка, она будет автоматически перехвачена и передана в middleware обработки ошибок Express.

// Итог:
// Использование функции-обертки для async-функций упрощает управление ошибками и позволяет централизовать их обработку в приложении.
// Это особенно полезно при работе с базами данных, такими как MongoDB, где асинхронные операции встречаются повсеместно.
