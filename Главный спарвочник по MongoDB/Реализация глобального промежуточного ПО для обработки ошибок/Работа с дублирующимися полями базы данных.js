// Глава 1: Введение в MongoDB - Работа с дублирующимися полями базы данных

// MongoDB является одной из самых популярных NoSQL баз данных, и при работе с ней часто возникают различные ошибки.
// Одна из таких ошибок — это ошибка, связанная с дублирующимися значениями уникальных полей (например, email, username и т. д.).
// В данной главе рассмотрим, как можно обработать подобную ошибку в Node.js приложении.

// Пример функции для обработки ошибки дублирования уникальных полей в MongoDB:
const handleDuplicateFieldsDB = (err) => {
    // Извлечение значения поля, которое вызвало ошибку, из сообщения об ошибке
    const value = err.errmsg.match(/(["'])(\\?.)*?\1/);

    // Формирование сообщения для пользователя
    const message = `Duplicate field value: ${value}. Please use a different value.`;
    return new AppError(message, 400);
};

// Эта функция создает экземпляр пользовательской ошибки AppError с сообщением и статусом 400 (Bad Request),
// чтобы вернуть корректный ответ клиенту.

// Пример middleware для обработки ошибок в Express.js:
module.exports = (err, req, res, next) => {
    // Устанавливаем статус ошибки и её код, если они не были заданы ранее
    err.statusCode = err.statusCode || 500;
    err.status = err.status || "error";

    // Разделяем обработку ошибок для development и production окружений
    if (process.env.NODE_ENV === "development") {
        sendErrorDev(err, res); // Функция, отправляющая полное сообщение об ошибке для отладки в dev-режиме
    } else if (process.env.NODE_ENV === "production") {
        let error = { ...err };

        // Проверка типа ошибки и обработка конкретных случаев
        if (error.name === "CastError") {
            error = handleCastErrorDB(error);
        }

        // Обработка ошибки дублирующихся полей, если она произошла
        if (error.code === 11000) {
            error = handleDuplicateFieldsDB(error);
        }

        // Отправка отформатированной ошибки в production-режиме
        sendErrorProd(error, res);
    }
};

// 1. Пример использования:
// При попытке добавить пользователя с уже существующим email в базе данных возникает ошибка с кодом 11000.
// Функция handleDuplicateFieldsDB перехватывает эту ошибку и возвращает понятное сообщение пользователю.

// 2. Подробности реализации:
// - Функция использует регулярное выражение для поиска значения поля, которое вызвало ошибку.
// - Формируется сообщение для пользователя с указанием значения, которое привело к конфликту, и предложением изменить его.

// 3. Важные моменты:
// - Обработка ошибок важна для улучшения UX и предотвращения непредвиденных сбоев в приложении.
// - Важно разделять режимы разработки и продакшн для обеспечения безопасности и удобства отладки.

// Итог:
// Работа с дублирующимися полями в MongoDB может быть сложной, но с помощью специальных middleware и обработки ошибок можно улучшить надежность приложения и предоставить пользователям более понятные сообщения о возникающих ошибках.
