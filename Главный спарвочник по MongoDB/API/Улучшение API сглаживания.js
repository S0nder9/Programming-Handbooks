// Глава 1: Введение в MongoDB - Улучшение API

// В этой главе мы рассмотрим, как MongoDB может быть использован для оптимизации и улучшения API на уровне запросов.
// Сглаживание API - это один из приемов, который помогает упростить взаимодействие с данными.
// Например, с помощью `aliasTopTour` мы можем автоматически задавать параметры запроса, чтобы пользователю не приходилось их указывать вручную.

// Пример использования aliasTopTour:
exports.aliasTopTour = (req, res, next) => {
    // Устанавливаем параметры запроса по умолчанию:
    req.query.limit = "5"; // Ограничиваем количество туров до 5
    req.query.sort = "-ratingAverage,price"; // Сортируем по убыванию рейтинга и по цене
    req.query.fields = "name,price,ratingAverage,summary,difficulty"; // Выбираем только нужные поля
  
    // Переходим к следующему middleware или обработчику
    next();
  };
  
  // Объяснение:
  // 1. Параметры запроса `limit`, `sort` и `fields` передаются в функцию, что позволяет задавать стандартные параметры для определенных маршрутов.
  // Это позволяет пользователю автоматически получать только 5 туров, отсортированных по убыванию среднего рейтинга и цене.
  // Поля, которые будут возвращены, ограничены только необходимыми, что помогает уменьшить объем передаваемых данных.
  
  // Зачем использовать aliasTopTour?
  // В ситуациях, когда определенный маршрут API должен всегда возвращать схожие данные (например, "топовые туры"), вы можете заранее настроить параметры запроса.
  // Это упрощает API и избавляет от необходимости каждый раз вручную указывать параметры.
  
  // Пример использования aliasTopTour в маршруте:
  const express = require('express');
  const app = express();
  
  // Контроллер маршрута для получения топовых туров
  app.get('/api/v1/tours/top-5-tours', aliasTopTour, getAllTours);
  
  // Функция getAllTours, которая выполняет поиск туров в базе данных MongoDB
  const getAllTours = async (req, res) => {
    try {
      const tours = await Tour.find(req.query); // Найдем туры на основе параметров запроса
      res.status(200).json({
        status: 'success',
        results: tours.length,
        data: { tours }
      });
    } catch (err) {
      res.status(400).json({
        status: 'fail',
        message: err.message
      });
    }
  };
  
  // Пример работы aliasTopTour:
  // При вызове маршрута /api/v1/tours/top-5-tours пользователь автоматически получит 5 туров, отсортированных по убыванию рейтинга и цене, 
  // при этом вернутся только поля name, price, ratingAverage, summary и difficulty.
  
  // Итог:
  // Использование aliasTopTour помогает сократить дублирование кода и стандартизировать параметры запросов для определенных маршрутов API.
  // Это улучшает удобство использования API и уменьшает сложность взаимодействия с MongoDB.
  