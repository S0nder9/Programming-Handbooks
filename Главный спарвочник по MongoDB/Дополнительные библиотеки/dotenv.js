// Глава 1: Введение в MongoDB - dotenv

// MongoDB является одной из самых популярных NoSQL баз данных, широко используемой для хранения данных в формате JSON.
// При работе с MongoDB в Node.js важно правильно управлять конфиденциальной информацией, такой как URI для подключения к базе данных.
// В этой главе мы рассмотрим, как подключиться к MongoDB с использованием переменных окружения (dotenv) для защиты ваших данных.

// 1. Установка и настройка dotenv

// Для начала необходимо установить пакет dotenv, который позволит нам загружать переменные окружения из файла .env в наше приложение.
// Выполните следующую команду в терминале для установки dotenv:

// npm install dotenv

// 2. Создание файла .env

// Создайте файл .env в корне вашего проекта. В этом файле будут храниться конфиденциальные данные, такие как строка подключения к MongoDB.
// Пример содержимого файла .env:

// .env
MONGO_URI=mongodb+srv://username:password@cluster0.mongodb.net/mydatabase?retryWrites=true&w=majority

// 3. Настройка dotenv в проекте

// В начале вашего основного файла (например, server.js или app.js) необходимо импортировать и настроить dotenv, чтобы он мог загружать переменные окружения из файла .env:

require('dotenv').config();

// Теперь мы можем получить доступ к нашим переменным окружения через process.env.
// Пример использования переменной окружения для подключения к MongoDB:

const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('Error connecting to MongoDB:', error);
    process.exit(1); // Остановить процесс в случае ошибки
  }
};

connectDB();

// 4. Преимущества использования dotenv

// Использование dotenv для хранения строк подключения и других конфиденциальных данных имеет следующие преимущества:

// - Безопасность: Переменные окружения не попадают в исходный код, что помогает предотвратить утечки данных.
// - Простота использования: dotenv легко интегрируется с любым Node.js приложением.
// - Гибкость: Можно легко менять настройки, просто обновив значения переменных окружения в файле .env, не затрагивая сам код.

// 5. Защита файла .env

// Важно не забывать добавлять файл .env в .gitignore, чтобы он не был случайно загружен в репозиторий и не стал доступным для всех.
// Пример записи в .gitignore:

// .gitignore
.env

// Итог:
// Введение в использование MongoDB с переменными окружения с помощью dotenv позволяет обезопасить конфиденциальные данные и упростить настройку приложения.
// Это один из важных шагов при создании надежного и безопасного Node.js приложения, работающего с базой данных.
