// Глава 1: Введение в MongoDB - Виртуальные свойства

// Виртуальные свойства в MongoDB представляют собой свойства, которые не сохраняются непосредственно в базе данных,
// но могут быть рассчитаны на основе других полей документа. Они полезны для добавления вычисляемых значений в документы,
// которые нужны только при чтении данных.

// Как работают виртуальные свойства:
// Виртуальные свойства обычно используются в сочетании с библиотекой Mongoose, которая является популярной ORM для работы с MongoDB.
// С помощью виртуальных свойств можно, например, добавить вычисляемое поле в документ, которое возвращает значение, 
// полученное из других полей этого документа.

// Пример использования виртуальных свойств с Mongoose:

const mongoose = require('mongoose');
const { Schema } = mongoose;

// Определение схемы пользователя
const userSchema = new Schema({
  firstName: String,
  lastName: String,
  age: Number
});

// Добавление виртуального свойства 'fullName', которое объединяет firstName и lastName
userSchema.virtual('fullName').get(function () {
  return `${this.firstName} ${this.lastName}`;
});

// Создание модели на основе схемы
const User = mongoose.model('User', userSchema);

// Пример использования виртуального свойства
const user = new User({
  firstName: 'John',
  lastName: 'Doe',
  age: 30
});

console.log(user.fullName); // Выведет: John Doe

// Виртуальные свойства позволяют возвращать вычисляемые значения при доступе к документам, не сохраняя эти значения в базе данных.

// Пример использования виртуального свойства для конверсии данных:
// Допустим, у нас есть поле, которое хранит возраст пользователя в годах, и мы хотим добавить виртуальное свойство для расчета возраста в месяцах.

userSchema.virtual('ageInMonths').get(function () {
  return this.age * 12;
});

console.log(user.ageInMonths); // Выведет: 360 (если возраст 30)

// Это помогает работать с дополнительными данными без увеличения объема базы данных.

// Ограничения виртуальных свойств:
// 1. Виртуальные свойства не сохраняются в базе данных. Это означает, что они доступны только при чтении документа в приложении.
// 2. Виртуальные свойства не влияют на запросы MongoDB и не могут использоваться при фильтрации данных в запросах.

// Пример фильтрации данных:
// Если вы попытаетесь выполнить запрос с использованием виртуального свойства, то получите ошибку, так как это свойство не существует в базе данных:
// await User.find({ fullName: 'John Doe' }); // Ошибка, так как 'fullName' - это виртуальное свойство.

// Итог:
// Виртуальные свойства в MongoDB через Mongoose — это удобный способ добавить вычисляемые поля к документам, которые не нужно сохранять в базе данных.
// Они позволяют организовать данные более гибко, добавляя вычисления на уровне приложения.
