// Глава 1: Введение в MongoDB - Среднее программное обеспечение для работы с документами и slugify

// MongoDB - это NoSQL база данных, которая работает с документами в формате JSON-подобных данных.
// Она предоставляет гибкость в управлении неструктурированными данными и часто используется в проектах с большим объемом данных.
// В этой главе мы рассмотрим концепцию "среднего программного обеспечения" (middleware) в Mongoose и покажем, как оно помогает при работе с документами в MongoDB.
// Также продемонстрируем использование библиотеки slugify для автоматической генерации slug на основе названий документов.

// 1. Что такое Middleware (Среднее программное обеспечение) в Mongoose?
// В Mongoose middleware - это функции, которые выполняются перед или после определенных действий с документами в базе данных.
// Они используются для предварительной обработки данных, валидации, логирования и других задач.

// 2. Пример использования pre и post middleware
// Для работы с middleware в Mongoose мы можем использовать два основных типа middleware: pre и post.
// pre middleware выполняется до сохранения или обновления документа, а post middleware выполняется после этих операций.

// В следующем примере рассмотрим middleware для схемы tourSchema:

const mongoose = require('mongoose');
const slugify = require('slugify');

// Создаем схему для коллекции "Туры"
const tourSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'A tour must have a name'],
  },
  duration: {
    type: Number,
    required: [true, 'A tour must have a duration'],
  },
  slug: String,
});

// 3. Добавление middleware для генерации slug

// Пример pre middleware для создания slug перед сохранением документа
tourSchema.pre('save', function (next) {
  // Используем slugify для преобразования имени в формат slug
  this.slug = slugify(this.name, { lower: true });
  next(); // Переход к следующей функции
});

// 4. Post middleware

// Пример post middleware для вывода сохраненного документа в консоль после сохранения
tourSchema.post('save', function (doc, next) {
  console.log(doc); // Выводим документ в консоль
  next(); // Переход к следующей функции
});

// 5. Дополнительное pre middleware для логирования

// Пример pre middleware для логирования перед сохранением документа
tourSchema.pre('save', function (next) {
  console.log('Will save document...'); // Выводим сообщение перед сохранением
  next(); // Переход к следующей функции
});

// 6. Виртуальные свойства

// В Mongoose можно создавать виртуальные свойства, которые вычисляются на основе других полей схемы.
// Пример создания виртуального свойства для расчета длительности тура в неделях
tourSchema.virtual('durationWeeks').get(function () {
  return this.duration / 7; // Преобразуем продолжительность в недели
});

// 7. Пример использования схемы и модели

// Создаем модель на основе схемы tourSchema
const Tour = mongoose.model('Tour', tourSchema);

// Пример создания и сохранения нового тура
const newTour = new Tour({
  name: 'The Forest Hiker',
  duration: 14, // Продолжительность в днях
});

// Сохраняем новый тур в базе данных
newTour.save().then((doc) => {
  console.log(doc);
});

// Итог:
// Mongoose middleware предоставляет мощный механизм для управления процессом обработки документов в MongoDB.
// С помощью pre и post middleware можно легко добавлять логику до и после операций сохранения или обновления.
// Виртуальные свойства позволяют создавать вычисляемые поля, а slugify используется для создания URL-дружественных идентификаторов на основе имен документов.
