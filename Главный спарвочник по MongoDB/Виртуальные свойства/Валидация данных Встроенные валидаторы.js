// Глава 1: Введение в MongoDB - Валидация данных
// Встроенные валидаторы в Mongoose

// Mongoose — это популярная библиотека для работы с MongoDB в Node.js, которая предоставляет средства для валидации данных.
// Встроенные валидаторы помогают гарантировать, что данные, которые сохраняются в базе данных, соответствуют определённым правилам.

// 1. Валидация данных с помощью схем Mongoose
// Схемы (Schemas) Mongoose позволяют определить структуру документа и включают встроенные валидаторы.
// При создании схемы можно указать типы данных и валидаторы для каждого поля.

// Пример создания схемы с валидаторами:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true, // Поле обязательно для заполнения
    minlength: 3, // Минимальная длина имени
    maxlength: 50, // Максимальная длина имени
  },
  email: {
    type: String,
    required: true, // Поле обязательно для заполнения
    unique: true, // Значение должно быть уникальным
    match: /.+@.+\..+/, // Регулярное выражение для проверки формата email
  },
  age: {
    type: Number,
    min: 18, // Минимальный возраст
    max: 65, // Максимальный возраст
  },
  createdAt: {
    type: Date,
    default: Date.now, // Значение по умолчанию
  }
});

// Модель пользователя:
const User = mongoose.model('User', userSchema);

// 2. Встроенные валидаторы в Mongoose

// - `required`: Поле обязательно для заполнения.
// - `minlength` и `maxlength`: Определяют минимальную и максимальную длину строки.
// - `min` и `max`: Определяют минимальное и максимальное значение для числовых полей.
// - `match`: Используется для проверки поля на соответствие регулярному выражению.
// - `unique`: Проверяет уникальность значения в базе данных. Важно помнить, что уникальность должна быть настроена также на уровне базы данных.

// Пример создания нового пользователя с проверкой валидации:
const newUser = new User({
  name: 'John',
  email: 'john.doe@example.com',
  age: 25,
});

newUser.save()
  .then(user => console.log('User saved:', user))
  .catch(err => console.error('Validation error:', err));

// 3. Пользовательские валидаторы
// Помимо встроенных валидаторов, можно создавать свои собственные функции для проверки данных.
// Пример создания пользовательского валидатора:
const productSchema = new mongoose.Schema({
  price: {
    type: Number,
    validate: {
      validator: function(value) {
        return value > 0; // Проверка, что цена больше 0
      },
      message: 'Цена должна быть больше 0', // Сообщение об ошибке
    },
  },
});

// Модель продукта:
const Product = mongoose.model('Product', productSchema);

// Пример создания продукта с пользовательским валидатором:
const newProduct = new Product({ price: -10 });
newProduct.save()
  .catch(err => console.error('Custom validation error:', err.message));

// Итог:
// Mongoose предоставляет встроенные валидаторы для проверки данных перед сохранением в MongoDB.
// Это помогает предотвратить некорректное или неполное заполнение данных.
// Помимо встроенных, можно создавать пользовательские валидаторы для сложных проверок.
