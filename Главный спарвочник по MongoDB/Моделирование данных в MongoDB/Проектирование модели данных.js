// Глава 1: Введение в MongoDB - Проектирование модели данных

// MongoDB — это документно-ориентированная база данных, которая позволяет хранить данные в формате BSON, похожем на JSON.
// Проектирование модели данных в MongoDB требует особого подхода, так как структура данных может быть гибкой и легко адаптируется под различные потребности.

// Основные концепции проектирования модели данных в MongoDB:

// 1. Документы и коллекции
// В MongoDB данные организуются в виде документов, которые хранятся в коллекциях. 
// Документ — это структура данных, представленная парой "ключ-значение". Коллекция же — это набор документов, похожих по структуре.
// Пример документа:
{
    "_id": ObjectId("507f191e810c19729de860ea"),
    "name": "John Doe",
    "email": "johndoe@example.com",
    "age": 29,
    "isActive": true
  }
  
  // 2. Встроенные документы и ссылки
  // Данные в MongoDB можно проектировать в виде вложенных документов (embedded) или ссылок (references).
  // - Встроенные документы используют для хранения информации в одном документе, что позволяет избежать дополнительных запросов.
  // - Ссылки используются для организации связей между документами, когда данные лучше разделить на несколько коллекций.
  // Пример вложенного документа:
  {
    "name": "John Doe",
    "contact": {
      "email": "johndoe@example.com",
      "phone": "123-456-7890"
    }
  }
  
  // Пример ссылки:
  {
    "name": "John Doe",
    "contactId": ObjectId("507f1f77bcf86cd799439011")
  }
  
  // 3. Денормализация и нормализация данных
  // В MongoDB часто применяется денормализация, то есть хранение данных в одном документе, чтобы уменьшить количество запросов.
  // Нормализация, в свою очередь, используется для минимизации избыточности данных и улучшения целостности информации.
  // Пример денормализации:
  {
    "title": "Post 1",
    "author": {
      "name": "Alice",
      "email": "alice@example.com"
    },
    "comments": [
      { "user": "Bob", "comment": "Nice post!" },
      { "user": "Charlie", "comment": "Interesting read!" }
    ]
  }
  
  // Пример нормализации:
  const post = {
    "title": "Post 1",
    "authorId": ObjectId("507f1f77bcf86cd799439011")
  };
  
  const user = {
    "_id": ObjectId("507f1f77bcf86cd799439011"),
    "name": "Alice",
    "email": "alice@example.com"
  };
  
  // 4. Индексы
  // Индексы в MongoDB позволяют ускорить поиск и фильтрацию данных по определенным полям.
  // Однако использование большого количества индексов может повлиять на производительность записи данных.
  // Пример создания индекса:
  db.users.createIndex({ email: 1 }); // Индекс по полю email для быстрого поиска по этому полю
  
  // 5. Моделирование связей (1:1, 1:N, N:N)
  // MongoDB поддерживает разные типы связей между документами, такие как:
  // - Один к одному (1:1) — для уникальных отношений между документами.
  // - Один ко многим (1:N) — например, пользователь и его заказы.
  // - Многие ко многим (N:N) — например, студенты и курсы, которые они проходят.
  // Пример связи 1:N:
  const user = {
    "_id": ObjectId("507f191e810c19729de860ea"),
    "name": "John Doe",
    "orders": [
      { "orderId": ObjectId("507f191e810c19729de860eb"), "total": 100 },
      { "orderId": ObjectId("507f191e810c19729de860ec"), "total": 150 }
    ]
  };
  
  // Пример связи N:N с использованием отдельной коллекции:
  const studentCourse = {
    "studentId": ObjectId("507f191e810c19729de860ea"),
    "courseId": ObjectId("507f191e810c19729de860eb")
  };
  
  // 6. Масштабируемость
  // MongoDB позволяет горизонтально масштабировать данные с помощью шардирования, разбивая данные на несколько узлов.
  // Это позволяет эффективно обрабатывать большие объемы данных и увеличивать производительность системы при высоких нагрузках.
  // Пример шардирования:
  // Включение шардирования в MongoDB:
  sh.enableSharding("myDatabase");
  sh.shardCollection("myDatabase.myCollection", { _id: "hashed" });
  
  // Итог:
  // Проектирование модели данных в MongoDB включает определение структуры документов, выбор между вложенными документами и ссылками, нормализацию и денормализацию данных, настройку индексов и масштабируемость. 
  // Понимание и правильное использование этих концепций поможет создать оптимизированную и гибкую базу данных, которая эффективно обслуживает запросы приложения.
  