// Глава 1: Введение в MongoDB (mongoose) - Наполнение обзоров

// В Mongoose схемы позволяют моделировать структуру данных в MongoDB, а также добавлять средовые настройки и методы для работы с ними.
// Когда мы работаем с обзорами (reviews), важно подгружать информацию о связанных документах, таких как данные о туре и пользователе, который оставил отзыв.
// В Mongoose это можно сделать с помощью middleware (посредников), что позволяет автоматизировать подгрузку данных при запросе на получение обзоров.

// Наполнение обзоров связанными данными с помощью middleware:

// Используя pre middleware с методом find(), мы можем автоматически подгружать данные о туре и пользователе при каждом запросе на получение обзоров.
// Ниже приведен пример, в котором `reviewSchema` настроено на автоматическое добавление данных о `tour` и `user` в каждый документ обзора перед выполнением запроса find().

const mongoose = require('mongoose');

const reviewSchema = new mongoose.Schema({
  review: {
    type: String,
    required: [true, 'Отзыв не может быть пустым'],
  },
  rating: {
    type: Number,
    required: [true, 'Рейтинг обязателен'],
    min: 1,
    max: 5,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  tour: {
    type: mongoose.Schema.ObjectId,
    ref: 'Tour',
    required: [true, 'Отзыв должен принадлежать к туру'],
  },
  user: {
    type: mongoose.Schema.ObjectId,
    ref: 'User',
    required: [true, 'Отзыв должен принадлежать к пользователю'],
  },
});

// Middleware для автоматического наполнения данных о туре и пользователе:
reviewSchema.pre(/^find/, function (next) {
  this.populate({
    path: 'tour',
    select: 'name', // Выбираем только поле 'name' из документа тура
  }).populate({
    path: 'user',
    select: 'name photo', // Выбираем только поля 'name' и 'photo' из документа пользователя
  });

  next();
});

// Как это работает:
// 1. При запросе на получение обзоров (например, Review.find()), Mongoose выполняет middleware, определенный с помощью pre на find методе.
// 2. В этом middleware мы вызываем `this.populate()` дважды, чтобы заполнить данные о туре (поле `tour`) и о пользователе (поле `user`).
//    - `path: 'tour'` означает, что мы подгружаем данные из связанного документа `Tour`.
//    - `select: 'name'` указывает, что мы берем только поле `name` из документа тура для оптимизации запроса.
//    - `path: 'user'` означает, что мы подгружаем данные из связанного документа `User`.
//    - `select: 'name photo'` указывает, что мы выбираем только поля `name` и `photo` из документа пользователя.
// 3. После выполнения populate() наш запрос обзоров возвращает каждый документ с подгруженными полями `tour` и `user`, предоставляя доступ к их именам и фотографии пользователя.

// Итог:
// Автоматическое наполнение данных позволяет удобно работать с обзорными документами, предоставляя необходимую информацию о туре и пользователе без необходимости запрашивать их вручную каждый раз.
// Это упрощает код и делает работу с данными более эффективной и удобной для пользователя.

module.exports = mongoose.model('Review', reviewSchema);
