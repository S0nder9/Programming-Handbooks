// Глава 1: Введение в MongoDB - Обновление данных текущего пользователя

// В этом разделе мы рассмотрим, как обновить данные текущего пользователя в MongoDB через API-роут, защищенный аутентификацией.
// Мы используем PATCH-запрос для частичного обновления данных пользователя, и контроллеры для защиты маршрута и фильтрации данных.

// 1. Настройка маршрута для обновления данных пользователя
// На роут "/updateMe" добавляется middleware для защиты (authController.protect) и обновления данных пользователя (userController.updateMe).
// Это позволяет ограничить доступ к маршруту только аутентифицированным пользователям.

userRouter.patch("/updateMe", authController.protect, userController.updateMe);

// 2. Фильтрация полей, которые можно обновить
// Функция filterObj используется для фильтрации данных, которые пользователь может обновить.
// Она принимает объект и список разрешённых полей (allowedFields), создавая новый объект только с указанными полями.

const filterObj = (obj, ...allowedFields) => {
    const newObj = {};

    Object.keys(obj).forEach((el, index) => {
        if (allowedFields.includes(el)) {
            newObj[el] = obj[el];
        }
    });
    return newObj;
};

// 3. Контроллер для обновления данных пользователя
// Контроллер updateMe выполняет следующие действия:
// - Проверяет, что пароль не изменяется через этот роут.
// - Фильтрует поля с помощью filterObj для безопасности и удобства.
// - Обновляет данные пользователя в базе данных MongoDB с помощью метода findByIdAndUpdate.

exports.updateMe = catchAsync(async (req, res, next) => {
    // 3.1 Проверка на изменение пароля
    if (req.body.password || req.body.passwordConfirm) {
        return next(
            new AppError(
                "This route is not for password updates. Please use /updateMyPassword",
                400
            )
        );
    }

    // 3.2 Фильтрация данных для обновления (только "name" и "email")
    const filteredBody = filterObj(req.body, "name", "email");

    // 3.3 Обновление пользователя в MongoDB
    const updatedUser = await User.findByIdAndUpdate(
        req.user.id,
        filteredBody,
        {
            new: true,             // Возвращает обновленные данные
            runValidators: true    // Включает валидацию схемы при обновлении
        }
    );

    // 3.4 Ответ с успешным статусом и обновленными данными пользователя
    res.status(200).json({
        status: "success",
        data: {
            user: updatedUser,
        },
    });
});

// Описание кода:

// - userRouter.patch("/updateMe", ...): Определяет PATCH-роут для обновления данных текущего пользователя.
// - filterObj(obj, ...allowedFields): Фильтрует поля, оставляя только те, которые можно обновлять.
// - catchAsync: Обрабатывает асинхронные функции и ловит ошибки.
// - Если в запросе есть поля для обновления пароля, контроллер возвращает ошибку с сообщением о необходимости использовать другой роут.
// - findByIdAndUpdate: Метод для поиска и обновления пользователя в базе данных по его ID, передавая новый объект для замены.

// Итог:
// Этот роут позволяет текущему пользователю частично обновить свои данные, такие как имя и email, без возможности изменения пароля.
// Обеспечивается фильтрация данных и защита от несанкционированных изменений, что делает приложение более безопасным.
