// Глава 1: Введение в MongoDB (mongoose) - Настройка HTTP-заголовков безопасности

// При разработке приложений, использующих MongoDB и Node.js, важно учитывать аспекты безопасности. 
// Одним из способов повысить безопасность приложения является настройка HTTP-заголовков безопасности с помощью middleware `helmet`.
// В этой главе мы рассмотрим, как настроить HTTP-заголовки безопасности с использованием `helmet` и как ограничить размер JSON-запросов в Express.

// Подключение и настройка Helmet для повышения безопасности HTTP-заголовков
// Helmet помогает защитить приложение от некоторых распространенных веб-уязвимостей, автоматически добавляя безопасные заголовки.

const express = require('express');
const helmet = require('helmet');
const app = express();

// Устанавливаем helmet для автоматического добавления множества защитных HTTP-заголовков
app.use(helmet());

// Пример добавленных заголовков:
// - Content-Security-Policy: Управляет тем, какие ресурсы можно загружать на страницу (например, стили, скрипты).
// - X-Frame-Options: Предотвращает отображение страницы в iFrame, защищая от атак типа Clickjacking.
// - X-Content-Type-Options: Указывает браузеру не изменять MIME-тип контента, предотвращая некоторые виды XSS-атак.
// - Strict-Transport-Security: Требует HTTPS-соединение для браузеров, чтобы предотвратить атаки типа "Man-in-the-middle".

// Ограничение размера JSON-запросов
// Ограничение размера данных JSON, которые может принять сервер, помогает предотвратить атаки, связанные с переполнением буфера или перегрузкой сервера.

// Устанавливаем максимальный размер JSON-запросов
app.use(
    express.json({
        limit: process.env.LIMIT_JSON_SIZE || "10kb", // Максимальный размер JSON-запроса - 10 килобайт
    })
);

// Это ограничение помогает предотвратить злоупотребления, такие как отправка больших объемов данных на сервер, что может привести к ухудшению производительности или отказу в обслуживании.

// Подключение к MongoDB с использованием mongoose
// Mongoose - это удобная библиотека для работы с MongoDB в Node.js. Она позволяет легко взаимодействовать с базой данных через объектно-ориентированные запросы.

const mongoose = require('mongoose');

mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Successfully connected to MongoDB'))
.catch(err => console.error('Error connecting to MongoDB:', err));

// Итог:
// Настройка HTTP-заголовков безопасности и ограничение размера JSON-запросов с использованием helmet и express.json
// помогают создать более безопасное приложение.
// Эти меры являются первым шагом для защиты от распространенных веб-уязвимостей.
// Также, подключив Mongoose, мы подготовили наше приложение к работе с MongoDB, что позволит организовать хранение и обработку данных.
