// Глава 1: Введение в MongoDB (mongoose) - Агрегирование геопространства
// Вычисление расстояний

// В этой главе мы рассмотрим, как использовать геопространственные агрегирования в MongoDB с помощью Mongoose.
// Конкретно мы обсудим вычисление расстояний между заданной точкой и объектами в базе данных.
// Мы также посмотрим, как организовать API-метод для этой цели и создать роут для обработки запросов.

// Описание метода вычисления расстояний:
// В этом методе мы принимаем координаты (широта и долгота) и единицу измерения (мили или километры).
// Используем MongoDB агрегирование `$geoNear` для определения расстояний от заданной точки до объектов в коллекции.
// Затем форматируем ответ, чтобы включить только необходимые данные.

// Основной метод для вычисления расстояний:

exports.getDistances = catchAsync(async (req, res, next) => {
    const { latlng, unit } = req.params; // Получаем параметры запроса
    const [lat, lng] = latlng.split(","); // Разделяем координаты широты и долготы

    // Проверка наличия корректных значений широты и долготы
    if (!lat || !lng) {
        return next(
            new AppError(
                "Please provide latitude and longitude in the format lat,lng",
                404
            )
        );
    }

    // Устанавливаем множитель в зависимости от единицы измерения
    const multiplier = unit === "mi" ? 0.000621371 : 0.001;

    // Используем MongoDB метод агрегирования $geoNear для вычисления расстояний
    const distances = await Tour.aggregate([
        {
            $geoNear: {
                near: {
                    type: "Point",
                    coordinates: [parseFloat(lng), parseFloat(lat)],
                },
                distanceField: "distance",
                distanceMultiplier: multiplier,
            },
        },
        {
            $project: {
                distance: 1,
                name: 1, // Проецируем только нужные поля для ответа
            },
        },
    ]);

    // Отправляем результат клиенту
    res.status(200).json({
        status: "success",
        data: {
            data: distances,
        },
    });
});

// Разбор ключевых частей метода:
// 1. `$geoNear`: Этот этап должен быть первым в массиве агрегирования, так как он требует указания геопространственных данных.
//    Мы указываем начальную точку через `near` и используем `distanceMultiplier` для преобразования расстояния в нужную единицу.
// 2. `$project`: Позволяет выбрать только необходимые поля в ответе, в данном случае `distance` и `name`.

// Маршрутизация:
// Мы создаем маршрут, который будет принимать координаты и единицу измерения в URL, например:
// `/distances/34.111745,-118.113491/unit/mi`

router
    .route("/distances/:latlng/unit/:unit") // Определение маршрута с параметрами latlng и unit
    .get(tourController.getDistances); // Привязка маршрута к контроллеру getDistances

// Итог:
// Мы создали метод для вычисления расстояний на основе геопространственных данных, используя Mongoose и MongoDB.
// Этот метод позволяет передавать координаты и единицу измерения (мили или километры) и возвращает расстояния до объектов из базы данных.
// Это полезно для приложений, где требуется учитывать геолокацию, например, для поиска ближайших достопримечательностей, магазинов и т.д.
