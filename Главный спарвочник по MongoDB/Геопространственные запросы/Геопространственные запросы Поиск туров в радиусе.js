// Глава 1: Введение в MongoDB (mongoose)
// Геопространственные запросы — Поиск туров в радиусе

// Введение:
// MongoDB позволяет выполнять геопространственные запросы, что особенно полезно для приложений, требующих поиска объектов в пределах определённого радиуса.
// В данном примере мы создаем API для поиска туров в пределах заданного расстояния от конкретной географической точки, используя Mongoose и геопространственные запросы MongoDB.

// 1. Определение маршрута и контроллера для поиска туров в радиусе

// Контроллер getToursWithin:
// Эта функция обрабатывает запросы на поиск туров в пределах заданного радиуса от определенной точки.
// Она принимает три параметра: расстояние, координаты точки (широта и долгота) и единицы измерения (мили или километры).

// Код функции:
exports.getToursWithin = catchAsync(async (req, res, next) => {
    const { distance, latlng, unit } = req.params; // Получаем параметры запроса
    const [lat, lng] = latlng.split(","); // Разбиваем координаты на широту и долготу

    // Вычисляем радиус в радианах
    const radius = unit === "mi" ? distance / 3963.2 : distance / 6378.1;

    // Проверка на корректность координат
    if (!lat || !lng) {
        return next(
            new AppError(
                "Please provide latitude and longitude in the format lat,lng",
                404
            )
        );
    }

    // Выполняем геопространственный запрос на основе центра и радиуса
    const tours = await Tour.find({
        startLocation: { $geoWithin: { $centerSphere: [[lng, lat], radius] } },
    });

    // Отправляем ответ клиенту с результатами поиска
    res.status(200).json({
        status: "success",
        results: tours.length,
        data: {
            data: tours,
        },
    });
});

// 2. Настройка маршрута
// Мы создаем маршрут для поиска туров в радиусе определенного расстояния от заданных координат.
router
    .route("/tour-within/:distance/center/:latlng/unit/:unit")
    .get(tourController.getToursWithin);

// 3. Индексирование для геопространственных запросов
// Чтобы MongoDB могла эффективно выполнять геопространственные запросы, мы добавляем индекс для поля startLocation в схеме тура.
// Индекс "2dsphere" позволяет выполнять запросы, используя сферическую геометрию, подходящую для координат на поверхности Земли.
tourSchema.index({
    startLocation: "2dsphere",
});

// 4. Определение поля startLocation в схеме Tour
// Мы создаем объект startLocation в схеме для хранения начального места расположения тура. Это поле содержит тип координат, их значения, адрес и описание.
startLocation = {
    type: {
        type: String,
        default: "Point",
        enum: ["Point"], // Ограничиваем тип на "Point", что требуется для геопространственного индекса 2dsphere
    },
    coordinates: [Number], // Массив с координатами [долгота, широта]
    address: String, // Адрес начальной точки
    description: String, // Описание начальной точки
},

// Определение дополнительного поля locations
// Поле locations позволяет хранить дополнительные точки маршрута (если необходимо) с аналогичной структурой, что и startLocation.
locations = [
    {
        type: {
            type: String,
            default: "Point",
            enum: ["Point"],
        },
        coordinates: [Number],
        address: String,
        description: String,
        day: Number, // Номер дня для данной точки маршрута
    },
];

// Итог:
// Этот код позволяет эффективно искать туры в пределах заданного радиуса от определенной точки.
// Использование индекса 2dsphere и геопространственных запросов в MongoDB позволяет быстро и точно находить объекты по географическим координатам.
