// Глава 1: Введение в MongoDB - Отладка Node.js с помощью ndb

// ndb - это мощный инструмент для отладки приложений Node.js, который предоставляет более удобный интерфейс и функциональность по сравнению со встроенным инструментом отладки Node.js.
// Он особенно полезен при работе с базами данных, такими как MongoDB, позволяя отслеживать запросы, перехватывать ошибки и анализировать поведение кода в реальном времени.

// Установка ndb:
// Чтобы установить ndb глобально, используйте следующую команду:
npm install -g ndb

// Запуск приложения с ndb:
// Вместо стандартного `node` используйте команду `ndb` для запуска вашего приложения:
// Например, если ваше приложение называется `app.js`:
ndb app.js

// Преимущества использования ndb:

// 1. Возможность ставить точки останова (breakpoints):
// В ndb вы можете легко устанавливать точки останова прямо в интерфейсе, что упрощает отладку.
// Например, установим точку останова перед выполнением запроса к MongoDB:
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    debugger; // Эта точка останова позволит вам остановиться здесь и исследовать состояние программы
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error);
  });

// 2. Просмотр и изменение значений переменных:
// ndb позволяет вам не только просматривать значения переменных в любой момент времени, но и изменять их.
// Это полезно, когда вы хотите проверить, как приложение поведет себя при изменении данных в процессе выполнения.

// 3. Перехват ошибок и отслеживание стеков вызова:
// При возникновении ошибок ndb автоматически подсветит проблемный участок кода и покажет полный стек вызова, что упрощает поиск и устранение ошибок.
// Например, если произойдет ошибка подключения к базе данных, вы сразу увидите источник проблемы в интерфейсе ndb.

// 4. Возможность шагать по коду (Step Over, Step Into, Step Out):
// В ndb можно пошагово проходить код, исследуя, как выполняются различные части приложения, что упрощает понимание логики и выявление ошибок.

// Пример использования ndb при работе с MongoDB:
// Рассмотрим пример подключения к MongoDB и добавления нового документа в коллекцию с использованием ndb:

const mongoose = require('mongoose');

async function run() {
  await mongoose.connect('mongodb://localhost:27017/testdb', { useNewUrlParser: true, useUnifiedTopology: true });

  const userSchema = new mongoose.Schema({ name: String, age: Number });
  const User = mongoose.model('User', userSchema);

  const user = new User({ name: 'John Doe', age: 30 });
  
  debugger; // Точка останова перед сохранением документа в базу данных

  try {
    await user.save();
    console.log('User saved:', user);
  } catch (error) {
    console.error('Error saving user:', error);
  }
}

ndb run();

// В этом примере вы сможете остановиться в момент перед сохранением документа и проверить состояние объекта `user`, а также увидеть, что происходит, если возникнет ошибка.

// Итог:
// ndb является удобным и мощным инструментом для отладки Node.js приложений, особенно при работе с MongoDB.
// Он предоставляет расширенные возможности для анализа и изменения кода в реальном времени, что значительно упрощает процесс разработки и выявления ошибок.
// Используйте ndb для улучшения продуктивности и повышения качества вашего кода.
