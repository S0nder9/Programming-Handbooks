// Глава 1: Введение в MongoDB - Обработка необработанных маршрутов

// При работе с MongoDB и построении RESTful API с использованием Node.js и Express важно обрабатывать необработанные маршруты, чтобы приложение оставалось стабильным и безопасным.
// Необработанные маршруты - это запросы, которые не соответствуют ни одному из определенных маршрутов API.

// 1. Зачем нужна обработка необработанных маршрутов:
// Когда пользователь обращается к несуществующему маршруту, важно возвращать информативный ответ, чтобы предотвратить некорректное поведение приложения и обеспечить лучший пользовательский опыт.
// Это помогает разработчикам избежать ошибок, которые могут возникнуть при взаимодействии с клиентом или фронтендом.

// 2. Создание обработчика необработанных маршрутов:
// Express.js позволяет легко добавить обработчик необработанных маршрутов в конце всех маршрутов приложения.
// Пример создания обработчика необработанных маршрутов:
const express = require("express");
const app = express();

// Определенные маршруты
app.get("/api/data", (req, res) => {
    res.json({ message: "Data from MongoDB" });
});

// Обработка необработанных маршрутов
app.all("*", (req, res) => {
    res.status(404).json({ error: "Route not found" });
});

// Сервер прослушивает запросы на порту 3000
app.listen(3000, () => {
    console.log("Server is running on http://localhost:3000");
});

// 3. Зачем возвращать статус-код 404:
// При обработке необработанных маршрутов важно вернуть правильный статус-код, например, 404 (Not Found), чтобы клиент мог распознать, что запрашиваемый ресурс не существует.
// Это также полезно для автоматических систем мониторинга и дебаггинга, чтобы понимать, где возникают проблемы.

// 4. Логирование необработанных маршрутов:
// Логирование необработанных маршрутов может помочь в отладке и мониторинге запросов, которые не соответствуют ни одному из маршрутов API.
// Пример логирования необработанных маршрутов:
app.all("*", (req, res) => {
    console.error(`Unmatched route: ${req.originalUrl}`);
    res.status(404).json({ error: "Route not found" });
});

// 5. Обработка всех типов запросов:
// Обработчик необработанных маршрутов должен поддерживать все типы запросов, такие как GET, POST, PUT, DELETE и т.д., чтобы охватить все возможные варианты необработанных маршрутов.
// Express автоматически захватывает все типы запросов, если используется middleware без метода, как показано выше.

// 6. Централизованная обработка ошибок:
// Обработка необработанных маршрутов является частью более широкой системы централизованной обработки ошибок.
// Создание middleware для централизованного управления ошибками помогает обрабатывать и логировать ошибки в одном месте.
// Пример централизованного обработчика ошибок:
app.use((err, req, res, next) => {
    console.error("Error:", err.message);
    res.status(500).json({ error: "Internal server error" });
});

// Итог:
// Обработка необработанных маршрутов является важной частью создания API с использованием Express и MongoDB.
// Это помогает улучшить пользовательский опыт, логировать потенциальные ошибки и сделать приложение более стабильным.
// Всегда возвращайте статус-код 404 для необработанных маршрутов и реализуйте централизованную обработку ошибок для лучшей отладки и мониторинга.
