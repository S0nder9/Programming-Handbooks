// Глава 1: Введение в MongoDB - Импорт данных в разработке

// MongoDB — это документо-ориентированная база данных NoSQL, которая позволяет гибко хранить и управлять данными в формате BSON (расширение JSON).
// Импорт данных — важный этап разработки, который позволяет наполнять вашу базу данных значениями из внешних источников, таких как CSV, JSON или базы данных других форматов.
// В этой главе рассмотрим основные способы импорта данных в MongoDB и их использование в процессе разработки.

// 1. Использование команды `mongoimport`
// `mongoimport` — это встроенный инструмент для импорта данных в MongoDB из файлов форматов JSON, CSV и TSV.
// Он позволяет легко загрузить данные из этих форматов в коллекции базы данных MongoDB.

// Пример импорта данных из JSON файла в коллекцию:
//
// Команда для импорта JSON файла в коллекцию `users` базы данных `mydb`:
const mongoImportCommand = `mongoimport --db mydb --collection users --file /path/to/users.json --jsonArray`;
// Пояснение:
// --db: указывает базу данных для импорта данных (mydb),
// --collection: указывает коллекцию, в которую будут импортированы данные (users),
// --file: указывает путь к файлу, который будет импортирован,
// --jsonArray: используется, если файл содержит массив объектов JSON.

// 2. Импорт данных из CSV-файлов
// Если данные хранятся в формате CSV, их также можно импортировать с помощью команды `mongoimport`.
// MongoDB автоматически распознает строки заголовков CSV-файлов как имена полей документов.

// Пример импорта данных из CSV файла:
const mongoImportCSV = `mongoimport --db mydb --collection products --type csv --headerline --file /path/to/products.csv`;
// Пояснение:
// --type csv: указывает, что формат файла — CSV,
// --headerline: указывает, что первая строка CSV-файла содержит имена полей.


// 3. Импорт данных с помощью MongoDB Compass
// MongoDB Compass — это графический интерфейс, который предоставляет удобный способ управления базами данных и импортирования данных без использования командной строки.
// Чтобы импортировать данные с помощью Compass:
// - Откройте MongoDB Compass и подключитесь к вашему кластеру.
// - Выберите базу данных и коллекцию, в которую хотите импортировать данные.
// - Нажмите кнопку "Импортировать данные" и выберите формат (JSON или CSV).
// - Загрузите файл, настройте параметры импорта (например, распознавание заголовков) и завершите импорт.

// 4. Импорт данных программным путем через Node.js
// Если вы разрабатываете приложение на Node.js и вам нужно программно импортировать данные, вы можете использовать драйвер MongoDB для Node.js.
// Он позволяет вставлять данные в базу MongoDB прямо из вашего кода.

// Пример импорта данных в MongoDB через Node.js:
const { MongoClient } = require('mongodb');
const fs = require('fs');

// URL подключения к базе данных
const url = 'mongodb://localhost:27017';
const client = new MongoClient(url);

// Имя базы данных
const dbName = 'mydb';

// Функция для импорта данных
async function importData() {
  try {
    await client.connect();
    console.log('Connected successfully to MongoDB');
    const db = client.db(dbName);
    const collection = db.collection('users');

    // Чтение данных из JSON файла
    const data = JSON.parse(fs.readFileSync('/path/to/users.json', 'utf8'));

    // Вставка данных в коллекцию
    const result = await collection.insertMany(data);
    console.log(`${result.insertedCount} documents were inserted`);
  } catch (err) {
    console.error('Error importing data:', err);
  } finally {
    await client.close();
  }
}

importData();

// 5. Проверка данных после импорта
// После успешного импорта данных важно убедиться, что они правильно загружены и доступны в базе данных.
// Вы можете использовать MongoDB Compass для просмотра коллекций и документов или выполнить запросы через командную строку MongoDB.

// Пример выполнения простого запроса для проверки данных:
const mongoQuery = `db.users.find().limit(5).pretty()`;
// Эта команда выведет первые пять документов из коллекции `users` в читаемом формате.

// Итог:
// Импорт данных в MongoDB является ключевым этапом разработки, позволяющим наполнить базу данных тестовыми или реальными данными.
// Вы можете использовать команду `mongoimport`, MongoDB Compass, или программировать импорт данных через драйвер MongoDB для Node.js.
// Это даёт гибкость и множество способов интеграции данных в процесс разработки вашего приложения.
