// Глава 1: Введение в MongoDB - Улучшение пагинации в API

// Пагинация — это важная часть любого API, особенно когда вы работаете с большими объемами данных.
// Она помогает разбивать результаты на страницы, что облегчает работу с данными как для клиента, так и для сервера.

// Пример улучшенной пагинации в API на основе MongoDB.

// Пример кода для реализации пагинации:

const getAllTours = async (req, res) => {
    try {
      // Извлечение параметров пагинации из запроса
      const page = req.query.page * 1 || 1; // Установка текущей страницы, по умолчанию 1
      const limit = req.query.limit * 1 || 100; // Количество документов на одной странице, по умолчанию 100
      const skip = (page - 1) * limit; // Вычисление количества документов, которые нужно пропустить
  
      // Выполнение запроса с учетом пропуска и лимита
      let query = Tour.find();
      query = query.skip(skip).limit(limit);
  
      // Проверка, существует ли запрашиваемая страница
      if (req.query.page) {
        const numTours = await Tour.countDocuments(); // Подсчет общего числа документов
        if (skip >= numTours) {
          throw new Error("This page does not exist!"); // Ошибка, если запрашиваемая страница выходит за пределы данных
        }
      }
  
      // Получение данных из базы данных
      const tours = await query;
  
      // Отправка результата на клиент
      res.status(200).json({
        status: 'success',
        results: tours.length,
        data: {
          tours
        }
      });
    } catch (error) {
      res.status(400).json({
        status: 'fail',
        message: error.message
      });
    }
  };
  
  // Разбор кода:
  
  // 1. Параметры пагинации: `page` и `limit` получаются из строки запроса.
  //  - `page`: определяет текущую страницу. Если не указано, по умолчанию используется страница 1.
  //  - `limit`: определяет количество документов на одной странице. По умолчанию установлено на 100.
  // 2. Значение `skip`: используется для того, чтобы пропустить нужное количество документов до текущей страницы.
  //  - `skip = (page - 1) * limit`: это выражение вычисляет, сколько документов нужно пропустить в базе данных для перехода на нужную страницу.
  // 3. Проверка существования страницы:
  //  - Мы проверяем, если запрашиваемая страница (`req.query.page`) указана.
  //  - Затем мы подсчитываем общее количество документов в коллекции (`Tour.countDocuments()`).
  //  - Если количество пропущенных документов превышает общее число документов, выбрасываем ошибку: "This page does not exist!".
  // 4. Лимитирование результата:
  //  - Запрос с применением `.skip(skip).limit(limit)` ограничивает выборку только нужными документами для текущей страницы.
  // 5. Обработка ошибок:
  //  - Если что-то пошло не так, например, страница не существует, ошибка будет поймана и отправлена обратно на клиент с сообщением об ошибке.
  
  // Пример запроса:
  // Если фронтенд запрашивает `/api/v1/tours?page=2&limit=10`, сервер вернет 10 туров, начиная с 11-го.
  
  // Итог:
  // Эта реализация пагинации улучшает производительность API при работе с большими объемами данных, позволяет обрабатывать запросы с фильтрацией и ограничивает количество возвращаемых документов.
  // Пагинация — важная практика для обеспечения масштабируемости API и улучшения пользовательского опыта.
  