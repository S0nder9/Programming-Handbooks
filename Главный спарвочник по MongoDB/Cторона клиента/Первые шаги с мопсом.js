// Глава 2: Создание клиентской части - Первые шаги с Pug, весь синтаксис Pug

// Pug (ранее Jade) - это шаблонизатор, который используется для создания HTML на сервере. 
// Он упрощает создание HTML, используя более чистый и минималистичный синтаксис. В этом разделе мы рассмотрим основные возможности Pug.

// Установка Pug в проекте Node.js
// Установите Pug через npm и настройте его как шаблонизатор для Express.
const express = require('express');
const app = express();
app.set('view engine', 'pug');
app.set('views', './views');

// Пример рендера Pug-шаблона:
app.get("/", (req, res, next) => {
    res.status(200).render("base", {
        tour: "The Forest Hiker",
        user: "Jonas",
    });
});

// Основной синтаксис Pug:

// 1. Заголовок документа и doctype
// Pug автоматически добавляет `<!DOCTYPE html>` в начале страницы. 
// Чтобы указать doctype, используйте `doctype` в начале файла Pug.
doctype html

// 2. Элементы и вложенность
// Для создания HTML-элементов просто укажите их названия. Вложенность элементов определяется отступами.
html
  head
    title My Pug Template
  body
    h1 Hello, Pug!

// 3. Атрибуты
// Атрибуты элементов указываются в круглых скобках после названия элемента.
button(type="button" disabled) Click Me!

// 4. Динамические данные
// Вы можете передавать переменные из Express в шаблон Pug.
h1= user // отобразит значение переменной `user`
p Welcome to the tour: #{tour}

// 5. Классы и идентификаторы
// Классы и идентификаторы можно указывать прямо в названии элемента.
div.container
h1#header Welcome to the Site

// 6. Повторение с использованием `each`
// Pug позволяет итерироваться по массивам с помощью `each`.
ul
  each item in ['Item 1', 'Item 2', 'Item 3']
    li= item

// 7. Условные конструкции
// Используйте `if` и `else` для условий.
if user
  p Hello, #{user}!
else
  p Welcome, guest!

// 8. Миксины
// Миксины позволяют переиспользовать код. Создайте миксин с помощью `mixin`, а затем вызовите его.
mixin list(items)
  ul
    each item in items
      li= item

+list(['Apple', 'Banana', 'Orange'])

// 9. Включение других файлов
// Используйте `include` для вставки другого Pug-файла.
include header.pug

// 10. Комментарии
// Однострочные и многострочные комментарии поддерживаются в Pug.
// Комментарий, который появится в HTML
//- Этот комментарий не появится в HTML

// Пример полного шаблона:
doctype html
html
  head
    title= title
  body
    h1 Welcome to #{tour}
    p Hello, #{user}
    each feature in features
      li= feature

// Итог:
// Pug упрощает создание HTML, используя минималистичный синтаксис.
// Он поддерживает динамические данные, условия, циклы, миксины и возможность включения других шаблонов.
// Настроив Pug в Express, вы сможете генерировать HTML с использованием удобного синтаксиса.
