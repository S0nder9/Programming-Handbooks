// Глава 2: Создание клиентской части - Обзор рендеринга на стороне сервера и на стороне клиента

// При создании веб-приложений важно понимать разницу между рендерингом на стороне сервера (Server-Side Rendering - SSR) 
// и рендерингом на стороне клиента (Client-Side Rendering - CSR), а также выбрать подходящий метод для конкретного приложения.

// 1. Рендеринг на стороне сервера (SSR)

// SSR предполагает, что HTML-страница генерируется на сервере и отправляется пользователю уже с готовым контентом.
// Сервер обрабатывает запрос, генерирует страницу и отправляет её в браузер, который затем отображает её пользователю.

// Преимущества SSR:
// - Более быстрая загрузка контента для пользователя, особенно на медленных сетях, так как пользователь сразу видит полный контент.
// - SEO-оптимизация: поисковые системы могут проще индексировать страницы, так как контент загружается с самого начала.
// - Лучшая производительность на слабых устройствах, поскольку рендеринг происходит на сервере.

// Недостатки SSR:
// - Увеличенная нагрузка на сервер, так как каждое обращение требует генерации HTML.
// - Увеличенное время ожидания для пользователей, если сервер обрабатывает много запросов одновременно.

// Пример SSR с использованием фреймворка Next.js:
import React from 'react';

const Page = ({ data }) => (
  <div>
    <h1>Data from Server</h1>
    <p>{data}</p>
  </div>
);

export async function getServerSideProps() {
  const res = await fetch('https://api.example.com/data');
  const data = await res.json();

  return { props: { data } };
}

export default Page;

// В этом примере данные загружаются на сервере, а затем передаются на страницу для рендеринга.

// 2. Рендеринг на стороне клиента (CSR)

// CSR предполагает, что сервер отправляет только "пустой" HTML и JavaScript-файлы, которые затем выполняются на клиентской стороне.
// Браузер загружает HTML и JS, выполняет JS, чтобы сгенерировать и отобразить контент страницы.

// Преимущества CSR:
// - Быстрое и интерактивное обновление данных без необходимости перезагрузки страницы.
// - Более легкая нагрузка на сервер, так как он передает только статические файлы.
// - Гибкость и динамичность для пользователя, так как контент обновляется по мере взаимодействия.

// Недостатки CSR:
// - Медленное время загрузки при первом посещении, так как пользователь ждет загрузки JS и выполнения кода.
// - Зависимость от JavaScript: если у пользователя отключен JavaScript, контент не отобразится.
// - Меньшая SEO-оптимизация, так как контент не загружается сразу на страницу.

// Пример CSR с использованием React:
import React, { useEffect, useState } from 'react';

const Page = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => setData(data));
  }, []);

  return (
    <div>
      <h1>Data from Client</h1>
      <p>{data}</p>
    </div>
  );
};

export default Page;

// В этом примере данные загружаются на клиентской стороне с помощью useEffect.

// 3. Гибридный рендеринг (SSG + CSR)

// Некоторые фреймворки, такие как Next.js, позволяют объединять преимущества SSR и CSR, используя статическую генерацию (SSG).
// Статические страницы создаются при сборке (например, статьи блога), а динамический контент загружается уже на клиентской стороне.
// Это позволяет сократить время загрузки и улучшить производительность.

// Пример гибридного рендеринга в Next.js:
import React from 'react';

const Page = ({ initialData }) => {
  const [data, setData] = React.useState(initialData);

  React.useEffect(() => {
    // Загружаем дополнительный динамический контент на клиенте
    fetch('/api/additionalData')
      .then(response => response.json())
      .then(extraData => setData(prevData => ({ ...prevData, extraData })));
  }, []);

  return (
    <div>
      <h1>Data from Static Generation + Client</h1>
      <p>{data.initialData}</p>
      <p>{data.extraData}</p>
    </div>
  );
};

export async function getStaticProps() {
  const res = await fetch('https://api.example.com/initialData');
  const initialData = await res.json();

  return { props: { initialData } };
}

export default Page;

// Итог:
// SSR и CSR представляют собой два подхода к рендерингу, которые имеют свои преимущества и недостатки.
// Выбор подхода зависит от потребностей приложения: для контента, критичного для SEO и скорости, подходит SSR,
// а для интерактивных и динамических приложений - CSR. Гибридные подходы, такие как SSG с дополнительным CSR, 
// могут помочь объединить лучшие черты обоих подходов.
