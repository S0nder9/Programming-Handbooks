// Глава 1: Введение в MongoDB (mongoose) - Добавление конечной точки /me

// В данной главе мы рассмотрим, как создать конечную точку /me для получения информации о текущем пользователе,
// используя MongoDB и mongoose. Конечная точка /me будет защищена, и к ней смогут обращаться только авторизованные пользователи.
// Для этого мы будем использовать middleware для защиты маршрута и получения данных пользователя на основе токена.

// Структура конечной точки /me:
// Мы добавим маршрут /me, который использует middleware для защиты маршрута и извлечения информации о текущем пользователе.

// Пример настройки маршрута /me:
userRouter.get(
    "/me",
    authController.protect,      // Middleware для защиты маршрута (только для авторизованных пользователей)
    userController.getMe,         // Middleware для настройки параметров запроса (извлекаем ID пользователя)
    userController.getUser        // Контроллер для получения информации о пользователе
);

// Реализация middleware getMe:
// Функция getMe добавляет ID текущего пользователя (полученного из токена) в параметры запроса, чтобы дальнейшие функции могли его использовать.
exports.getMe = (req, res, next) => {
    req.params.id = req.user.id; // Установка req.params.id на ID текущего пользователя
    next();
};

// Контроллер для получения одного пользователя
// Функция getOne используется для получения данных одного документа на основе его ID.
// Она выполняет асинхронный поиск в базе данных и отправляет результат клиенту.
exports.getOne = (Model, popOptions) =>
    catchAsync(async (req, res, next) => {
        let query = Model.findById(req.params.id); // Поиск документа по ID

        // Если указаны опции для популяции данных, они применяются к запросу
        if (popOptions) query = query.populate(popOptions);

        // Выполнение запроса и получение документа
        const doc = await query;

        // Если документ не найден, возвращаем ошибку
        if (!doc) {
            return next(new AppError("No document found with that ID!", 404));
        }

        // Возвращаем успешный ответ с найденными данными
        res.status(200).json({
            status: "success",
            data: {
                data: doc,
            },
        });
    });

// Пояснение:
// - authController.protect: Middleware для проверки аутентификации, защищающий маршрут от неавторизованных пользователей.
// - userController.getMe: Middleware, который извлекает ID текущего пользователя из токена и добавляет его в параметры запроса.
// - userController.getUser: Контроллер, который использует функцию getOne для получения и отправки данных пользователя клиенту.

// Итог:
// Конечная точка /me позволяет пользователю получить информацию о себе, если он авторизован.
// Это удобный способ для клиентов запросить данные о текущем пользователе, например, для отображения профиля.
