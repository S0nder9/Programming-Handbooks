// Глава 1: Введение в MongoDB - Введение в внутреннюю архитектуру MVC, типы логики и многое другое

// MongoDB - это документно-ориентированная NoSQL база данных, которая хранит данные в формате JSON-подобных документов.
// В этой главе мы рассмотрим базовую архитектуру MVC (Model-View-Controller) и типы логики, которые используются при работе с MongoDB и веб-приложениями.

// Что такое MVC?

// MVC (Model-View-Controller) - это паттерн проектирования, который разделяет логику приложения на три компонента:
// 1. Model (Модель): Отвечает за управление данными и взаимодействие с базой данных (в нашем случае, MongoDB).
// 2. View (Представление): Отвечает за отображение данных и пользовательский интерфейс.
// 3. Controller (Контроллер): Обрабатывает входные данные от пользователя, вызывает соответствующие методы модели и передает данные представлению.

// 1. Model (Модель)
// В контексте MongoDB, модель представляет собой структуру данных, которая определяет, как информация сохраняется и извлекается из базы данных.
// Обычно, для работы с MongoDB в Node.js используется библиотека Mongoose, которая позволяет определять схемы и модели для работы с данными.
// Пример модели с использованием Mongoose:

const mongoose = require('mongoose');

// Определение схемы для коллекции 'User'
const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String
});

// Создание модели User на основе схемы
const User = mongoose.model('User', userSchema);

// Model (Модель) взаимодействует с базой данных MongoDB, выполняя запросы, такие как создание, чтение, обновление и удаление данных (CRUD операции).
// Пример создания нового пользователя и его сохранения в базе данных:

const newUser = new User({
  name: 'John Doe',
  email: 'john@example.com',
  password: 'securepassword'
});

newUser.save()
  .then(() => console.log('User created successfully'))
  .catch(err => console.error('Error creating user:', err));

// 2. View (Представление)
// Представление отвечает за отображение данных пользователю. Оно не содержит бизнес-логики и не работает напрямую с данными.
// В веб-приложениях на основе Node.js и MongoDB представление обычно создается с использованием HTML, CSS и JavaScript.
// На стороне сервера можно использовать такие движки шаблонов, как EJS, Pug или Handlebars, чтобы динамически отображать данные из модели.
// Пример использования EJS для отображения данных пользователя:

// В файле контроллера:
// Передаем данные пользователя в представление
app.get('/users/:id', (req, res) => {
  User.findById(req.params.id)
    .then(user => res.render('userProfile', { user }))
    .catch(err => res.status(500).send('Error fetching user data'));
});

// В файле EJS шаблона (userProfile.ejs):
// Отображаем информацию о пользователе


// <h1>Профиль пользователя</h1>
// <p>Имя: <%= user.name %></p>
// <p>Email: <%= user.email %></p>

// 3. Controller (Контроллер)
// Контроллер обрабатывает запросы от клиента (например, HTTP-запросы) и передает данные модели или представлению.
// В Node.js контроллеры часто реализуются с использованием Express.js для маршрутизации запросов и обработки логики.
// Пример контроллера, который обрабатывает создание нового пользователя:

app.post('/users', (req, res) => {
  const newUser = new User({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password
  });

  newUser.save()
    .then(() => res.redirect('/users'))
    .catch(err => res.status(500).send('Error saving user'));
});

// Типы логики в MVC:

// 1. Логика модели (Model Logic):
// Сосредоточена на работе с базой данных: запросы, обновления, удаление данных.
// В примере выше логика модели заключается в создании новой записи в MongoDB через модель User.

// 2. Логика контроллера (Controller Logic):
// Управляет потоком данных между моделью и представлением, обрабатывает запросы пользователя.
// Например, при создании пользователя контроллер получает данные из запроса, передает их в модель, а затем отправляет ответ клиенту.

// 3. Логика представления (View Logic):
// Ответственна за рендеринг и отображение данных пользователю.
// Например, HTML-шаблон может отображать данные из модели, но не содержит сложных вычислений или бизнес-логики.

// MongoDB в контексте MVC:

// MongoDB часто используется как часть модели (Model) в паттерне MVC.
// Она предоставляет гибкую схему данных и возможность легко масштабировать приложения благодаря горизонтальному шардированию и репликации.
// Основное преимущество MongoDB заключается в ее способности работать с неструктурированными данными и хранить данные в формате JSON-подобных документов.

// Пример интеграции MongoDB в MVC-приложение на Node.js:

// 1. Установите Mongoose для взаимодействия с MongoDB:
// npm install mongoose

// 2. Подключитесь к MongoDB в Node.js приложении:
mongoose.connect('mongodb://localhost/myDatabase', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected successfully'))
  .catch(err => console.error('Error connecting to MongoDB:', err));

// 3. Создайте модель и выполните CRUD операции, как было показано ранее в примерах.

// Итог:
// Архитектура MVC помогает разделить логику приложения на три части: Модель, Представление и Контроллер.
// MongoDB служит основой для работы с данными в модели, предоставляя гибкую и масштабируемую базу данных.
// При правильном разделении логики в MVC-приложении, MongoDB помогает эффективно управлять и хранить данные, а также поддерживать масштабируемость приложения.
