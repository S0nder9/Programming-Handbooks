// Глава 1: Введение в MongoDB (mongoose) - Лучшие практики безопасности

// MongoDB является одной из самых популярных NoSQL баз данных, а Mongoose — это библиотека для работы с MongoDB в Node.js,
// обеспечивающая удобные средства для создания схем и моделей данных.
// В этой главе рассмотрим лучшие практики безопасности при работе с MongoDB и Mongoose.

// 1. Настройка аутентификации для MongoDB
// Проблема: По умолчанию MongoDB может позволять подключение без аутентификации, что небезопасно для производственной среды.
// Решение: Настройте обязательную аутентификацию пользователей базы данных.
// Пример настройки пользователя с ограниченными правами:
db.createUser({
    user: "secureUser",
    pwd: "strongPassword123!",
    roles: [{ role: "readWrite", db: "yourDatabase" }]
  });
  
  // После этого убедитесь, что MongoDB настроен на использование аутентификации, добавив параметр `--auth`
  // при запуске сервера MongoDB или настроив это в конфигурационном файле.
  
  // 2. Подключение по защищенному каналу (SSL/TLS)
  // Проблема: Незащищенные соединения могут быть перехвачены и подвергнуты атакам "человек посередине" (MITM).
  // Решение: Используйте SSL/TLS для шифрования соединения с MongoDB.
  // Пример подключения с SSL/TLS в Mongoose:
  const mongoose = require('mongoose');
  
  mongoose.connect('mongodb://secureUser:strongPassword123!@localhost:27017/yourDatabase', {
    ssl: true,
    sslValidate: true,
    sslCA: '/path/to/ca-cert.pem',
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
  
  // 3. Защита от инъекций NoSQL
  // Проблема: MongoDB запросы могут быть уязвимы к инъекциям NoSQL, если данные от пользователей не проверяются.
  // Решение: Используйте валидаторы Mongoose и типы данных схем для защиты от нежелательных запросов.
  // Пример схемы с встроенной проверкой данных:
  const userSchema = new mongoose.Schema({
    username: { type: String, required: true, minlength: 3, maxlength: 50 },
    password: { type: String, required: true },
    email: { type: String, required: true, match: /.+\@.+\..+/ }
  });
  
  const User = mongoose.model('User', userSchema);
  
  // 4. Шифрование чувствительных данных
  // Проблема: Чувствительные данные, такие как пароли, могут быть скомпрометированы.
  // Решение: Храните пароли в зашифрованном виде, используя библиотеки для хеширования, такие как bcrypt.
  // Пример хеширования пароля перед сохранением:
  const bcrypt = require('bcrypt');
  
  userSchema.pre('save', async function(next) {
    if (this.isModified('password')) {
      const salt = await bcrypt.genSalt(10);
      this.password = await bcrypt.hash(this.password, salt);
    }
    next();
  });
  
  // 5. Ограничение доступа к данным
  // Проблема: Открытый доступ к данным может привести к утечке конфиденциальной информации.
  // Решение: Используйте принципы наименьших привилегий и ограничьте доступ к данным.
  // Пример возврата ограниченных данных:
  app.get('/api/user/:id', async (req, res) => {
    const user = await User.findById(req.params.id).select('username email'); // возвращаем только нужные поля
    res.send(user);
  });
  
  // 6. Внедрение контроля доступа
  // Проблема: Неавторизованные пользователи могут получить доступ к защищённым данным или операциям.
  // Решение: Реализуйте аутентификацию и авторизацию для контроля доступа к данным.
  // Пример использования middleware для проверки авторизации:
  const jwt = require('jsonwebtoken');
  
  const authMiddleware = (req, res, next) => {
    const token = req.header('Authorization').replace('Bearer ', '');
    try {
      const decoded = jwt.verify(token, 'yourSecretKey');
      req.user = decoded;
      next();
    } catch (err) {
      res.status(401).send('Unauthorized');
    }
  };
  
  // 7. Регулярное обновление библиотек и зависимостей
  // Проблема: Устаревшие библиотеки могут иметь уязвимости безопасности.
  // Решение: Регулярно обновляйте Mongoose и другие зависимости в проекте.
  // Команда для обновления пакетов:
  // npm update mongoose
  
  // 8. Мониторинг и аудит логов
  // Проблема: Взломы или аномальные действия могут оставаться незамеченными без соответствующего мониторинга.
  // Решение: Настройте журналирование и мониторинг действий пользователей и обращений к базе данных.
  // Пример использования встроенного журнала Mongoose для отслеживания запросов:
  mongoose.set('debug', true); // Включение журналирования запросов MongoDB в Mongoose
  
  // Итог:
  // Соблюдение данных практик безопасности поможет защитить вашу базу данных MongoDB и приложение на Node.js от различных угроз.
  // Эти меры создадут устойчивую к атакам и безопасную среду для хранения и управления данными.
  