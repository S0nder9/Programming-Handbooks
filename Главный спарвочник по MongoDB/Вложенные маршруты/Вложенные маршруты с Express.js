// Глава 1: Введение в MongoDB (mongoose) - Вложенные маршруты с Express

// Вложенные маршруты в Express.js позволяют организовать маршруты с параметрами, связанными между собой.
// В этом примере мы создаем вложенный маршрут для отзывов (reviews), связанных с турами (tours).
// Такая структура удобна для работы с данными, где один ресурс вложен в другой, например, когда каждый отзыв связан с конкретным туром.

// Вложенные маршруты позволяют:
// 1. Определять маршруты, которые зависят от ID другого ресурса.
// 2. Создавать отношения "один ко многим" — например, у одного тура может быть несколько отзывов.
// 3. Упрощать маршрутизацию и улучшать читаемость кода.

// Пример создания вложенного маршрута для отзывов

// Определяем reviewRouter и используем параметр { mergeParams: true }
// mergeParams: true позволяет вложенному маршруту получать параметры из родительского маршрута.
const express = require('express');
const reviewRouter = express.Router({ mergeParams: true });

// Данный маршрут обрабатывает POST-запрос на создание отзыва для конкретного тура.
// Порядок промежуточных обработчиков (middleware):
// 1. authController.protect — защищает маршрут и требует авторизации.
// 2. authController.restrictTo("user") — ограничивает доступ, разрешая только пользователям с ролью "user".
// 3. reviewController.createReview — контроллер, который создает отзыв.
reviewRouter.post(
    "/",
    authController.protect,       // Проверка авторизации пользователя
    authController.restrictTo("user"),  // Ограничение доступа только для роли "user"
    reviewController.createReview  // Вызов контроллера для создания отзыва
);

// Подключаем reviewRouter к основному маршруту, чтобы сделать его вложенным маршрутом для /:tourId/reviews
// Это позволяет обращаться к маршруту для создания отзыва, связанного с конкретным туром по его ID.
router.use("/:tourId/reviews", reviewRouter);

// Итого:
// Вложенные маршруты с Express позволяют организовать код, особенно при работе с вложенными ресурсами, такими как туры и отзывы.
// Использование { mergeParams: true } упрощает доступ к параметрам родительского маршрута (например, tourId) внутри вложенного маршрута.
// Этот подход помогает обеспечить читаемость кода и логически связать ресурсы в маршрутах.
