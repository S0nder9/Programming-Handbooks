# Глава 10: Списки - Копирование списков

# В Python списки являются изменяемыми последовательностями, которые позволяют хранить несколько элементов.
# Иногда возникает необходимость создать копию списка, чтобы изменения в одной копии не затрагивали другую.

# Копирование списков можно выполнить несколькими способами, каждый из которых имеет свои особенности.

# Зачем нужно копирование списков?
# Копирование списков нужно, когда вы хотите работать с копией списка, чтобы изменения в новом списке не затронули оригинал.
# Это особенно полезно, когда вы передаете списки в функции и хотите избежать нежелательных изменений оригинальных данных.

# Как копировать списки?
# В Python есть несколько способов копирования списков:
# 1. Поверхностное копирование срезом
# 2. Поверхностное копирование с помощью функции list()
# 3. Поверхностное копирование с использованием метода copy()
# 4. Глубокое копирование с помощью модуля copy

# 1. Поверхностное копирование срезом
# Это наиболее простой способ создания поверхностной копии списка.
original_list = [1, 2, 3, 4, 5]
copied_list_slice = original_list[:]
print("Оригинальный список:", original_list)
print("Скопированный список (срез):", copied_list_slice)

# 2. Поверхностное копирование с помощью функции list()
# Функция list() создает новую копию списка.
copied_list_function = list(original_list)
print("Скопированный список (list()):", copied_list_function)

# 3. Поверхностное копирование с использованием метода copy()
# Метод copy() доступен для списков и создает их поверхностную копию.
copied_list_method = original_list.copy()
print("Скопированный список (copy()):", copied_list_method)

# 4. Глубокое копирование с помощью модуля copy
# Модуль copy предоставляет функцию deepcopy(), которая создает глубокую копию списка, включая вложенные списки.
import copy
nested_list = [[1, 2, 3], [4, 5, 6]]
deep_copied_list = copy.deepcopy(nested_list)
print("Оригинальный вложенный список:", nested_list)
print("Глубокая копия вложенного списка:", deep_copied_list)

# Разница между поверхностным и глубоким копированием
# Поверхностное копирование создает новый список, но вложенные объекты остаются теми же самыми.
# Глубокое копирование создает новый список и рекурсивно копирует все вложенные объекты.

# Изменение оригинального списка и его поверхностной копии
original_list[0] = 10
print("Измененный оригинальный список:", original_list)
print("Поверхностная копия после изменения оригинала:", copied_list_slice)

# Изменение вложенного объекта в оригинальном и глубоко скопированном списке
nested_list[0][0] = 10
print("Измененный оригинальный вложенный список:", nested_list)
print("Глубокая копия после изменения оригинала:", deep_copied_list)

# Итог
# Копирование списков в Python позволяет создавать независимые копии данных, что важно для избежания непреднамеренных изменений.
# Выбор между поверхностным и глубоким копированием зависит от структуры данных и потребностей вашей программы.

my_nums = [10, 10, 3, 4, 18, 109, 942, 99]

my_nums.copy()

print(my_nums)
