# Глава 10: Списки - Разные операции со списками, методы по типу sum(), len() и другие

# В Python списки являются одним из основных и наиболее часто используемых типов данных.
# Они позволяют хранить коллекции элементов, которые могут быть изменяемыми, и предоставляют множество методов для работы с ними.

# Основные операции со списками включают в себя:
# - Добавление элементов
# - Удаление элементов
# - Доступ к элементам
# - Изменение элементов
# - Итерация по элементам

# Рассмотрим несколько базовых методов и функций, используемых для работы со списками.

# Создание списка
my_list = [1, 2, 3, 4, 5]

# Доступ к элементам списка
first_element = my_list[0]  # Первый элемент
last_element = my_list[-1]  # Последний элемент

# Изменение элементов списка
my_list[0] = 10  # Изменение первого элемента

# Добавление элементов в список
my_list.append(6)  # Добавление элемента в конец списка
my_list.insert(1, 15)  # Вставка элемента на определенную позицию

# Удаление элементов из списка
my_list.remove(3)  # Удаление первого вхождения элемента со значением 3
popped_element = my_list.pop()  # Удаление и возврат последнего элемента
del my_list[0]  # Удаление элемента по индексу

# Итерация по элементам списка
for element in my_list:
    print(element)

# Важные методы и функции для работы со списками

# len() - возвращает количество элементов в списке
length = len(my_list)
print("Длина списка:", length)

# sum() - возвращает сумму всех элементов в списке
total = sum(my_list)
print("Сумма элементов списка:", total)

# min() - возвращает минимальный элемент в списке
minimum = min(my_list)
print("Минимальный элемент в списке:", minimum)

# max() - возвращает максимальный элемент в списке
maximum = max(my_list)
print("Максимальный элемент в списке:", maximum)

# sorted() - возвращает новый отсортированный список
sorted_list = sorted(my_list)
print("Отсортированный список:", sorted_list)

# reverse() - изменяет порядок элементов в списке на обратный
my_list.reverse()
print("Список в обратном порядке:", my_list)

# count() - возвращает количество вхождений элемента в список
count_of_2 = my_list.count(2)
print("Количество вхождений элемента 2:", count_of_2)

# index() - возвращает индекс первого вхождения элемента в список
index_of_15 = my_list.index(15)
print("Индекс первого вхождения элемента 15:", index_of_15)

# clear() - удаляет все элементы из списка
my_list.clear()
print("Список после очистки:", my_list)

# Итог
# Списки в Python предоставляют мощные возможности для хранения и манипуляции коллекциями данных.
# Знание основных операций, методов и функций для работы со списками помогает эффективно управлять данными и решать разнообразные задачи в программировании.
