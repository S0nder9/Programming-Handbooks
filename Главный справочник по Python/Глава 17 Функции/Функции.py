# Глава 17: Функции

# В Python функции являются фундаментальным строительным блоком, позволяющим разбивать код на логически обособленные части.
# Функции помогают улучшить читаемость, повторное использование кода и организацию программы.

# Определение функций
# Функция определяется с помощью ключевого слова `def`, за которым следует имя функции, круглые скобки и двоеточие.
# Внутри функции вы можете написать блок кода, который будет выполняться при вызове функции.

def greet(name):
    """
    Эта функция принимает имя и выводит приветственное сообщение.
    """
    print(f"Привет, {name}!")

# Вызов функции
# Чтобы использовать функцию, просто вызовите ее по имени и передайте необходимые аргументы.

greet("Алиса")

# Параметры и аргументы
# Функции могут принимать параметры, которые позволяют передавать значения в функцию.
# Аргументы - это значения, которые передаются параметрам при вызове функции.

def add(a, b):
    """
    Эта функция принимает два числа и возвращает их сумму.
    """
    return a + b

result = add(3, 5)
print(f"Сумма: {result}")

# Значения по умолчанию
# Вы можете определить значения по умолчанию для параметров функции, чтобы они использовались, если аргументы не были переданы.

def greet_with_default(name="Гость"):
    """
    Эта функция принимает имя и выводит приветственное сообщение. Если имя не указано, используется значение по умолчанию.
    """
    print(f"Привет, {name}!")

greet_with_default()
greet_with_default("Боб")

# Аргументы произвольной длины
# Иногда вам нужно определить функцию, которая принимает произвольное количество аргументов. 
# Для этого используются *args и **kwargs.

def print_all(*args):
    """
    Эта функция принимает произвольное количество позиционных аргументов и выводит их.
    """
    for arg in args:
        print(arg)

print_all(1, 2, 3, "четыре", "пять")

def print_key_values(**kwargs):
    """
    Эта функция принимает произвольное количество именованных аргументов и выводит их ключи и значения.
    """
    for key, value in kwargs.items():
        print(f"{key}: {value}")

print_key_values(name="Алиса", age=30, city="Москва")

# Возвращение значений
# Функции могут возвращать значения с помощью ключевого слова `return`.

def multiply(a, b):
    """
    Эта функция принимает два числа и возвращает их произведение.
    """
    return a * b

result = multiply(4, 6)
print(f"Произведение: {result}")

# Лямбда-функции
# Лямбда-функции - это маленькие анонимные функции, которые определяются с помощью ключевого слова `lambda`.

square = lambda x: x ** 2
print(f"Квадрат числа 5: {square(5)}")

# Область видимости переменных
# Переменные, определенные внутри функции, являются локальными и недоступны за пределами функции.
# Глобальные переменные определяются вне функций и доступны из любого места в коде.

global_var = "Это глобальная переменная"

def test_scope():
    local_var = "Это локальная переменная"
    print(global_var)
    print(local_var)

test_scope()
# print(local_var)  # Эта строка вызовет ошибку, так как local_var не доступна вне функции

# Итог
# Функции являются важной частью Python, которые позволяют улучшить организацию кода, сделать его более читаемым и повторно используемым.
# Они обеспечивают способ структурирования программного кода и помогают избежать дублирования.

