# Глава 17: Функции - Передача неизменяемых объектов в функцию

# В Python все данные представляются объектами. Объекты в Python могут быть изменяемыми (mutable) и неизменяемыми (immutable).
# Примеры изменяемых объектов: списки, словари, множества.
# Примеры неизменяемых объектов: числа, строки, кортежи, frozenset.

# В этой главе мы рассмотрим, как передаются неизменяемые объекты в функции и что это означает для работы с такими объектами.

# Передача неизменяемых объектов в функцию
# Когда неизменяемый объект передается в функцию, функция получает копию ссылки на объект, а не сам объект.
# Это означает, что вы не можете изменить сам объект внутри функции. Любая попытка изменить объект приведет к созданию нового объекта.

# Рассмотрим несколько примеров для лучшего понимания.

# Пример 1: Передача числа (неизменяемого объекта)
def modify_number(n):
    print("Внутри функции, до изменения:", n)
    n += 10
    print("Внутри функции, после изменения:", n)

number = 5
print("До вызова функции:", number)
modify_number(number)
print("После вызова функции:", number)

# В этом примере значение переменной number не изменяется после вызова функции modify_number,
# так как числа являются неизменяемыми объектами, и внутри функции создается новый объект.

# Пример 2: Передача строки (неизменяемого объекта)
def modify_string(s):
    print("Внутри функции, до изменения:", s)
    s += " добавлено"
    print("Внутри функции, после изменения:", s)

string = "Исходная строка"
print("До вызова функции:", string)
modify_string(string)
print("После вызова функции:", string)

# В этом примере значение переменной string не изменяется после вызова функции modify_string,
# так как строки являются неизменяемыми объектами, и внутри функции создается новый объект.

# Итог
# При передаче неизменяемых объектов в функцию функция получает копию ссылки на объект, а не сам объект.
# Любая попытка изменить объект внутри функции приведет к созданию нового объекта, и исходный объект останется неизменным.
# Это важно понимать при работе с функциями в Python, чтобы избегать неожиданных изменений данных.

# Важно отметить, что если вы хотите изменить значение неизменяемого объекта внутри функции и использовать это новое значение вне функции,
# вам нужно вернуть новое значение из функции и присвоить его переменной.

# Пример 3: Возврат нового значения из функции
def modify_and_return_number(n):
    n += 10
    return n

number = 5
print("До вызова функции:", number)
number = modify_and_return_number(number)
print("После вызова функции:", number)

# В этом примере значение переменной number изменяется после вызова функции modify_and_return_number,
# так как новое значение возвращается из функции и присваивается переменной number.
