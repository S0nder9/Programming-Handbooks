# Глава 17: Функции - Передача изменяемых объектов в функцию

# В Python объекты могут быть изменяемыми и неизменяемыми. Изменяемые объекты могут быть изменены после их создания,
# в то время как неизменяемые объекты не могут быть изменены. Типичными примерами изменяемых объектов являются списки (list) и словари (dict),
# тогда как строки (str) и кортежи (tuple) являются неизменяемыми.

# Когда изменяемые объекты передаются в функцию, изменения, внесенные в эти объекты внутри функции, сохраняются и за пределами функции.
# Это связано с тем, что в Python передача аргументов осуществляется по ссылке, а не по значению.
# Другими словами, функция получает ссылку на тот же объект в памяти, а не его копию.

# Рассмотрим пример для лучшего понимания:

def modify_list(input_list):
    """
    Функция принимает список и добавляет к нему новый элемент.
    """
    input_list.append(100)
    print("Внутри функции:", input_list)

# Создаем изменяемый объект (список)
my_list = [1, 2, 3]

# Передаем список в функцию
modify_list(my_list)

# Выводим список после вызова функции
print("После вызова функции:", my_list)

# Как видно из примера, функция modify_list добавляет новый элемент к списку input_list.
# После вызова функции мы видим, что список my_list был изменен: к нему был добавлен элемент 100.
# Это демонстрирует, что изменения, внесенные в изменяемый объект внутри функции, сохраняются и за пределами функции.

# Рассмотрим еще один пример с использованием словаря:

def modify_dict(input_dict):
    """
    Функция принимает словарь и добавляет к нему новую пару ключ-значение.
    """
    input_dict['new_key'] = 'new_value'
    print("Внутри функции:", input_dict)

# Создаем изменяемый объект (словарь)
my_dict = {'a': 1, 'b': 2}

# Передаем словарь в функцию
modify_dict(my_dict)

# Выводим словарь после вызова функции
print("После вызова функции:", my_dict)

# В этом примере функция modify_dict добавляет новую пару ключ-значение к словарю input_dict.
# После вызова функции мы видим, что словарь my_dict был изменен: к нему была добавлена новая пара ключ-значение.
# Это еще раз подтверждает, что изменения, внесенные в изменяемый объект внутри функции, сохраняются и за пределами функции.

# Итог
# Передача изменяемых объектов в функцию в Python позволяет изменять эти объекты внутри функции,
# и эти изменения сохраняются после завершения функции. Это полезно для работы с большими объемами данных,
# когда создание копий объектов может быть неэффективным с точки зрения памяти и производительности.
# Однако, это также требует осторожности, чтобы избежать непреднамеренных изменений объектов в разных частях программы.
