# Глава 16: Изменение объектов в Python - Как избежать изменения копии

# В этой главе мы рассмотрим, как в Python можно избежать изменения копии объектов и научимся различать изменяемые и неизменяемые объекты.

# В Python объекты можно разделить на изменяемые (mutable) и неизменяемые (immutable). 
# Изменяемые объекты, такие как списки и словари, могут быть изменены после их создания, 
# тогда как неизменяемые объекты, такие как строки и кортежи, не могут быть изменены после их создания.

# Когда вы передаете изменяемый объект в функцию или создаете его копию, изменения, внесенные в объект, могут повлиять на все его ссылки.
# Это может привести к неожиданным результатам, если вы не знаете о том, как работает передача объектов в Python.

# Как избежать изменения копии объектов?

# 1. Создание глубоких копий объектов
# Чтобы избежать изменений исходного объекта, вы можете создать глубокую копию объекта. Это гарантирует, что изменения будут внесены в копию, а не в оригинал.

# Пример создания глубоких копий с помощью модуля copy
import copy

# Создаем исходный объект
original_list = [1, 2, [3, 4]]

# Создаем глубокую копию объекта
deep_copied_list = copy.deepcopy(original_list)

# Изменяем копию
deep_copied_list[2][0] = 100

print("Исходный список:", original_list)  # Исходный список остается неизменным
print("Копия списка:", deep_copied_list)  # Изменения отражены в копии

# 2. Использование неизменяемых объектов
# Использование неизменяемых объектов, таких как строки или кортежи, помогает избежать изменений, так как они не могут быть изменены после создания.

# Пример работы с неизменяемыми объектами
string1 = "Hello"
string2 = string1.upper()  # Создаем новую строку, преобразованную в верхний регистр
print("Оригинальная строка:", string1)  # Оригинальная строка не изменяется
print("Измененная строка:", string2)  # Новая строка в верхнем регистре

# 3. Создание поверхностных копий объектов
# Если вам не нужно, чтобы изменения затрагивали вложенные объекты, вы можете создать поверхностную копию объекта.

# Пример создания поверхностных копий с помощью метода copy()
original_list = [1, 2, [3, 4]]
shallow_copied_list = original_list.copy()

# Изменяем копию
shallow_copied_list[2][0] = 100

print("Исходный список:", original_list)  # Изменения в вложенном объекте также отразятся в оригинале
print("Копия списка:", shallow_copied_list)  # Изменения отражены в копии

# Итог
# В Python важно различать изменяемые и неизменяемые объекты, чтобы правильно управлять изменениями данных и избежать непреднамеренных изменений исходных объектов.
# Создание глубоких копий объектов, использование неизменяемых типов данных и создание поверхностных копий являются основными методами для управления изменениями и сохранения целостности данных в ваших программах.

