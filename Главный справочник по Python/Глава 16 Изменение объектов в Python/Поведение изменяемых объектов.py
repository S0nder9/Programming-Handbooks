# Глава 16: Изменение объектов в Python - Поведение изменяемых объектов

# В Python объекты делятся на изменяемые и неизменяемые.
# В этой главе мы рассмотрим поведение изменяемых объектов и их использование в программировании.

# Изменяемые объекты
# Изменяемые объекты (mutable objects) - это объекты, состояние которых можно изменить после их создания.
# Примеры изменяемых объектов: списки (lists), множества (sets) и словари (dictionaries).

# Поведение изменяемых объектов
# Изменяемые объекты могут изменять свое содержимое без изменения их идентификатора. Это означает, что можно изменять элементы этих объектов после их создания.

# Пример 1: Изменение элементов списка
# В этом примере мы создаем список и изменяем его элементы.

my_list = [1, 2, 3, 4, 5]
print("Исходный список:", my_list)

# Изменяем элемент по индексу
my_list[2] = 99
print("Список после изменения элемента:", my_list)

# Пример 2: Изменение элементов множества
# В этом примере мы создаем множество и добавляем и удаляем элементы.

my_set = {1, 2, 3, 4, 5}
print("Исходное множество:", my_set)

# Добавляем элемент
my_set.add(6)
print("Множество после добавления элемента:", my_set)

# Удаляем элемент
my_set.remove(3)
print("Множество после удаления элемента:", my_set)

# Пример 3: Изменение элементов словаря
# В этом примере мы создаем словарь и изменяем его пары ключ-значение.

my_dict = {'a': 1, 'b': 2, 'c': 3}
print("Исходный словарь:", my_dict)

# Изменяем значение по ключу
my_dict['b'] = 99
print("Словарь после изменения значения:", my_dict)

# Пример 4: Поведение изменяемых объектов при передаче в функции
# Когда вы передаете изменяемый объект в функцию, изменения в объекте будут видны за пределами функции.

def modify_list(lst):
    lst.append(100)
    print("Список внутри функции:", lst)

my_list = [1, 2, 3]
print("Список до вызова функции:", my_list)
modify_list(my_list)
print("Список после вызова функции:", my_list)

# Пример 5: Присваивание и копирование изменяемых объектов
# Присваивание изменяемого объекта не создает новый объект, а просто создает ссылку на существующий объект.

original_list = [1, 2, 3]
copied_list = original_list  # Присваивание ссылки на тот же объект
copied_list.append(4)  # Изменение объекта через одну из ссылок
print("Оригинальный список:", original_list)
print("Копированный список:", copied_list)

# Для создания независимой копии изменяемого объекта используйте метод copy() или модуль copy.

import copy

original_list = [1, 2, 3]
copied_list = copy.copy(original_list)  # Создание поверхностной копии
copied_list.append(4)
print("Оригинальный список после поверхностного копирования:", original_list)
print("Копированный список после поверхностного копирования:", copied_list)

# Итог
# Изменяемые объекты в Python включают списки, множества и словари, которые могут изменяться после их создания.
# Понимание поведения изменяемых объектов, их копирования и передачи в функции важно для написания эффективного и надежного кода.
# Изменяемые объекты позволяют вам работать с коллекциями данных, изменять их состояние и управлять их содержимым в вашем программном обеспечении.


a = {"a": "b"}
b = a.copy()
b["a"] = 10

print(a)
print(b)