# Глава 16: Изменение объектов в Python - Создание поверхностных и полных копий

# В этой главе мы рассмотрим важные концепции в Python, связанные с созданием поверхностных и полных копий объектов.
# Это ключевые аспекты работы с изменяемыми объектами, такими как списки и словари, и понимание их поможет избежать многих проблем в программировании.

# Создание поверхностных и полных копий объектов
# В Python существуют два основных способа создания копий объектов: поверхностное копирование (shallow copy) и полное копирование (deep copy).
# Эти методы различаются тем, как они копируют вложенные объекты и что происходит с изменениями в исходных объектах.

# Поверхностное копирование (Shallow Copy)
# Поверхностное копирование создает новый объект, но не создает новые вложенные объекты. Вместо этого новый объект содержит ссылки на те же вложенные объекты, что и оригинал.

# Для создания поверхностной копии можно использовать метод copy() для списков и словарей, или функцию copy.copy() из модуля copy.

import copy

# Пример создания поверхностной копии
original_list = [1, 2, [3, 4]]
shallow_copied_list = copy.copy(original_list)

# Изменение вложенного объекта в копии повлияет на оригинал
shallow_copied_list[2][0] = 99

print("Оригинальный список:", original_list)  # Оригинальный список: [1, 2, [99, 4]]
print("Копия списка:", shallow_copied_list)   # Копия списка: [1, 2, [99, 4]]

# Полное копирование (Deep Copy)
# Полное копирование создает новый объект и рекурсивно копирует все вложенные объекты. Это означает, что изменения в вложенных объектах не повлияют на оригинал.

# Для создания полной копии используется функция copy.deepcopy() из модуля copy.

# Пример создания полной копии
original_list = [1, 2, [3, 4]]
deep_copied_list = copy.deepcopy(original_list)

# Изменение вложенного объекта в копии не повлияет на оригинал
deep_copied_list[2][0] = 99

print("Оригинальный список:", original_list)  # Оригинальный список: [1, 2, [3, 4]]
print("Копия списка:", deep_copied_list)      # Копия списка: [1, 2, [99, 4]]

# Сравнение поверхностного и полного копирования
# В поверхностной копии изменения вложенных объектов в одной копии отражаются в другой.
# В полной копии изменения вложенных объектов в одной копии не затрагивают другие.

# Итог
# Понимание различий между поверхностным и полным копированием важно для работы с изменяемыми объектами в Python.
# Поверхностное копирование подходит для простых объектов, тогда как полное копирование необходимо для работы с вложенными структурами данных.
# Используйте модуль copy для создания копий объектов и выбирайте подходящий метод в зависимости от ваших требований к копированию.

# Пример демонстрирует основные принципы поверхностного и полного копирования.
