# Глава 16: Изменение объектов в Python

# Изменение объектов в Python
# В Python все данные можно разделить на изменяемые и неизменяемые объекты.
# Понимание разницы между этими двумя типами объектов поможет вам эффективно управлять данными в ваших программах.

# Изменяемые и неизменяемые объекты
# Изменяемые объекты - это объекты, состояние которых можно изменять после их создания.
# Примеры изменяемых объектов включают списки (list), множества (set) и словари (dict).

# Неизменяемые объекты - это объекты, состояние которых нельзя изменить после их создания.
# Примеры неизменяемых объектов включают строки (str), кортежи (tuple) и числа (int, float).

# Зачем и где используется изменение объектов?
# Изменяемые объекты позволяют вам изменять содержимое объекта без создания нового объекта.
# Это полезно, когда вам нужно динамически изменять данные, такие как добавление или удаление элементов из списка.
# Неизменяемые объекты часто используются для создания констант или в случаях, когда данные не должны изменяться, например, для ключей в словарях.

# Примеры изменения объектов

# Пример 1: Изменение списка (список - изменяемый объект)
my_list = [1, 2, 3]
print("Исходный список:", my_list)
# Добавление элемента в список
my_list.append(4)
print("Список после добавления элемента:", my_list)
# Изменение элемента списка
my_list[1] = 10
print("Список после изменения элемента:", my_list)
# Удаление элемента из списка
my_list.remove(3)
print("Список после удаления элемента:", my_list)

# Пример 2: Изменение множества (множество - изменяемый объект)
my_set = {1, 2, 3}
print("Исходное множество:", my_set)
# Добавление элемента в множество
my_set.add(4)
print("Множество после добавления элемента:", my_set)
# Удаление элемента из множества
my_set.discard(2)
print("Множество после удаления элемента:", my_set)

# Пример 3: Изменение словаря (словарь - изменяемый объект)
my_dict = {'a': 1, 'b': 2}
print("Исходный словарь:", my_dict)
# Добавление новой пары ключ-значение в словарь
my_dict['c'] = 3
print("Словарь после добавления новой пары:", my_dict)
# Изменение значения по ключу в словаре
my_dict['a'] = 10
print("Словарь после изменения значения по ключу:", my_dict)
# Удаление пары ключ-значение из словаря
del my_dict['b']
print("Словарь после удаления пары ключ-значение:", my_dict)

# Пример 4: Неизменяемые объекты (строки и кортежи)

# Строки (строка - неизменяемый объект)
my_string = "Hello"
print("Исходная строка:", my_string)
# Попытка изменить строку (на самом деле создается новый объект)
new_string = my_string.replace("H", "J")
print("Новая строка после замены символа:", new_string)

# Кортежи (кортеж - неизменяемый объект)
my_tuple = (1, 2, 3)
print("Исходный кортеж:", my_tuple)
# Попытка изменить кортеж (это вызовет ошибку)
# my_tuple[1] = 10  # Это вызовет ошибку TypeError

# Итог
# В Python важно понимать разницу между изменяемыми и неизменяемыми объектами, так как это влияет на то, как вы управляете данными в ваших программах.
# Изменяемые объекты позволяют вам изменять данные после их создания, в то время как неизменяемые объекты не могут быть изменены, что делает их идеальными для использования в качестве констант или ключей в словарях.

# Знание этих концепций поможет вам писать более эффективный и надежный код в Python.

