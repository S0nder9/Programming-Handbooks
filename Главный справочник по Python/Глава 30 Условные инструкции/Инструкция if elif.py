# Глава 30: Условные инструкции - Инструкция if elif

# Условные инструкции - это основа для принятия решений в программировании.
# Они позволяют вашему коду выполнять определенные блоки кода в зависимости от условий.
# В Python основной конструкцией для выполнения условных инструкций является инструкция if.
# Кроме того, для проверки нескольких условий используется конструкция if...elif...else.

# Инструкция if
# Инструкция if используется для проверки, выполняется ли некоторое условие.
# Если условие истинно (True), выполняется блок кода, связанный с инструкцией if.
# Если условие ложно (False), этот блок кода пропускается.

# Пример использования инструкции if
x = 10
if x > 5:
    print("x больше 5")

# Инструкция if...else
# Инструкция if может быть дополнена инструкцией else, которая выполняется, если условие if ложно.
# Это позволяет задать альтернативное действие в случае, если условие не выполнено.

# Пример использования инструкции if...else
x = 3
if x > 5:
    print("x больше 5")
else:
    print("x не больше 5")

# Инструкция if...elif...else
# Если необходимо проверить несколько условий, используется конструкция if...elif...else.
# В этом случае сначала проверяется условие if, если оно ложно, проверяется условие elif, и так далее.
# Если ни одно из условий не выполнено, выполняется блок else.

# Пример использования инструкции if...elif...else
x = 5
if x > 5:
    print("x больше 5")
elif x == 5:
    print("x равно 5")
else:
    print("x меньше 5")

# Обратите внимание, что блоки кода, связанные с инструкциями if, elif и else, должны быть правильно отступлены.
# В Python отступы определяют принадлежность кода к блоку, поэтому они обязательны.

# Условные инструкции также могут быть вложенными, то есть вы можете использовать одну инструкцию if внутри другой.
# Это позволяет проверять более сложные условия.

# Пример вложенных условных инструкций
x = 10
y = 20
if x > 5:
    if y > 15:
        print("x больше 5 и y больше 15")

# Итог
# Условные инструкции if, elif и else являются фундаментальными для создания логики принятия решений в программе.
# Они позволяют выполнять различные блоки кода в зависимости от условий, делая программу более гибкой и интерактивной.
