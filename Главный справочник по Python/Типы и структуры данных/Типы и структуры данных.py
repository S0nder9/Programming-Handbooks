# Глава 5: Основные концепции в Python

# Типы и структуры данных

# Python предоставляет множество встроенных типов данных и структур данных, которые позволяют эффективно организовывать и манипулировать данными.

# Основные типы данных:
# 1. Числа (Numbers)
# 2. Строки (Strings)
# 3. Логический тип (Boolean)
# 4. None

# Структуры данных:
# 1. Списки (Lists)
# 2. Кортежи (Tuples)
# 3. Множества (Sets)
# 4. Словари (Dictionaries)

# Числа (Numbers)
# В Python существует несколько типов чисел: целые числа (int), числа с плавающей точкой (float) и комплексные числа (complex).

# Пример:
integer_number = 10
float_number = 10.5
complex_number = 3 + 4j

print("Целое число:", integer_number)
print("Число с плавающей точкой:", float_number)
print("Комплексное число:", complex_number)

# Строки (Strings)
# Строки в Python представляют собой последовательности символов, заключенные в одинарные или двойные кавычки.

# Пример:
string_example = "Hello, Python!"
print("Строка:", string_example)

# Логический тип (Boolean)
# Логический тип данных имеет два значения: True и False.

# Пример:
boolean_true = True
boolean_false = False

print("Логическое значение True:", boolean_true)
print("Логическое значение False:", boolean_false)

# None
# None представляет собой специальный тип, используемый для обозначения отсутствия значения.

# Пример:
none_value = None
print("Значение None:", none_value)

# Списки (Lists)
# Списки - это изменяемые последовательности, которые могут содержать элементы различных типов данных.

# Пример:
example_list = [1, 2, 3, "Python", 4.5]
print("Список:", example_list)

# Кортежи (Tuples)
# Кортежи - это неизменяемые последовательности, которые могут содержать элементы различных типов данных.

# Пример:
example_tuple = (1, 2, 3, "Python", 4.5)
print("Кортеж:", example_tuple)

# Множества (Sets)
# Множества - это неупорядоченные коллекции уникальных элементов.

# Пример:
example_set = {1, 2, 3, "Python", 4.5}
print("Множество:", example_set)

# Словари (Dictionaries)
# Словари - это коллекции пар "ключ-значение". Ключи в словаре должны быть уникальными.

# Пример:
example_dict = {"name": "Python", "age": 30, "type": "programming language"}
print("Словарь:", example_dict)

# Итог
# В Python существует множество типов и структур данных, которые позволяют эффективно работать с различными видами информации.
# Понимание и умение использовать эти типы и структуры данных является фундаментальной частью программирования на Python.
