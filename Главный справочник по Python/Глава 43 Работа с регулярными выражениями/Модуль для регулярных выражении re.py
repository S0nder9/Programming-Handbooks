# Глава 43: Работа с регулярными выражениями - Модуль для регулярных выражений re

# Регулярные выражения — это мощный инструмент для работы с текстом.
# Они позволяют искать, проверять, и заменять текстовые паттерны с помощью набора специальных символов и синтаксиса.
# В Python модуль re предоставляет все необходимые функции для работы с регулярными выражениями.

# Модуль re
# Модуль re — это стандартный модуль Python для работы с регулярными выражениями.
# Он предоставляет функции для поиска и манипуляции строками на основе паттернов (шаблонов) регулярных выражений.

# Зачем использовать регулярные выражения?
# Регулярные выражения позволяют легко искать сложные текстовые паттерны.
# Например, они полезны для валидации данных (поиск электронной почты, номера телефона), извлечения информации из текста, замены текста по шаблону и многого другого.

# Основные функции модуля re:

# 1. re.search()
# Используется для поиска первого совпадения в строке. Возвращает объект Match или None, если совпадения не найдено.
import re

pattern = r"\d+"  # Шаблон для поиска одной или более цифр
text = "Сегодня 25 градусов тепла."
match = re.search(pattern, text)
if match:
    print(f"Найдено совпадение: {match.group()}")  # Вывод: Найдено совпадение: 25

# 2. re.findall()
# Возвращает список всех найденных совпадений в строке.
matches = re.findall(pattern, text)
print(f"Все найденные совпадения: {matches}")  # Вывод: Все найденные совпадения: ['25']

# 3. re.match()
# Проверяет, начинается ли строка с определенного шаблона.
match_start = re.match(r"Сегодня", text)
if match_start:
    print(f"Строка начинается с шаблона 'Сегодня'")

# 4. re.sub()
# Используется для замены текста, соответствующего шаблону, на другой текст.
new_text = re.sub(r"\d+", "XX", text)
print(f"Измененный текст: {new_text}")  # Вывод: Измененный текст: Сегодня XX градусов тепла.

# 5. re.split()
# Разбивает строку на части на основе шаблона.
split_text = re.split(r"\s", text)  # Разделение по пробелам
print(f"Разбитая строка: {split_text}")  # Вывод: ['Сегодня', '25', 'градусов', 'тепла.']

# Специальные символы в регулярных выражениях:
# - \d — соответствует любой цифре (0-9)
# - \w — соответствует любому буквенно-цифровому символу
# - \s — соответствует любому пробельному символу (включая пробелы, табуляции и т.д.)
# - ^ — соответствует началу строки
# - $ — соответствует концу строки
# - . — соответствует любому символу, кроме новой строки

# Пример сложного регулярного выражения:
email_pattern = r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"
email_text = "Моя почта: example@example.com"
email_match = re.search(email_pattern, email_text)
if email_match:
    print(f"Найдена электронная почта: {email_match.group()}")  # Вывод: Найдена электронная почта: example@example.com

# Итог:
# Модуль re предоставляет множество полезных функций для работы с регулярными выражениями.
# Регулярные выражения помогают эффективно искать, проверять и модифицировать текстовые данные.
# Важно понимать базовые символы и синтаксис для создания собственных шаблонов и эффективного использования этого инструмента.
