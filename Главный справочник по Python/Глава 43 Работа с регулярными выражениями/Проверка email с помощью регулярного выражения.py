# Глава 43: Работа с регулярными выражениями - Проверка email с помощью регулярного выражения

# Регулярные выражения — это мощный инструмент для поиска и обработки текстовых данных, 
# который позволяет находить совпадения по определенным шаблонам. В Python для работы с регулярными выражениями используется модуль re.

# Одним из частых применений регулярных выражений является проверка корректности формата email-адреса. 
# Это необходимо для того, чтобы убедиться, что пользователь ввел email в правильном формате, прежде чем отправлять его на обработку.

# Зачем используется регулярное выражение для проверки email?
# Формат email имеет строгие правила, которые не всегда можно легко проверить обычными строковыми методами.
# Регулярное выражение позволяет точно задать шаблон, которому должен соответствовать email, и автоматически проверять его на корректность.

# Где используется проверка email с помощью регулярного выражения?
# Проверка email часто используется на сайтах при регистрации, авторизации, подписке на рассылку и других формах, где требуется ввод email-адреса.
# Это помогает предотвратить ошибки пользователя и убедиться, что введенный адрес действительно имеет правильный формат.

# Как использовать регулярное выражение для проверки email?
# Для проверки email с помощью регулярного выражения мы можем использовать функцию `re.match()` или `re.fullmatch()` из модуля re.
# Эти функции проверяют, соответствует ли строка определенному регулярному выражению.

import re

# Регулярное выражение для проверки email
email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'

def is_valid_email(email):
    """
    Функция проверяет, соответствует ли email корректному формату с помощью регулярного выражения.
    
    :param email: строка, содержащая email-адрес
    :return: True, если email корректен, иначе False
    """
    # Используем re.fullmatch() для проверки полного соответствия регулярному выражению
    return re.fullmatch(email_pattern, email) is not None

# Несколько примеров
emails = [
    "test@example.com",        # корректный email
    "invalid-email",           # некорректный email (нет @ и домена)
    "user@domain.co.uk",       # корректный email с поддоменом
    "user.name+tag@domain.io", # корректный email с символами + и .
    "@missingusername.com",    # некорректный email (нет имени пользователя)
    "user@domain"              # некорректный email (нет доменной зоны)
]

for email in emails:
    if is_valid_email(email):
        print(f"'{email}' - корректный email")
    else:
        print(f"'{email}' - некорректный email")

# Итог
# Регулярные выражения предоставляют простой и эффективный способ проверки формата email-адреса.
# Использование регулярного выражения позволяет легко убедиться, что введенный пользователем email соответствует стандартным требованиям к email-адресам.
# Регулярные выражения помогают избегать ошибок ввода и повышают качество пользовательского опыта.
