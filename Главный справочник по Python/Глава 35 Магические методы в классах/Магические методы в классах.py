# Глава 35: Магические методы в классах

# Магические методы в Python (также называемые дандер-методы, от "double underscores") – это специальные методы, 
# которые начинаются и заканчиваются двумя подчеркиваниями (__). Эти методы позволяют вашим классам имитировать поведение встроенных типов данных
# и могут использоваться для перегрузки операторов.

# Магические методы охватывают множество различных операций, таких как инициализация объектов, представление объектов в виде строки, 
# выполнение арифметических операций, доступ к элементам по индексу и многое другое.

# Зачем используются магические методы?
# Магические методы позволяют вам определять, как объекты вашего класса должны вести себя в различных ситуациях.
# Это позволяет вам создавать более интуитивно понятные и удобные для использования объекты, а также расширять функциональность вашего кода.

# Где используются магические методы?
# Магические методы используются внутри классов. Вы можете определить их, чтобы изменить поведение вашего класса при взаимодействии с различными операторами и функциями.

# Как создать и использовать магические методы?
# Для создания магического метода просто добавьте его в определение вашего класса. 
# Например, чтобы определить, как ваш класс должен инициализироваться, используйте метод __init__.
# Чтобы определить, как ваш класс должен представляться в виде строки, используйте метод __str__.

# Несколько примеров

class ComplexNumber:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag

    def __add__(self, other):
        return ComplexNumber(self.real + other.real, self.imag + other.imag)

    def __str__(self):
        return f"{self.real} + {self.imag}i"

    def __eq__(self, other):
        return self.real == other.real and self.imag == other.imag

    def __abs__(self):
        return (self.real**2 + self.imag**2)**0.5

# Создание экземпляров класса ComplexNumber
num1 = ComplexNumber(3, 4)
num2 = ComplexNumber(1, 2)

# Использование магического метода __add__ для сложения двух комплексных чисел
result = num1 + num2
print("Сумма:", result)

# Использование магического метода __str__ для представления объекта в виде строки
print("Число num1:", num1)

# Использование магического метода __eq__ для сравнения двух объектов
print("Равны ли num1 и num2?", num1 == num2)

# Использование магического метода __abs__ для вычисления модуля комплексного числа
print("Модуль num1:", abs(num1))

# Итог
# Магические методы в Python предоставляют мощный механизм для настройки поведения объектов вашего класса.
# Они позволяют вам определять, как объекты вашего класса должны взаимодействовать с различными операторами и функциями,
# делая ваш код более гибким и интуитивно понятным.
