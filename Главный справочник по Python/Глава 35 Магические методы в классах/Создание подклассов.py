# Глава 35: Магические методы в классах - Создание подклассов

# Введение
# В Python магические методы (или дандер-методы) являются методами с двойным подчеркиванием в начале и конце их имен.
# Эти методы позволяют переопределять или расширять поведение встроенных операций, таких как арифметические операции, сравнение, создание строковых представлений объектов и многое другое.
# В этой главе мы рассмотрим, как использовать магические методы при создании подклассов.

# Создание подклассов
# Подклассы позволяют вам создавать новые классы, которые наследуют атрибуты и методы существующих классов.
# Это позволяет повторно использовать код и создавать более специализированные версии классов.

# Пример базового класса и подкласса
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        raise NotImplementedError("Subclass must implement this method")

class Dog(Animal):
    def speak(self):
        return f"{self.name} says Woof!"

class Cat(Animal):
    def speak(self):
        return f"{self.name} says Meow!"

# Использование базового класса и подклассов
dog = Dog("Buddy")
cat = Cat("Whiskers")
print(dog.speak())  # Вывод: Buddy says Woof!
print(cat.speak())  # Вывод: Whiskers says Meow!

# Переопределение магических методов
# Вы можете переопределять магические методы в подклассах для изменения поведения встроенных операций.

# Пример переопределения магических методов
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)

    def __repr__(self):
        return f"Vector({self.x}, {self.y})"

v1 = Vector(2, 3)
v2 = Vector(4, 5)
v3 = v1 + v2
print(v3)  # Вывод: Vector(6, 8)

# Итог
# Магические методы и создание подклассов являются мощными инструментами в Python.
# Они позволяют вам переопределять поведение встроенных операций и создавать более специализированные классы, наследующие атрибуты и методы базовых классов.
# Понимание и умение использовать эти концепции позволяет создавать более гибкие и функциональные программы.

# В следующей главе мы рассмотрим дополнительные магические методы и их применение в более сложных сценариях.
