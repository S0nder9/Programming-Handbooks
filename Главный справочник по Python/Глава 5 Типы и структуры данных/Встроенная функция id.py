# Глава 5: Основные концепции в Python

# Типы и структуры данных - Встроенная функция id

# В Python встроенная функция id() возвращает "идентификатор" объекта, который является уникальным для данного объекта и остается неизменным для этого объекта в течение его существования.
# Идентификатор объекта может быть представлен как адрес памяти объекта (но это не гарантируется для всех реализаций Python).

# Зачем используется встроенная функция id?
# Функция id() полезна для проверки тождественности объектов, то есть для определения, являются ли два объекта в действительности одним и тем же объектом в памяти.
# Это может быть полезно, например, для отладки или оптимизации, чтобы понять, какие объекты являются копиями, а какие ссылками на один и тот же объект.

# Как используется встроенная функция id?
# Для использования функции id() просто вызовите её, передав объект в качестве аргумента: идентификатор = id(объект).
# Функция вернет целое число, представляющее уникальный идентификатор объекта.

# Примеры использования

# Пример 1: Проверка идентификаторов объектов
a = [1, 2, 3]
b = a
c = [1, 2, 3]

print("ID объекта a:", id(a))
print("ID объекта b (ссылается на a):", id(b))
print("ID объекта c (новый объект):", id(c))

# Вывод:
# ID объекта a и b будут одинаковыми, так как b является ссылкой на a.
# ID объекта c будет отличаться, так как это отдельный объект, даже если он содержит такие же данные.

# Пример 2: Использование функции id() для сравнения объектов
def compare_objects(obj1, obj2):
    if id(obj1) == id(obj2):
        print("Объекты идентичны (ссылаются на одну и ту же область памяти).")
    else:
        print("Объекты различны (разные области памяти).")

compare_objects(a, b)  # Ожидается: Объекты идентичны
compare_objects(a, c)  # Ожидается: Объекты различны

# Итог
# Встроенная функция id() является мощным инструментом для работы с объектами в Python, позволяя проверять тождественность объектов.
# Понимание и умение использовать id() помогает лучше понять внутреннее устройство и управление памятью в Python, что полезно для отладки и оптимизации кода.
