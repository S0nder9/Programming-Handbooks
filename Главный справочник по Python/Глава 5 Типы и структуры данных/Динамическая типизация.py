# Глава 5: Основные концепции в Python

# Типы и структуры данных - Динамическая типизация

# Введение
# Python - это язык программирования с динамической типизацией. Это означает, что тип переменной определяется во время выполнения программы, 
# а не статически, как в некоторых других языках программирования (например, Java или C++).

# Динамическая типизация позволяет разработчику писать код более гибко и быстро, так как не нужно явно указывать тип переменных.
# Это упрощает написание кода, но требует внимательности, так как ошибки типа могут возникнуть во время выполнения программы.

# Основные типы данных в Python:
# 1. Числа (int, float, complex)
# 2. Строки (str)
# 3. Логические значения (bool)
# 4. Списки (list)
# 5. Кортежи (tuple)
# 6. Множества (set)
# 7. Словари (dict)

# Пример динамической типизации:

# Переменная сначала содержит целое число
my_variable = 10
print("Значение:", my_variable, "| Тип:", type(my_variable))

# Теперь переменная содержит строку
my_variable = "Привет, мир!"
print("Значение:", my_variable, "| Тип:", type(my_variable))

# Теперь переменная содержит список
my_variable = [1, 2, 3, 4, 5]
print("Значение:", my_variable, "| Тип:", type(my_variable))

# Пример работы с различными типами данных:

# Числа
a = 5           # Целое число
b = 3.14        # Число с плавающей точкой
c = 1 + 2j      # Комплексное число

print("a:", a, "| Тип:", type(a))
print("b:", b, "| Тип:", type(b))
print("c:", c, "| Тип:", type(c))

# Строки
text = "Hello, World!"
print("text:", text, "| Тип:", type(text))

# Логические значения
is_active = True
print("is_active:", is_active, "| Тип:", type(is_active))

# Списки
my_list = [1, 2, 3, 4, 5]
print("my_list:", my_list, "| Тип:", type(my_list))

# Кортежи
my_tuple = (1, 2, 3, 4, 5)
print("my_tuple:", my_tuple, "| Тип:", type(my_tuple))

# Множества
my_set = {1, 2, 3, 4, 5}
print("my_set:", my_set, "| Тип:", type(my_set))

# Словари
my_dict = {"one": 1, "two": 2, "three": 3}
print("my_dict:", my_dict, "| Тип:", type(my_dict))

# Итог
# Динамическая типизация в Python упрощает написание кода, позволяя переменным менять свой тип во время выполнения программы.
# Однако это требует внимательности от разработчика для предотвращения ошибок, связанных с типами данных.
# Понимание различных типов и структур данных в Python является ключевым для эффективного программирования на этом языке.
