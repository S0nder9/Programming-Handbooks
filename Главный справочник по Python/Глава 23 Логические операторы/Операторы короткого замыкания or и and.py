# Глава 23: Логические операторы - Операторы короткого замыкания or и and

# В Python логические операторы используются для выполнения логических операций над выражениями.
# Они позволяют создавать сложные условия и контролировать выполнение кода в зависимости от логических значений.

# В этой главе мы рассмотрим два логических оператора: `or` и `and`, а также обсудим концепцию короткого замыкания.

# Оператор `or`
# Оператор `or` возвращает True, если хотя бы одно из выражений истинно.
# Если первое выражение истинно, второе выражение не проверяется (короткое замыкание).

# Пример использования оператора `or`
x = 10
y = 5

# Проверяем условие с использованием оператора `or`
result = (x > 5) or (y < 3)
print("Результат выражения (x > 5) or (y < 3):", result)  # Выводит: True

# В этом примере, так как x > 5 (True), оператор `or` не проверяет второе условие.

# Оператор `and`
# Оператор `and` возвращает True, если оба выражения истинны.
# Если первое выражение ложно, второе выражение не проверяется (короткое замыкание).

# Пример использования оператора `and`
result = (x > 5) and (y < 10)
print("Результат выражения (x > 5) and (y < 10):", result)  # Выводит: True

# В этом примере, так как оба условия (x > 5 и y < 10) истинны, результат будет True.

# Короткое замыкание (Short-circuit Evaluation)
# Короткое замыкание - это поведение, при котором Python останавливает вычисление логического выражения, как только результат становится определенным.
# Для `or`, если первое условие истинно, дальнейшие условия не проверяются.
# Для `and`, если первое условие ложно, дальнейшие условия не проверяются.

# Пример короткого замыкания с `or`
print("Короткое замыкание с `or`:")
print((True or False))  # Выводит: True (False не проверяется, так как True уже делает условие истинным)

# Пример короткого замыкания с `and`
print("Короткое замыкание с `and`:")
print((False and True))  # Выводит: False (True не проверяется, так как False делает условие ложным)

# Примеры использования в условных операторах
# Вы можете комбинировать `or` и `and` для создания сложных условий.

# Пример сложного условия
user_age = 20
is_student = True

# Проверяем условие с использованием комбинации `or` и `and`
if (user_age < 18) or (user_age >= 65) or is_student:
    print("Пользователь имеет право на скидку.")
else:
    print("Пользователь не имеет права на скидку.")

# Итог
# Логические операторы `or` и `and` позволяют создавать сложные условия и управлять логикой программ.
# Оператор `or` возвращает True, если хотя бы одно из условий истинно, тогда как `and` возвращает True только если все условия истинны.
# Концепция короткого замыкания делает эти операторы эффективными и позволяет избежать лишних вычислений.

# Знание этих операторов и их поведения важно для написания логических выражений и условий в Python.