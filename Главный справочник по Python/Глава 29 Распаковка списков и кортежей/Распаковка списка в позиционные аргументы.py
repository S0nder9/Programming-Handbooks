# Глава 29: Распаковка списков и кортежей - Распаковка списка в позиционные аргументы

# В Python распаковка списков и кортежей в позиционные аргументы представляет собой удобный способ передачи элементов коллекции как отдельных аргументов в функции.
# Это позволяет вам легко работать с коллекциями данных без необходимости явно перечислять каждый элемент.

# Зачем используется распаковка списка в позиционные аргументы?
# Распаковка списка в позиционные аргументы используется, когда у вас есть список (или кортеж), элементы которого вы хотите передать в функцию как отдельные аргументы.
# Это упрощает вызов функций, позволяет избежать лишнего кода и делает ваш код более читаемым и гибким.

# Как использовать распаковку списка в позиционные аргументы?
# Для распаковки списка в позиционные аргументы используйте оператор `*` перед именем списка при вызове функции.
# Например, если у вас есть функция, которая принимает несколько аргументов, вы можете передать список как отдельные аргументы, используя этот оператор.

# Несколько примеров

# Пример 1: Распаковка списка в функцию с несколькими позиционными аргументами
def greet(name, age, city):
    print(f"Привет, {name}! Тебе {age} лет, и ты живешь в {city}.")

# Список с данными
info = ["Алексей", 30, "Москва"]

# Распаковка списка в позиционные аргументы
greet(*info)
# Вывод: Привет, Алексей! Тебе 30 лет, и ты живешь в Москве.

# Пример 2: Распаковка кортежа в функцию
def multiply(a, b, c):
    return a * b * c

# Кортеж с числами
numbers = (2, 3, 4)

# Распаковка кортежа в позиционные аргументы
result = multiply(*numbers)
print(result)  # Вывод: 24

# Пример 3: Использование распаковки с функцией, принимающей произвольное количество аргументов
def print_values(*args):
    for value in args:
        print(value)

# Список значений
values = [10, 20, 30, 40]

# Распаковка списка в произвольное количество аргументов
print_values(*values)
# Вывод:
# 10
# 20
# 30
# 40

# Итог
# Распаковка списков и кортежей в позиционные аргументы является мощным инструментом в Python, упрощающим передачу данных в функции.
# Использование оператора `*` позволяет эффективно и гибко работать с функциями, принимающими несколько аргументов, улучшая читаемость и поддерживаемость кода.
