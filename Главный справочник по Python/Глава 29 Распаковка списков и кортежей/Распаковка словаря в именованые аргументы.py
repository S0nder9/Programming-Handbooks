# Глава 29: Распаковка списков и кортежей - Распаковка словаря в именованные аргументы

# В Python распаковка (или разворачивание) позволяет легко присваивать элементы из коллекций, таких как списки, кортежи и словари,
# переменным или передавать их в функции.

# Распаковка списков и кортежей
# Это процесс извлечения элементов из списка или кортежа и присваивания их отдельным переменным.
# Это можно сделать с помощью оператора распаковки (*).

# Пример распаковки списка
numbers = [1, 2, 3]
a, b, c = numbers
print(a)  # Вывод: 1
print(b)  # Вывод: 2
print(c)  # Вывод: 3

# Пример распаковки кортежа
point = (4, 5)
x, y = point
print(x)  # Вывод: 4
print(y)  # Вывод: 5

# Распаковка словаря в именованные аргументы
# В Python вы можете распаковать словарь в именованные аргументы функции с помощью оператора **.
# Это позволяет передавать ключи словаря как имена аргументов и их значения как значения аргументов.

# Пример функции с именованными аргументами
def greet(name, age):
    print(f"Привет, {name}! Тебе {age} лет.")

# Создадим словарь с соответствующими ключами
person = {
    'name': 'Алексей',
    'age': 30
}

# Распакуем словарь в именованные аргументы функции
greet(**person)  # Вывод: Привет, Алексей! Тебе 30 лет.

# Зачем и где используется распаковка?
# Распаковка упрощает работу с функциями, которые принимают множество параметров.
# Она делает код более читаемым и позволяет легко передавать коллекции данных в функции.
# Это особенно полезно, когда данные хранятся в структурированном виде, например, в словарях или кортежах.

# Как использовать распаковку?
# Для распаковки списков и кортежей используйте оператор *.
# Для распаковки словарей в именованные аргументы используйте оператор **.

# Несколько примеров

# Пример распаковки списка в аргументы функции
def add(a, b, c):
    return a + b + c

numbers = [1, 2, 3]
result = add(*numbers)
print(result)  # Вывод: 6

# Пример распаковки кортежа в аргументы функции
coordinates = (10, 20)
def move(x, y):
    print(f"Перемещение в точку ({x}, {y})")

move(*coordinates)  # Вывод: Перемещение в точку (10, 20)

# Пример распаковки словаря в именованные аргументы функции
def display_info(name, age, city):
    print(f"Имя: {name}, Возраст: {age}, Город: {city}")

person_info = {
    'name': 'Мария',
    'age': 25,
    'city': 'Москва'
}

display_info(**person_info)  # Вывод: Имя: Мария, Возраст: 25, Город: Москва

# Итог
# Распаковка списков, кортежей и словарей является мощным инструментом в Python, который упрощает работу с коллекциями данных.
# Она позволяет эффективно и читаемо передавать элементы коллекций в функции, а также присваивать их переменным.
