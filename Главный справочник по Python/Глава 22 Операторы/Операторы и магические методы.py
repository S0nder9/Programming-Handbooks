# Глава 22: Операторы - Операторы и магические методы

# В Python операторы являются основными элементами языка, которые используются для выполнения различных операций над переменными и значениями.
# Операторы включают арифметические, логические, побитовые, сравнительные и другие.
# Для расширения функциональности операторов в пользовательских классах Python использует магические методы (или специальные методы).

# Магические методы - это методы с двумя подчеркиваниями до и после имени (например, __init__).
# Эти методы позволяют определять, как объекты класса будут реагировать на встроенные операторы и функции.

# Основные магические методы для операторов:

# __add__(self, other) - отвечает за поведение оператора + (сложение)
# __sub__(self, other) - отвечает за поведение оператора - (вычитание)
# __mul__(self, other) - отвечает за поведение оператора * (умножение)
# __truediv__(self, other) - отвечает за поведение оператора / (деление)
# __floordiv__(self, other) - отвечает за поведение оператора // (целочисленное деление)
# __mod__(self, other) - отвечает за поведение оператора % (остаток от деления)
# __pow__(self, other) - отвечает за поведение оператора ** (возведение в степень)
# __lt__(self, other) - отвечает за поведение оператора < (меньше)
# __le__(self, other) - отвечает за поведение оператора <= (меньше или равно)
# __eq__(self, other) - отвечает за поведение оператора == (равенство)
# __ne__(self, other) - отвечает за поведение оператора != (неравенство)
# __gt__(self, other) - отвечает за поведение оператора > (больше)
# __ge__(self, other) - отвечает за поведение оператора >= (больше или равно)

# Пример класса с магическими методами для операторов
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)

    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y)

    def __mul__(self, scalar):
        return Vector(self.x * scalar, self.y * scalar)

    def __truediv__(self, scalar):
        return Vector(self.x / scalar, self.y / scalar)

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __str__(self):
        return f"Vector({self.x}, {self.y})"

# Использование класса с магическими методами
v1 = Vector(2, 3)
v2 = Vector(4, 5)
print("v1:", v1)
print("v2:", v2)

v3 = v1 + v2
print("v1 + v2 =", v3)

v4 = v1 - v2
print("v1 - v2 =", v4)

v5 = v1 * 3
print("v1 * 3 =", v5)

v6 = v2 / 2
print("v2 / 2 =", v6)

print("v1 == v2:", v1 == v2)
print("v1 == Vector(2, 3):", v1 == Vector(2, 3))

# Итог
# Операторы и магические методы в Python позволяют расширять возможности стандартных операторов для пользовательских классов.
# Это делает классы более интуитивно понятными и удобными в использовании, поскольку вы можете использовать привычные операторы для работы с экземплярами своих классов.
# Понимание и использование магических методов является важным аспектом написания чистого и идиоматического кода на Python.
