# Глава 34: Объекты и классы

# Объекты с собственными атрибутами

# В объектно-ориентированном программировании (ООП) объекты являются фундаментальными единицами, которые объединяют данные и методы, работающие с этими данными.
# Класс служит шаблоном для создания объектов. Объекты, созданные из класса, называются экземплярами класса.
# Каждый объект может иметь собственные атрибуты, которые хранят данные, специфичные для этого объекта.

# Зачем используются объекты с собственными атрибутами?
# Объекты с собственными атрибутами позволяют инкапсулировать данные и поведение в одно целое.
# Это упрощает организацию кода и делает его более читаемым и управляемым.
# Атрибуты объектов позволяют хранить состояние каждого экземпляра класса.

# Как создаются объекты с собственными атрибутами?
# Объекты создаются путем определения класса и создания экземпляров этого класса.
# Атрибуты объектов задаются в методе __init__, который инициализирует новый объект.

# Пример создания класса и объектов с собственными атрибутами
class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
    
    def display_info(self):
        print(f"Автомобиль: {self.year} {self.make} {self.model}")

# Создание экземпляров класса Car
car1 = Car("Toyota", "Camry", 2020)
car2 = Car("Honda", "Accord", 2019)

# Доступ к атрибутам объектов и вызов метода
car1.display_info()  # Вывод: Автомобиль: 2020 Toyota Camry
car2.display_info()  # Вывод: Автомобиль: 2019 Honda Accord

# Пример изменения атрибутов объекта
car1.year = 2021
car1.display_info()  # Вывод: Автомобиль: 2021 Toyota Camry

# Итог
# Объекты с собственными атрибутами являются ключевым элементом объектно-ориентированного программирования в Python.
# Они позволяют создавать экземпляры классов с уникальными данными и методами, что делает код более структурированным и удобным для сопровождения.
