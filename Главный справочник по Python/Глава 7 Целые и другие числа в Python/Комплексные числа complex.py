# Глава 7: Целые и другие числа в Python

# Комплексные числа complex

# В Python есть встроенная поддержка комплексных чисел. Комплексное число состоит из двух частей: реальной и мнимой.
# Реальная часть представлена вещественным числом, а мнимая часть представлена числом с буквой 'j' (в математике часто используется 'i' для обозначения мнимой единицы).

# Как создавать комплексные числа
# Комплексное число можно создать, используя встроенную функцию complex() или записывая его непосредственно в виде 'a + bj'.

# Примеры создания комплексных чисел
z1 = complex(2, 3)  # 2 + 3j
z2 = 4 + 5j

# Доступ к реальной и мнимой части
# Реальная и мнимая части комплексного числа доступны через атрибуты real и imag.
real_part = z1.real
imaginary_part = z1.imag

# Операции с комплексными числами
# Комплексные числа поддерживают стандартные арифметические операции: сложение, вычитание, умножение и деление.

# Примеры арифметических операций
z3 = z1 + z2
z4 = z1 - z2
z5 = z1 * z2
z6 = z1 / z2

# Функция abs для комплексных чисел
# Функция abs() возвращает модуль (абсолютное значение) комплексного числа. Модуль комплексного числа определяется как sqrt(real^2 + imag^2).

# Пример использования функции abs
modulus_z1 = abs(z1)

# Примеры
print(f"Комплексное число z1: {z1}")
print(f"Комплексное число z2: {z2}")
print(f"Сложение: {z3}")
print(f"Вычитание: {z4}")
print(f"Умножение: {z5}")
print(f"Деление: {z6}")
print(f"Модуль z1: {modulus_z1}")

# Итог
# Комплексные числа в Python являются мощным инструментом для работы с числами, которые имеют как реальную, так и мнимую части.
# Они широко используются в различных областях науки и техники, таких как электротехника, теория сигналов, квантовая механика и многих других.
# Python предоставляет удобные средства для создания и манипулирования комплексными числами, что делает его отличным выбором для работы с такими типами данных.
