# Глава 15: Функция zip - Встроенная функция zip

# Встроенная функция zip в Python используется для объединения нескольких итерируемых объектов (таких как списки или кортежи) в один итератор, который возвращает кортежи.
# Это позволяет вам легко итерироваться по нескольким последовательностям одновременно.

# Как создается и используется функция zip?
# Функция zip() принимает один или несколько итерируемых объектов (например, списки, кортежи или строки) в качестве аргументов.
# Она возвращает итератор, который генерирует кортежи, где каждый кортеж содержит элементы из всех переданных итерируемых объектов, объединенных по их позициям.

# Например, если вы передадите два списка в zip, то первый элемент из первого списка будет объединен с первым элементом из второго списка в один кортеж, второй элемент из первого списка с вторым элементом из второго списка и так далее.

# Актуальность функции zip
# Функция zip очень полезна, когда вам нужно обработать несколько коллекций данных одновременно. Это может быть полезно в различных сценариях, таких как обработка данных из нескольких источников, объединение данных для отображения в пользовательском интерфейсе и др.

# Несколько примеров

# Пример 1: Основное использование функции zip
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']

# Объединяем два списка в один итератор, который возвращает кортежи
zipped = zip(list1, list2)

# Преобразуем итератор в список и выводим результат
zipped_list = list(zipped)
print("Пример 1: Объединение двух списков:", zipped_list)
# Вывод: [(1, 'a'), (2, 'b'), (3, 'c')]

# Пример 2: Использование zip с тремя списками
names = ['Alice', 'Bob', 'Charlie']
scores = [85, 90, 78]
grades = ['B', 'A', 'C']

# Объединяем три списка в один итератор, который возвращает кортежи
zipped_multiple = zip(names, scores, grades)

# Преобразуем итератор в список и выводим результат
zipped_multiple_list = list(zipped_multiple)
print("Пример 2: Объединение трех списков:", zipped_multiple_list)
# Вывод: [('Alice', 85, 'B'), ('Bob', 90, 'A'), ('Charlie', 78, 'C')]

# Пример 3: Использование zip для распаковки списка кортежей
zipped_data = [('Alice', 85), ('Bob', 90), ('Charlie', 78)]

# Распаковываем кортежи в два отдельных списка
names_unpacked, scores_unpacked = zip(*zipped_data)

print("Пример 3: Распаковка списка кортежей:")
print("Имена:", names_unpacked)
print("Оценки:", scores_unpacked)
# Вывод:
# Имена: ('Alice', 'Bob', 'Charlie')
# Оценки: (85, 90, 78)

# Пример 4: Объединение двух списков разной длины
list3 = [1, 2, 3, 4]
list4 = ['a', 'b', 'c']

# Объединяем два списка разной длины
zipped_unequal = zip(list3, list4)

# Преобразуем итератор в список и выводим результат
zipped_unequal_list = list(zipped_unequal)
print("Пример 4: Объединение двух списков разной длины:", zipped_unequal_list)
# Вывод: [(1, 'a'), (2, 'b'), (3, 'c')]

# Итог
# Функция zip является мощным инструментом для объединения нескольких итерируемых объектов в один итерируемый объект, который можно использовать в циклах и других операциях.
# Она актуальна и полезна в различных сценариях, связанных с обработкой данных, особенно когда требуется обработать несколько последовательностей данных одновременно.
# Знание функции zip и её возможностей позволяет писать более эффективный и чистый код.

