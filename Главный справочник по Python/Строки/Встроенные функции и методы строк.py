# Глава 6: Строки - Встроенные функции и методы строк

# В Python строки являются одним из самых часто используемых типов данных. 
# Они представляют собой последовательности символов и предоставляют множество встроенных функций и методов для манипуляции с текстом.

# Встроенные функции и методы строк
# Встроенные функции и методы строк предоставляют широкий спектр возможностей для работы с текстовыми данными. 
# Встроенные функции, такие как len(), помогают получить информацию о строке, в то время как методы строк позволяют изменять и анализировать строки.

# Зачем используются встроенные функции и методы строк?
# Встроенные функции и методы строк используются для выполнения различных операций над строками, таких как проверка их длины, изменение регистра символов, 
# поиск подстрок, замена частей строки, разделение строки на подстроки и объединение строк.

# Где используются встроенные функции и методы строк?
# Они используются повсеместно в программах, где необходимо обрабатывать текстовые данные. Например, в веб-разработке, обработке данных, автоматизации задач и многих других областях.

# Как использовать встроенные функции и методы строк?
# Встроенные функции применяются непосредственно к строкам. Методы строк вызываются через точечную нотацию от строкового объекта.

# Примеры использования встроенных функций и методов строк:

# Встроенные функции
# Функция len() возвращает длину строки
text = "Пример строки"
length = len(text)
print("Длина строки:", length)

# Функция str() преобразует объект в строку
number = 123
number_str = str(number)
print("Преобразованное число в строку:", number_str)

# Методы строк
# Метод upper() преобразует строку в верхний регистр
upper_case = text.upper()
print("Строка в верхнем регистре:", upper_case)

# Метод lower() преобразует строку в нижний регистр
lower_case = text.lower()
print("Строка в нижнем регистре:", lower_case)

# Метод find() ищет подстроку в строке и возвращает индекс ее первого вхождения
index = text.find("строки")
print("Индекс первого вхождения подстроки 'строки':", index)

# Метод replace() заменяет подстроку на другую подстроку
replaced_text = text.replace("Пример", "Демонстрация")
print("Измененная строка:", replaced_text)

# Метод split() разделяет строку по заданному разделителю и возвращает список подстрок
words = text.split(" ")
print("Список слов в строке:", words)

# Итог
# Встроенные функции и методы строк являются мощными инструментами для работы с текстовыми данными в Python.
# Понимание и умение использовать их позволяет эффективно манипулировать строками и решать широкий спектр задач.
