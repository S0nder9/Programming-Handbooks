# Глава 28: Обработка ошибок - Обработка ошибок

# Обработка ошибок в Python - это важная концепция, позволяющая управлять ситуациями, когда программа сталкивается с неожиданными или ошибочными условиями во время выполнения.
# В Python для обработки ошибок используются конструкции try, except, else и finally. Эти конструкции помогают перехватывать и обрабатывать исключения, которые могут возникать в процессе выполнения кода.

# Зачем используется обработка ошибок?
# Обработка ошибок позволяет вашему коду справляться с непредвиденными ситуациями и предотвращать аварийное завершение программы.
# Это важный аспект создания надежных и устойчивых программ, которые могут корректно работать в различных условиях.

# Как использовать обработку ошибок?
# Основные конструкции для обработки ошибок:
# - try: Блок кода, в котором вы пытаетесь выполнить операцию, которая может вызвать ошибку.
# - except: Блок кода, который выполняется, если в блоке try возникло исключение.
# - else: (Необязательный) Блок кода, который выполняется, если в блоке try не произошло исключений.
# - finally: (Необязательный) Блок кода, который выполняется в любом случае, независимо от того, возникло исключение или нет.

# Несколько примеров

# Пример 1: Простейший пример обработки ошибки при делении на ноль
try:
    numerator = 10
    denominator = 0
    result = numerator / denominator
except ZeroDivisionError:
    print("Ошибка: Деление на ноль невозможно.")
else:
    print("Результат деления:", result)
finally:
    print("Блок finally выполняется всегда.")

# Пример 2: Обработка нескольких типов исключений
try:
    number = int(input("Введите число: "))
    result = 10 / number
except ValueError:
    print("Ошибка: Введенное значение не является числом.")
except ZeroDivisionError:
    print("Ошибка: Деление на ноль невозможно.")
except Exception as e:
    print(f"Неизвестная ошибка: {e}")
else:
    print("Результат деления:", result)
finally:
    print("Блок finally выполняется всегда.")

# Пример 3: Использование блока finally для закрытия ресурсов
try:
    file = open("example.txt", "r")
    content = file.read()
    print(content)
except FileNotFoundError:
    print("Ошибка: Файл не найден.")
finally:
    file.close()
    print("Файл закрыт.")

# Пример 4: Создание собственного исключения
class CustomError(Exception):
    pass

def risky_function():
    raise CustomError("Произошла пользовательская ошибка.")

try:
    risky_function()
except CustomError as e:
    print(f"Поймано исключение: {e}")

# Итог
# Обработка ошибок в Python - это мощный инструмент для создания надежного кода. 
# Конструкции try, except, else и finally позволяют вам перехватывать ошибки, обрабатывать их и выполнять завершающие действия.
# Понимание и умение использовать обработку ошибок поможет вам создавать более стабильные и предсказуемые программы.

