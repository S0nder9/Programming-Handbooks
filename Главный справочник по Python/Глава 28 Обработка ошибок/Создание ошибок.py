# Глава 28: Обработка ошибок — Создание ошибок

# Обработка ошибок в Python — это важный аспект программирования, который позволяет вашим программам справляться с неожиданными ситуациями и предотвращать сбои.
# В Python вы можете создавать собственные ошибки, чтобы управлять исключениями в вашем коде более эффективно и информативно.

# Создание ошибок
# В Python ошибки (исключения) можно создавать с помощью встроенного механизма исключений. Для этого используется ключевое слово `raise`, которое позволяет выбросить исключение вручную.

# Зачем создавать ошибки?
# Создание собственных ошибок позволяет вам определить собственные условия, при которых программа должна прервать выполнение или сообщить о проблеме.
# Это помогает в разработке более надежных программ и в создании более информативных сообщений об ошибках для пользователя или разработчика.

# Как создать ошибку?
# Для создания собственной ошибки вы можете использовать уже существующие классы ошибок или создавать свои собственные классы ошибок, которые будут наследовать базовый класс Exception.

# Примеры

# Пример 1: Использование встроенного исключения ValueError
def divide_numbers(a, b):
    if b == 0:
        raise ValueError("Деление на ноль невозможно.")
    return a / b

try:
    result = divide_numbers(10, 0)
except ValueError as e:
    print(f"Ошибка: {e}")

# Пример 2: Создание собственного исключения
class CustomError(Exception):
    """Класс для пользовательских ошибок."""
    def __init__(self, message):
        super().__init__(message)

def perform_task(task):
    if task == "ошибка":
        raise CustomError("Произошла пользовательская ошибка.")
    return f"Задача '{task}' выполнена."

try:
    print(perform_task("ошибка"))
except CustomError as e:
    print(f"Ошибка: {e}")

# Пример 3: Использование исключения с аргументами
class InvalidAgeError(Exception):
    def __init__(self, age):
        super().__init__(f"Недопустимый возраст: {age}. Возраст должен быть положительным числом.")

def set_age(age):
    if age < 0:
        raise InvalidAgeError(age)
    print(f"Возраст установлен: {age}")

try:
    set_age(-1)
except InvalidAgeError as e:
    print(f"Ошибка: {e}")

# Итог
# Создание ошибок в Python позволяет вам управлять исключениями более эффективно, определяя собственные условия для возникновения ошибок и создавая пользовательские сообщения.
# Использование встроенных исключений и создание собственных классов исключений помогают делать код более читабельным и поддерживаемым, а также обеспечивают лучшую обработку ошибок.
