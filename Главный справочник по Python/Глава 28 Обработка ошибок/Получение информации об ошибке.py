# Глава 28: Обработка ошибок - Получение информации об ошибке

# В Python обработка ошибок осуществляется с помощью механизма исключений.
# Исключения позволяют вашему коду реагировать на ошибки и исключительные ситуации, которые могут возникнуть во время выполнения программы.

# Получение информации об ошибке
# Когда возникает исключение, вы можете получить различную информацию о нем, такую как тип ошибки, сообщение об ошибке и трассировка стека.
# Это помогает понять, что пошло не так и отладить ваш код.

# Основные компоненты обработки ошибок
# 1. Исключения: Основные классы исключений в Python включают Exception, ValueError, TypeError, и другие.
# 2. try-except блоки: С помощью конструкции try-except вы можете перехватывать исключения и обрабатывать их.
# 3. Метод traceback: Для получения детализированной информации об ошибке можно использовать встроенный модуль traceback.

# Пример 1: Основное использование try-except для обработки ошибок
try:
    # Код, который может вызвать исключение
    result = 10 / 0
except ZeroDivisionError as e:
    # Получаем информацию об ошибке
    print("Произошла ошибка:", e)

# Пример 2: Получение информации о типе ошибки и трассировке стека
import traceback

try:
    # Код, который может вызвать исключение
    result = 10 / 0
except ZeroDivisionError as e:
    # Получаем тип ошибки
    error_type = type(e).__name__
    # Получаем сообщение об ошибке
    error_message = str(e)
    # Получаем трассировку стека
    error_traceback = traceback.format_exc()

    print(f"Тип ошибки: {error_type}")
    print(f"Сообщение об ошибке: {error_message}")
    print(f"Трассировка стека: {error_traceback}")

# Пример 3: Использование исключений для отладки
def divide_numbers(a, b):
    try:
        return a / b
    except Exception as e:
        # Ловим любое исключение и выводим его информацию
        print("Произошла ошибка при делении:")
        print(f"Тип ошибки: {type(e).__name__}")
        print(f"Сообщение об ошибке: {e}")
        print(f"Трассировка стека: {traceback.format_exc()}")
        return None

divide_numbers(10, 0)

# Пример 4: Пользовательские исключения
class CustomError(Exception):
    """Класс для пользовательских исключений"""
    pass

try:
    # Генерируем пользовательское исключение
    raise CustomError("Это пользовательская ошибка")
except CustomError as e:
    print("Поймано пользовательское исключение:", e)

# Итог
# В Python вы можете получить информацию об ошибках с помощью конструкции try-except и встроенного модуля traceback.
# Знание того, как получать информацию об ошибках и как правильно их обрабатывать, позволяет улучшить качество кода и упростить отладку программ.

