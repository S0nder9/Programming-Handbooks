# Глава 36: Модули

# В Python модули являются важной частью языка, позволяя разделять код на логически независимые части.
# Модуль - это файл с расширением .py, содержащий Python код, который может быть импортирован и использован в других программах.

# Зачем используются модули?
# Модули позволяют:
# 1. Организовать код: разделение кода на различные файлы делает его более читабельным и управляемым.
# 2. Повторное использование кода: функции и классы, определенные в одном модуле, могут быть использованы в других модулях.
# 3. Избегать конфликтов имен: модули создают свои собственные пространства имен, что помогает избежать конфликтов имен переменных и функций.

# Как создать и использовать модуль?
# Чтобы создать модуль, достаточно создать файл с расширением .py и определить в нем функции, классы или переменные.
# Для использования модуля его необходимо импортировать с помощью ключевого слова import.

# Пример создания и использования модуля

# Создание модуля mymodule.py
# Файл mymodule.py
def greet(name):
    return f"Привет, {name}!"

def add(a, b):
    return a + b

# Импорт и использование модуля
# Основной файл main.py
import mymodule

# Вызов функции из модуля
print(mymodule.greet("Никита"))  # Вывод: Привет, Никита!
print(mymodule.add(5, 3))       # Вывод: 8

# Использование псевдонимов при импорте модулей
# Мы можем использовать ключевое слово as для назначения псевдонима модулю.
import mymodule as mm

print(mm.greet("Алекс"))  # Вывод: Привет, Алекс!
print(mm.add(10, 7))      # Вывод: 17

# Импортирование конкретных функций или классов из модуля
# Мы можем импортировать конкретные функции или классы из модуля, используя ключевое слово from.
from mymodule import greet, add

print(greet("Мария"))  # Вывод: Привет, Мария!
print(add(2, 4))       # Вывод: 6

# Итог
# Модули являются мощным средством для организации и повторного использования кода в Python.
# Они позволяют создавать более структурированные и управляемые программы, избегать конфликтов имен и улучшать читаемость кода.