# Глава 36: Модули - Что такое __main__ и __name__

# В Python модули являются основным способом структурирования кода. Каждый файл с расширением .py является модулем.
# В модулях используются специальные переменные __name__ и __main__ для управления выполнением кода.

# Что такое __name__?
# __name__ - это специальная переменная, которая присваивается каждому модулю при его загрузке.
# Если модуль загружается как основная программа, то __name__ получает значение '__main__'.
# Если модуль импортируется в другой модуль, то __name__ получает имя этого модуля.

# Что такое __main__?
# __main__ - это имя специального пространства имен, в котором выполняется верхний уровень скрипта.
# Когда модуль запускается напрямую, он получает имя '__main__', что позволяет выполнять код только в случае, если модуль запускается как основная программа.

# Зачем используются __main__ и __name__?
# Эти переменные используются для контроля выполнения кода. Они позволяют писать код, который может работать как при прямом запуске, так и при импорте в другой модуль.
# Это полезно для создания тестов и примеров использования внутри модулей, которые не будут выполняться при импорте модуля.

# Как использовать __main__ и __name__?
# Обычно в конце модуля добавляется следующий блок кода:
# if __name__ == "__main__":
#     # выполнение кода только при прямом запуске модуля
#     pass

# Несколько примеров

# Пример модуля example.py
def main():
    print("Этот код выполняется, только если запустить модуль напрямую.")

if __name__ == "__main__":
    main()

# Если запустить этот модуль напрямую, будет выведено сообщение: "Этот код выполняется, только если запустить модуль напрямую."
# Если импортировать этот модуль в другом модуле, код внутри блока if __name__ == "__main__": не будет выполнен.

# Итог
# Переменные __main__ и __name__ являются важными инструментами для управления выполнением кода в Python.
# Они позволяют писать модули, которые могут выполнять определенный код при прямом запуске и оставаться доступными для импорта и использования в других модулях.
# Это делает код более гибким и удобным для тестирования и повторного использования.
