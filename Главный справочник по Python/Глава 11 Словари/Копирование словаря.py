# Глава 11: Словари

# Копирование словаря

# В Python словарь (dict) является изменяемым типом данных, который хранит пары "ключ-значение".
# Иногда возникает необходимость создать копию словаря, чтобы изменить её, не затрагивая оригинальный словарь.
# В Python есть несколько способов копирования словарей, каждый из которых имеет свои особенности и применимость в различных ситуациях.

# Зачем и где используется копирование словаря?
# Копирование словаря используется, когда необходимо сохранить оригинальные данные неизменными, 
# в то время как производятся изменения в его копии. Это часто бывает полезно в функциях, где нужно работать с временными данными или при создании резервных копий данных.

# Как копировать словарь?
# Существует несколько способов копирования словаря в Python:

# 1. Поверхностное копирование с использованием метода copy()
# 2. Поверхностное копирование с использованием встроенной функции dict()
# 3. Глубокое копирование с использованием модуля copy

# Рассмотрим каждый способ подробно.

# 1. Поверхностное копирование с использованием метода copy()
original_dict = {'a': 1, 'b': 2, 'c': 3}
shallow_copy = original_dict.copy()
print("Оригинальный словарь:", original_dict)
print("Поверхностная копия:", shallow_copy)

# При поверхностном копировании создается новый словарь с копиями ссылок на объекты значений исходного словаря.
# Изменения в копии не затронут оригинальный словарь, если они касаются изменения значений верхнего уровня.
# Однако, если значения в словаре являются изменяемыми объектами (например, списками), изменения внутри этих объектов будут отражаться в обоих словарях.

original_dict['b'] = 5
print("Измененный оригинальный словарь:", original_dict)
print("Поверхностная копия после изменения оригинала:", shallow_copy)

original_dict['d'] = [1, 2, 3]
shallow_copy['d'].append(4)
print("Оригинальный словарь после изменения списка:", original_dict)
print("Поверхностная копия после изменения списка:", shallow_copy)

# 2. Поверхностное копирование с использованием встроенной функции dict()
another_shallow_copy = dict(original_dict)
print("Еще одна поверхностная копия:", another_shallow_copy)

# 3. Глубокое копирование с использованием модуля copy
import copy
deep_copy = copy.deepcopy(original_dict)
print("Глубокая копия:", deep_copy)

# Глубокое копирование создает полностью независимую копию оригинального словаря, включая все вложенные изменяемые объекты.
# Изменения в глубоких копиях не затрагивают оригинальный словарь и наоборот.

original_dict['d'].append(5)
print("Оригинальный словарь после изменения вложенного списка:", original_dict)
print("Глубокая копия после изменения вложенного списка в оригинале:", deep_copy)

# Итог
# Копирование словарей в Python позволяет работать с временными данными и создавать резервные копии, не изменяя оригинальный словарь.
# Поверхностное копирование подходит для большинства случаев, когда значения словаря неизменяемы.
# Глубокое копирование используется, когда словарь содержит вложенные изменяемые объекты, и требуется полная независимость копии от оригинала.

