# Глава 40: Работа с CSV файлами

# CSV (Comma-Separated Values) файлы широко используются для хранения табличных данных, где каждая строка представляет собой запись,
# а поля отделены друг от друга запятыми. В Python работа с CSV файлами упрощается благодаря стандартной библиотеке csv.

# Зачем используются CSV файлы?
# CSV файлы удобны для хранения и обмена табличными данными, такими как данные о продажах, списки пользователей или любую другую структурированную информацию.
# Их легко создавать, читать и обрабатывать, а также они поддерживаются большинством таблиц и баз данных.

# Как работать с CSV файлами в Python?
# Для работы с CSV файлами в Python используется модуль csv, который предоставляет удобные инструменты для чтения и записи данных.

# Чтение CSV файлов
# Для чтения CSV файла используется объект csv.reader(), который позволяет итерироваться по строкам файла.

# Пример чтения CSV файла:
import csv

def read_csv_file(file_path):
    with open(file_path, mode='r', newline='') as file:
        csv_reader = csv.reader(file)
        for row in csv_reader:
            print(row)

# Запись в CSV файл
# Для записи данных в CSV файл используется объект csv.writer(), который позволяет записывать строки в файл.

# Пример записи в CSV файл:
def write_csv_file(file_path, data):
    with open(file_path, mode='w', newline='') as file:
        csv_writer = csv.writer(file)
        csv_writer.writerows(data)

# Чтение CSV файлов с использованием словарей
# Модуль csv также предоставляет класс DictReader, который позволяет читать CSV файлы и представлять каждую строку в виде словаря.

# Пример чтения CSV файла с использованием DictReader:
def read_csv_file_as_dict(file_path):
    with open(file_path, mode='r', newline='') as file:
        csv_dict_reader = csv.DictReader(file)
        for row in csv_dict_reader:
            print(row)

# Запись в CSV файл с использованием словарей
# Для записи данных в CSV файл в виде словарей используется класс DictWriter.

# Пример записи в CSV файл с использованием DictWriter:
def write_csv_file_from_dict(file_path, fieldnames, data):
    with open(file_path, mode='w', newline='') as file:
        csv_dict_writer = csv.DictWriter(file, fieldnames=fieldnames)
        csv_dict_writer.writeheader()
        csv_dict_writer.writerows(data)

# Итог
# Работа с CSV файлами в Python проста и эффективна благодаря модулю csv. Вы можете легко читать и записывать данные в табличной форме,
# используя как простые списки, так и словари для представления данных. Это делает CSV файлы удобным форматом для обмена и хранения структурированных данных.

# Примеры использования функций
if __name__ == "__main__":
    # Пример данных для записи
    data = [
        ['Имя', 'Возраст', 'Город'],
        ['Иван', '25', 'Москва'],
        ['Анна', '30', 'Санкт-Петербург'],
        ['Петр', '22', 'Новосибирск']
    ]

    # Запись данных в CSV файл
    write_csv_file('example.csv', data)

    # Чтение данных из CSV файла
    read_csv_file('example.csv')

    # Пример данных для записи в виде словарей
    dict_data = [
        {'Имя': 'Иван', 'Возраст': '25', 'Город': 'Москва'},
        {'Имя': 'Анна', 'Возраст': '30', 'Город': 'Санкт-Петербург'},
        {'Имя': 'Петр', 'Возраст': '22', 'Город': 'Новосибирск'}
    ]

    # Поля (заголовки) для записи в CSV файл
    fieldnames = ['Имя', 'Возраст', 'Город']

    # Запись данных в CSV файл с использованием словарей
    write_csv_file_from_dict('example_dict.csv', fieldnames, dict_data)

    # Чтение данных из CSV файла с использованием словарей
    read_csv_file_as_dict('example_dict.csv')
