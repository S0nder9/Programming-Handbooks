# Глава 45: Работа с базой данных SQLite - Модуль SQLite3 и создание базы данных

# Введение
# SQLite - это легковесная, встроенная база данных, которая не требует отдельного сервера для работы.
# Она отлично подходит для небольших приложений, которые не нуждаются в полной серверной системе управления базами данных.
# В Python для работы с SQLite используется модуль sqlite3, который входит в стандартную библиотеку.

# Основные задачи модуля SQLite3:
# - Подключение к базе данных
# - Создание таблиц
# - Вставка данных
# - Извлечение данных
# - Обновление и удаление данных

# Как подключиться к базе данных?
# Для работы с SQLite нужно сначала подключиться к базе данных с помощью функции sqlite3.connect().
# Если база данных с указанным именем не существует, она будет создана автоматически.

# Пример подключения к базе данных:
import sqlite3

# Создание (или подключение к существующей) базы данных
conn = sqlite3.connect('example.db')

# Создание объекта-курсора, который будет выполнять SQL-запросы
cursor = conn.cursor()

# Создание таблиц
# Таблицы в базе данных SQLite создаются с помощью SQL-запроса CREATE TABLE.
# Этот запрос нужно выполнить через объект-курсор.

# Пример создания таблицы:
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    age INTEGER,
    email TEXT UNIQUE
)
''')

# Вставка данных
# После создания таблиц мы можем вставлять данные в базу данных с помощью SQL-запроса INSERT INTO.

# Пример вставки данных:
cursor.execute('''
INSERT INTO users (name, age, email)
VALUES ('Alice', 30, 'alice@example.com')
''')

# Фиксация изменений
# Когда вы выполняете изменения в базе данных (например, добавление новых записей), их нужно зафиксировать с помощью метода commit().
conn.commit()

# Извлечение данных
# Чтобы получить данные из базы, используется SQL-запрос SELECT.
# Результаты запроса возвращаются объектом-курсор и могут быть извлечены с помощью методов fetchall() или fetchone().

# Пример извлечения всех данных из таблицы:
cursor.execute('SELECT * FROM users')
rows = cursor.fetchall()

# Вывод всех записей
for row in rows:
    print(row)

# Обновление данных
# Для изменения существующих записей используется SQL-запрос UPDATE.

# Пример обновления данных:
cursor.execute('''
UPDATE users
SET age = 31
WHERE name = 'Alice'
''')
conn.commit()

# Удаление данных
# Для удаления записей используется SQL-запрос DELETE.

# Пример удаления данных:
cursor.execute('''
DELETE FROM users
WHERE name = 'Alice'
''')
conn.commit()

# Закрытие подключения
# После завершения работы с базой данных необходимо закрыть соединение с помощью метода close().

conn.close()

# Итог:
# SQLite – это мощный и легковесный инструмент для работы с базами данных, который не требует установки сервера.
# Модуль sqlite3 в Python позволяет легко создавать, изменять и извлекать данные из баз данных.
# Благодаря интуитивно понятным SQL-запросам и стандартным методам работы с базами данных, вы сможете эффективно управлять данными в своих приложениях.
