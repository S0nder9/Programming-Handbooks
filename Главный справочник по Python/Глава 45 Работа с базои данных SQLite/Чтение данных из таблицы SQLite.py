# Глава 45: Работа с базой данных SQLite

# Чтение данных из таблицы SQLite

# Введение:
# SQLite — это легковесная встроенная база данных, которая не требует отдельного сервера для работы.
# В Python для работы с SQLite используется встроенный модуль sqlite3.
# В этой главе мы рассмотрим, как подключиться к базе данных, выполнить запрос для чтения данных из таблицы, и как обрабатывать полученные данные.

# 1. Подключение к базе данных:
# Прежде чем читать данные, необходимо подключиться к базе данных.
# Это можно сделать с помощью функции sqlite3.connect(), передав ей путь к базе данных.

import sqlite3

# Подключаемся к базе данных
# Если файла базы данных не существует, он будет создан.
connection = sqlite3.connect('example.db')

# 2. Создание курсора:
# После того, как мы подключились к базе данных, необходимо создать объект-курсор.
# Курсор позволяет выполнять SQL-запросы и получать результаты.

cursor = connection.cursor()

# 3. Чтение данных из таблицы:
# Для того чтобы прочитать данные из таблицы, нужно выполнить SQL-запрос SELECT.
# Например, рассмотрим таблицу users с колонками id, name и age.

# Пример запроса для получения всех данных из таблицы users
cursor.execute("SELECT * FROM users")

# Метод fetchall() позволяет получить все строки, возвращенные запросом.
rows = cursor.fetchall()

# 4. Обработка полученных данных:
# После выполнения запроса и получения данных мы можем обрабатывать их в Python.
# Например, выведем каждую строку таблицы на экран.

for row in rows:
    print(row)

# 5. Пример использования с фильтрацией:
# Мы можем читать только те строки, которые соответствуют определенному условию.
# Например, выберем всех пользователей старше 25 лет.

cursor.execute("SELECT * FROM users WHERE age > 25")
filtered_rows = cursor.fetchall()

print("Пользователи старше 25 лет:")
for row in filtered_rows:
    print(row)

# 6. Закрытие соединения:
# После завершения работы с базой данных всегда рекомендуется закрывать соединение.

connection.close()

# Итог:
# Чтение данных из таблицы SQLite осуществляется с помощью выполнения SQL-запросов SELECT через курсор.
# Важно обрабатывать полученные данные и закрывать соединение после работы с базой.
# SQLite — это удобный инструмент для работы с базами данных в небольших и средних проектах, и его легко использовать в Python через модуль sqlite3.
