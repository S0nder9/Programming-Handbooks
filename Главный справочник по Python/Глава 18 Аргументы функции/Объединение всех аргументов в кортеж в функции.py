# Глава 18: Аргументы функции

# Объединение всех аргументов в кортеж в функции

# В Python вы можете объединить все переданные функции позиционные аргументы в кортеж с помощью специального синтаксиса *args.
# Это позволяет вашей функции принимать произвольное количество позиционных аргументов, что делает ее более гибкой и универсальной.

# Зачем используется объединение всех аргументов в кортеж?
# Это удобно, когда вы пишете функции, которые должны обрабатывать переменное количество аргументов.
# Например, функция суммирования может принимать любое количество чисел и возвращать их сумму.

# Как это сделать?
# Для этого при определении функции вы используете * перед именем аргумента.
# Внутри функции этот аргумент будет кортежем, содержащим все переданные ей позиционные аргументы.

# Несколько примеров

# Пример функции, которая принимает произвольное количество аргументов и выводит их
def print_args(*args):
    for arg in args:
        print(arg)

print_args(1, 2, 3, "hello", [4, 5, 6])

# Пример функции, которая принимает произвольное количество аргументов и возвращает их сумму
def sum_all(*args):
    return sum(args)

result = sum_all(1, 2, 3, 4, 5)
print("Сумма всех аргументов:", result)

# Пример функции, которая принимает обязательные и произвольные аргументы
def greet(greeting, *names):
    for name in names:
        print(f"{greeting}, {name}!")

greet("Hello", "Alice", "Bob", "Charlie")

# Итог
# Использование *args позволяет объединить все переданные функции позиционные аргументы в кортеж.
# Это делает ваши функции более гибкими и способными обрабатывать произвольное количество аргументов.
# Понимание и использование *args помогает писать более универсальные и адаптивные функции.
