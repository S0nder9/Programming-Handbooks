# Глава 18: Аргументы функции

# В Python функции могут принимать аргументы, которые позволяют передавать значения в функцию при ее вызове.
# Аргументы функции играют ключевую роль в создании гибкого и переиспользуемого кода.

# Аргументы могут быть следующих типов:
# 1. Позиционные аргументы
# 2. Именованные аргументы (или аргументы по ключу)
# 3. Аргументы по умолчанию
# 4. Произвольное количество аргументов
# 5. Произвольное количество именованных аргументов

# Позиционные аргументы
# Позиционные аргументы передаются функции в определенном порядке. Порядок, в котором передаются аргументы, имеет значение.

def greet(name, age):
    print(f"Привет, {name}! Тебе {age} лет.")

greet("Алиса", 30)

# Именованные аргументы
# Именованные аргументы передаются функции с указанием имени параметра. Это позволяет передавать аргументы в любом порядке.

greet(age=30, name="Алиса")

# Аргументы по умолчанию
# Вы можете задать значения по умолчанию для аргументов. Если аргумент не передается при вызове функции, используется значение по умолчанию.

def greet(name, age=25):
    print(f"Привет, {name}! Тебе {age} лет.")

greet("Боб")  # Используется значение по умолчанию для возраста
greet("Чарли", 35)  # Переопределяется значение по умолчанию

# Произвольное количество аргументов
# Используя *, вы можете передавать функции произвольное количество позиционных аргументов.

def greet(*names):
    for name in names:
        print(f"Привет, {name}!")

greet("Алиса", "Боб", "Чарли")

# Произвольное количество именованных аргументов
# Используя **, вы можете передавать функции произвольное количество именованных аргументов.

def greet(**kwargs):
    for key, value in kwargs.items():
        print(f"{key} -> {value}")

greet(name="Алиса", age=30, city="Москва")

# Комбинирование различных типов аргументов
# Вы можете комбинировать разные типы аргументов в одной функции. Однако, необходимо соблюдать определенный порядок:
# позиционные аргументы, *args, аргументы по умолчанию, **kwargs.

def complex_function(pos1, pos2, *args, kwarg1="default", kwarg2="default", **kwargs):
    print(f"Позиционные аргументы: {pos1}, {pos2}")
    print(f"Произвольные аргументы: {args}")
    print(f"Именованные аргументы с значением по умолчанию: {kwarg1}, {kwarg2}")
    print(f"Произвольные именованные аргументы: {kwargs}")

complex_function(1, 2, 3, 4, 5, kwarg1="special", extra1="extra1", extra2="extra2")

# Итог
# Аргументы функции в Python обеспечивают гибкость и мощь при написании кода.
# Понимание различных типов аргументов и способов их использования позволяет создавать функции, которые легко адаптируются к различным сценариям использования.
