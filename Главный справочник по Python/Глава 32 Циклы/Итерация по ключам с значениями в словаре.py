# Глава 32: Циклы - Итерация по ключам с значениями в словаре

# В Python словарь (dict) представляет собой коллекцию пар "ключ-значение".
# Словари позволяют хранить данные, ассоциированные с уникальными ключами.
# Часто требуется итерировать по словарю, чтобы получить доступ к его ключам и значениям.

# Зачем использовать итерацию по ключам и значениям в словаре?
# Итерация по ключам и значениям позволяет легко обработать все элементы словаря.
# Это может быть полезно в самых разных сценариях, например, при анализе данных, форматировании вывода или при манипуляциях с данными.

# Как итерировать по ключам и значениям в словаре?
# В Python для итерации по ключам и значениям в словаре используется метод items(), который возвращает представление элементов словаря в виде пар (ключ, значение).

# Пример:
# Создание словаря
my_dict = {
    'name': 'Alice',
    'age': 25,
    'city': 'New York'
}

# Итерация по ключам и значениям
for key, value in my_dict.items():
    print(f"Ключ: {key}, Значение: {value}")

# Разбираем пример:
# В этом примере создается словарь с тремя парами "ключ-значение".
# Затем используется цикл for для итерации по этим парам, при этом каждый ключ и значение выводятся на экран.

# Другие полезные операции с элементами словаря:
# Иногда может быть полезно итерировать только по ключам или только по значениям.
# Для этого можно использовать методы keys() и values() соответственно.

# Пример итерации только по ключам:
print("Итерация по ключам:")
for key in my_dict.keys():
    print(f"Ключ: {key}")

# Пример итерации только по значениям:
print("Итерация по значениям:")
for value in my_dict.values():
    print(f"Значение: {value}")

# Итог:
# Итерация по ключам и значениям в словаре с помощью метода items() позволяет легко и эффективно обрабатывать все элементы словаря.
# Понимание этой концепции важно для работы с коллекциями данных в Python, так как словари являются одним из самых мощных и часто используемых типов данных.
