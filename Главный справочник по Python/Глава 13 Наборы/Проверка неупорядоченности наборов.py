# Глава 13: Наборы - Проверка неупорядоченности наборов

# Наборы (sets) в Python представляют собой коллекции, не содержащие дубликатов, что делает их полезными для проверки членства (наличия элементов)
# и выполнения математических операций, таких как пересечение, объединение и разность.

# Одной из ключевых особенностей наборов является их неупорядоченность. Это означает, что элементы в наборе не имеют определенного порядка.
# В отличие от списков или кортежей, порядок элементов в наборе не фиксирован, и при каждом доступе к набору порядок элементов может отличаться.

# Зачем проверять неупорядоченность наборов?
# Проверка неупорядоченности наборов важна, чтобы напомнить, что операции с наборами не зависят от порядка элементов.
# Это позволяет более эффективно выполнять операции по сравнению с упорядоченными коллекциями, такими как списки.

# Как создавать и использовать наборы
# Наборы создаются с помощью фигурных скобок {} или функции set(). Поскольку наборы не содержат дубликатов, добавление существующего элемента в набор не изменяет его.

# Пример создания набора
my_set = {1, 2, 3, 4, 5}
print("Набор:", my_set)

# Пример создания пустого набора и добавления элементов
empty_set = set()
empty_set.add(1)
empty_set.add(2)
empty_set.add(3)
print("Пустой набор после добавления элементов:", empty_set)

# Проверка неупорядоченности
# При каждом вызове print() для набора порядок элементов может отличаться
print("Набор:", my_set)
print("Пустой набор после добавления элементов:", empty_set)

# Несколько примеров проверки неупорядоченности наборов

# Пример 1: создание и проверка набора
example_set = {3, 1, 4, 1, 5, 9, 2}
print("Пример набора:", example_set)

# Пример 2: добавление элементов в набор
example_set.add(6)
example_set.add(5)
print("Набор после добавления элементов:", example_set)

# Пример 3: удаление элементов из набора
example_set.remove(3)
print("Набор после удаления элемента:", example_set)

# Итог
# Наборы в Python - это неупорядоченные коллекции уникальных элементов, что делает их полезными для проверки членства и выполнения математических операций.
# Неупорядоченность наборов означает, что порядок элементов не фиксирован и может отличаться при каждом доступе к набору.
# Понимание и использование неупорядоченности наборов помогает создавать более эффективные программы для работы с уникальными данными.

