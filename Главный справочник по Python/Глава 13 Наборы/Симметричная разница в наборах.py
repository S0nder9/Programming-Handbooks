# Глава 13: Наборы - Симметричная разница в наборах

# В Python наборы (sets) - это неупорядоченные коллекции уникальных элементов. 
# Они полезны для выполнения различных операций с элементами, таких как объединение, пересечение и разница.

# Симметричная разница в наборах
# Симметричная разница между двумя наборами возвращает новый набор, содержащий элементы, которые присутствуют только в одном из наборов, но не в обоих.
# Это означает, что симметричная разница удаляет все общие элементы из обоих наборов и возвращает оставшиеся элементы.

# В Python симметричная разница может быть вычислена с помощью метода symmetric_difference() или оператора ^.

# Зачем используется симметричная разница?
# Симметричная разница полезна, когда нужно найти элементы, которые уникальны для каждого из двух наборов.
# Это может быть применимо, например, при сравнении двух списков уникальных пользователей, чтобы определить, кто не является общим.

# Как создать наборы и вычислить симметричную разницу?
# Наборы создаются с помощью фигурных скобок {} или функции set().
# Симметричная разница может быть вычислена с помощью метода symmetric_difference() или оператора ^.

# Несколько примеров

# Пример создания наборов
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}

# Вычисление симметричной разницы с использованием метода symmetric_difference()
sym_diff_method = set1.symmetric_difference(set2)
print("Симметричная разница (метод):", sym_diff_method)

# Вычисление симметричной разницы с использованием оператора ^
sym_diff_operator = set1 ^ set2
print("Симметричная разница (оператор):", sym_diff_operator)

# Пример использования в реальной задаче
# Списки пользователей двух разных систем
users_system1 = {"Alice", "Bob", "Charlie"}
users_system2 = {"Charlie", "David", "Edward"}

# Найти пользователей, которые уникальны для каждой системы
unique_users = users_system1.symmetric_difference(users_system2)
print("Уникальные пользователи:", unique_users)

# Итог
# Симметричная разница в наборах - это мощный инструмент для работы с уникальными элементами в коллекциях.
# Она позволяет легко определить элементы, которые присутствуют только в одном из двух наборов.
# Знание и использование этой операции помогает эффективно работать с данными и решать задачи, связанные с уникальностью элементов.

