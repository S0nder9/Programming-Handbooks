# Глава 13: Наборы - Методы наборов

# Наборы (sets) в Python - это неупорядоченные коллекции уникальных элементов.
# Наборы используются для хранения элементов, где каждый элемент уникален и порядок не имеет значения.
# Они позволяют выполнять математические операции над множествами, такие как объединение, пересечение и разность.

# Методы наборов предоставляют множество возможностей для работы с наборами.
# Рассмотрим основные методы:

# 1. add(element)
# Добавляет элемент в набор. Если элемент уже существует, ничего не происходит.
my_set = {1, 2, 3}
my_set.add(4)
print("После добавления элемента 4:", my_set)  # {1, 2, 3, 4}

# 2. remove(element)
# Удаляет элемент из набора. Если элемента нет, вызывает ошибку KeyError.
my_set.remove(4)
print("После удаления элемента 4:", my_set)  # {1, 2, 3}

# 3. discard(element)
# Удаляет элемент из набора, если он существует. В отличие от remove, не вызывает ошибку, если элемента нет.
my_set.discard(3)
print("После удаления элемента 3 с помощью discard:", my_set)  # {1, 2}

# 4. pop()
# Удаляет и возвращает случайный элемент из набора. Если набор пуст, вызывает ошибку KeyError.
element = my_set.pop()
print("Удаленный элемент:", element)
print("Набор после удаления случайного элемента:", my_set)

# 5. clear()
# Удаляет все элементы из набора.
my_set.clear()
print("После очистки набора:", my_set)  # set()

# 6. union(*others)
# Возвращает новый набор, содержащий все элементы из исходного набора и всех других переданных наборов.
set1 = {1, 2, 3}
set2 = {3, 4, 5}
union_set = set1.union(set2)
print("Объединение set1 и set2:", union_set)  # {1, 2, 3, 4, 5}

# 7. intersection(*others)
# Возвращает новый набор, содержащий только общие элементы исходного набора и всех других переданных наборов.
intersection_set = set1.intersection(set2)
print("Пересечение set1 и set2:", intersection_set)  # {3}

# 8. difference(*others)
# Возвращает новый набор, содержащий элементы, которые есть в исходном наборе, но отсутствуют в других переданных наборах.
difference_set = set1.difference(set2)
print("Разность set1 и set2:", difference_set)  # {1, 2}

# 9. symmetric_difference(other)
# Возвращает новый набор, содержащий элементы, которые есть в одном из наборов, но не в обоих.
symmetric_difference_set = set1.symmetric_difference(set2)
print("Симметричная разность set1 и set2:", symmetric_difference_set)  # {1, 2, 4, 5}

# 10. issubset(other)
# Возвращает True, если все элементы набора содержатся в другом наборе.
subset_set = {1, 2}
is_subset = subset_set.issubset(set1)
print("Является ли subset_set подмножеством set1:", is_subset)  # True

# 11. issuperset(other)
# Возвращает True, если все элементы другого набора содержатся в исходном наборе.
is_superset = set1.issuperset(subset_set)
print("Является ли set1 надмножеством subset_set:", is_superset)  # True

# 12. isdisjoint(other)
# Возвращает True, если наборы не имеют общих элементов.
set3 = {5, 6, 7}
is_disjoint = set1.isdisjoint(set3)
print("Не имеют ли set1 и set3 общих элементов:", is_disjoint)  # True

# Итог
# Методы наборов в Python предоставляют мощные инструменты для работы с уникальными коллекциями элементов.
# Используя эти методы, вы можете легко манипулировать наборами и выполнять над ними различные операции, что делает их полезными в многих сценариях программирования.





















a = {"abc", "d", "f", "y"}
b = {"a", "f", "d"}

print(a.symmetric_difference(b))