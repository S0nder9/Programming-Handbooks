# Глава 33: Циклы - Генераторы

# Генераторы в Python

# Генераторы - это особый вид итераторов в Python, которые позволяют создавать последовательности значений "на лету" (on the fly),
# то есть по мере их запроса, вместо того чтобы хранить их в памяти целиком. Это делает генераторы эффективными с точки зрения памяти.

# Генераторы создаются с использованием функции или выражения генератора.
# В функции генератора используется ключевое слово 'yield' для возврата значений по одному, при каждом вызове.

# Зачем использовать генераторы?
# Генераторы полезны, когда вы работаете с большими данными или бесконечными последовательностями, где создание полного списка всех элементов было бы неэффективным по памяти.
# Они позволяют улучшить производительность и экономить память, создавая значения только тогда, когда они необходимы.

# Как создается генератор?
# Генератор создается либо с помощью функции генератора, которая использует ключевое слово 'yield', либо с помощью генераторного выражения.

# Функция генератора:
def my_generator():
    yield 1
    yield 2
    yield 3

# Использование генератора:
gen = my_generator()
print(next(gen))  # Вывод: 1
print(next(gen))  # Вывод: 2
print(next(gen))  # Вывод: 3

# Генераторное выражение:
gen_exp = (x * x for x in range(5))
for value in gen_exp:
    print(value)  # Вывод: 0, 1, 4, 9, 16

# Примеры использования генераторов

# Пример 1: Генератор для чтения большого файла построчно
def read_large_file(file_path):
    with open(file_path, 'r') as file:
        for line in file:
            yield line

# Использование:
# for line in read_large_file('large_file.txt'):
#     process(line)

# Пример 2: Генератор для создания бесконечной последовательности чисел Фибоначчи
def fibonacci_sequence():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# Использование:
fib = fibonacci_sequence()
print(next(fib))  # Вывод: 0
print(next(fib))  # Вывод: 1
print(next(fib))  # Вывод: 1
print(next(fib))  # Вывод: 2

# Итог
# Генераторы в Python представляют собой мощный инструмент для создания последовательностей значений на лету, что делает их эффективными с точки зрения памяти.
# Они особенно полезны для работы с большими объемами данных и бесконечными последовательностями.
# Понимание и использование генераторов помогает писать более эффективный и производительный код.
