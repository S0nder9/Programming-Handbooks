# Глава 33: Циклы - Генераторы в сокращенном for in

# В Python существует мощный способ создания списков, множеств и словарей с использованием сокращенного синтаксиса for in,
# который называется генераторами. Генераторы позволяют создавать новые коллекции на основе существующих,
# применяя к ним условия и преобразования.

# Генераторы списков
# Генераторы списков позволяют создавать списки на лету с помощью выражения в квадратных скобках.
# Синтаксис: [expression for item in iterable if condition]

# Пример создания списка квадратов чисел от 0 до 9
squares = [x**2 for x in range(10)]
print("Список квадратов чисел от 0 до 9:", squares)

# Генераторы множеств
# Генераторы множеств похожи на генераторы списков, но создают множества вместо списков.
# Синтаксис: {expression for item in iterable if condition}

# Пример создания множества квадратов чисел от 0 до 9
unique_squares = {x**2 for x in range(10)}
print("Множество квадратов чисел от 0 до 9:", unique_squares)

# Генераторы словарей
# Генераторы словарей позволяют создавать словари с использованием выражений внутри фигурных скобок.
# Синтаксис: {key_expression: value_expression for item in iterable if condition}

# Пример создания словаря, где ключ - число, а значение - его квадрат
squares_dict = {x: x**2 for x in range(10)}
print("Словарь квадратов чисел от 0 до 9:", squares_dict)

# Генераторы с условиями
# В генераторах можно использовать условия для фильтрации элементов.
# Это позволяет создавать коллекции, содержащие только те элементы, которые удовлетворяют заданным условиям.

# Пример создания списка четных чисел от 0 до 9
even_numbers = [x for x in range(10) if x % 2 == 0]
print("Список четных чисел от 0 до 9:", even_numbers)

# Итог
# Генераторы в сокращенном for in предоставляют удобный и компактный способ создания новых коллекций на основе существующих.
# Они позволяют применять условия и преобразования к элементам коллекций, делая код более выразительным и читаемым.
