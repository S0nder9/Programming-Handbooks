# Глава 38: Работа с файлами

# Работа с файлами является важной частью программирования, так как позволяет сохранять данные между запусками программы,
# а также читать данные из внешних источников. В Python работа с файлами осуществляется с помощью встроенных функций и методов.

# Открытие и закрытие файлов
# Для работы с файлом его необходимо сначала открыть. Это можно сделать с помощью функции open().
# Функция open() принимает два основных аргумента: имя файла и режим его открытия.

# Основные режимы открытия файлов:
# 'r' - чтение (по умолчанию)
# 'w' - запись (существующий файл с таким именем будет перезаписан)
# 'a' - добавление (данные будут добавлены в конец файла)
# 'b' - бинарный режим (используется для работы с бинарными файлами)
# 't' - текстовый режим (по умолчанию)

# После завершения работы с файлом его необходимо закрыть, чтобы освободить ресурсы.
# Это можно сделать с помощью метода close().

# Чтение из файла
# Для чтения содержимого файла можно использовать методы read(), readline() или readlines().

# Пример чтения из файла:
file_path = 'example.txt'

# Открытие файла в режиме чтения
file = open(file_path, 'r')

# Чтение всего содержимого файла
content = file.read()
print("Содержимое файла:")
print(content)

# Закрытие файла
file.close()

# Запись в файл
# Для записи данных в файл можно использовать методы write() или writelines().

# Пример записи в файл:
file_path = 'output.txt'

# Открытие файла в режиме записи
file = open(file_path, 'w')

# Запись строки в файл
file.write("Это пример записи в файл.\n")
file.write("Python позволяет легко работать с файлами.\n")

# Закрытие файла
file.close()

# Использование конструкции with
# В Python рекомендуется использовать конструкцию with для работы с файлами, так как она автоматически закрывает файл
# после завершения блока кода, даже если в процессе выполнения возникает ошибка.

# Пример использования конструкции with для чтения из файла:
with open('example.txt', 'r') as file:
    content = file.read()
    print("Содержимое файла с использованием 'with':")
    print(content)

# Пример использования конструкции with для записи в файл:
with open('output.txt', 'a') as file:
    file.write("Добавление новой строки в файл с использованием 'with'.\n")

# Чтение и запись бинарных файлов
# Для работы с бинарными файлами необходимо открывать их в бинарном режиме ('b').

# Пример чтения бинарного файла:
binary_file_path = 'example.bin'

with open(binary_file_path, 'rb') as file:
    binary_content = file.read()
    print("Содержимое бинарного файла:")
    print(binary_content)

# Пример записи в бинарный файл:
binary_output_path = 'output.bin'

with open(binary_output_path, 'wb') as file:
    binary_data = b'\x00\x01\x02\x03'
    file.write(binary_data)

# Итог
# Работа с файлами в Python включает в себя открытие файлов, чтение из них, запись в них и закрытие файлов.
# Использование конструкции with упрощает управление файлами и предотвращает утечки ресурсов.
# Понимание работы с текстовыми и бинарными файлами позволяет эффективно работать с различными видами данных.
