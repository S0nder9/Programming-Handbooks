# Глава 38: Работа с файлами - Методы класса Path

# В Python работа с файлами и директориями может быть значительно упрощена с использованием класса Path из модуля pathlib.
# Класс Path предоставляет удобные методы для выполнения различных операций с файлами и директориями, таких как создание, удаление, копирование и перемещение файлов, а также работа с путями к файлам.

# Зачем используется класс Path?
# Класс Path используется для работы с путями к файлам и директориям в удобной и платформо-независимой форме.
# Он заменяет использование устаревших модулей os и os.path, предоставляя более интуитивный и современный интерфейс для работы с файловой системой.

# Как создать экземпляр класса Path?
# Для создания экземпляра класса Path необходимо импортировать модуль pathlib и использовать его следующим образом:
from pathlib import Path

# Пример создания объекта Path для файла
file_path = Path("example.txt")

# Методы класса Path
# 1. exists(): Проверяет, существует ли файл или директория.
print(file_path.exists())  # False, если файл "example.txt" не существует

# 2. is_file(): Проверяет, является ли путь файлом.
print(file_path.is_file())  # False, если "example.txt" не является файлом

# 3. is_dir(): Проверяет, является ли путь директорией.
print(file_path.is_dir())  # False, если "example.txt" не является директорией

# 4. mkdir(): Создает директорию по указанному пути.
dir_path = Path("example_dir")
dir_path.mkdir(exist_ok=True)  # Создает директорию "example_dir", если она не существует

# 5. rmdir(): Удаляет пустую директорию по указанному пути.
dir_path.rmdir()  # Удаляет директорию "example_dir"

# 6. rename(): Переименовывает файл или директорию.
file_path = Path("example.txt")
new_file_path = file_path.rename("new_example.txt")  # Переименовывает "example.txt" в "new_example.txt"

# 7. unlink(): Удаляет файл по указанному пути.
new_file_path.unlink()  # Удаляет файл "new_example.txt"

# 8. read_text(): Читает содержимое файла как текст.
file_path = Path("example.txt")
file_path.write_text("Hello, world!")  # Записывает текст в файл "example.txt"
print(file_path.read_text())  # Читает и выводит содержимое файла "example.txt"

# 9. write_text(): Записывает текст в файл.
file_path.write_text("Привет, мир!")  # Перезаписывает содержимое файла "example.txt"

# 10. glob(): Находит все пути в соответствии с заданным шаблоном.
for txt_file in Path(".").glob("*.txt"):
    print(txt_file)  # Выводит все файлы с расширением ".txt" в текущей директории

# 11. iterdir(): Итерация по всем файлам и директориям в указанной директории.
for item in Path(".").iterdir():
    print(item)  # Выводит все файлы и директории в текущей директории

# Итог
# Методы класса Path из модуля pathlib предоставляют удобные и мощные инструменты для работы с файлами и директориями в Python.
# Использование класса Path упрощает управление файловой системой, делая код более читаемым и платформо-независимым.
