# Глава 1: Введение - Создание виртуального окружения проекта в Python

# Виртуальное окружение в Python позволяет изолировать зависимости проекта от глобальных пакетов, установленных в системе.
# Это особенно полезно, когда вам нужно использовать разные версии библиотек для различных проектов или избежать конфликтов между зависимостями.

# В этом разделе мы рассмотрим, как создать виртуальное окружение для вашего проекта с использованием модуля venv.

# Создание виртуального окружения
# Для создания виртуального окружения используйте модуль venv, который встроен в Python 3.3 и выше.
# Процесс включает создание директории для окружения и активацию этого окружения.

# Шаги для создания виртуального окружения:
# 1. Откройте терминал (командную строку).
# 2. Перейдите в директорию вашего проекта.
# 3. Выполните команду для создания виртуального окружения.

# Пример создания виртуального окружения:
# Перейдите в директорию вашего проекта в терминале и выполните следующую команду:

# Для Windows:
# python -m venv myenv

# Для macOS и Linux:
# python3 -m venv myenv

# Эта команда создаст директорию 'myenv' в вашей проектной директории, содержащую исполняемые файлы Python и копию библиотеки pip.

# Активация виртуального окружения
# После создания виртуального окружения его нужно активировать, чтобы использовать изолированные зависимости.

# Для активации виртуального окружения выполните следующую команду:

# Для Windows:
# myenv\Scripts\activate

# Для macOS и Linux:
# source myenv/bin/activate

# После активации вы увидите название вашего виртуального окружения в начале командной строки, что указывает на то, что виртуальное окружение активно.

# Установка зависимостей
# После активации виртуального окружения вы можете устанавливать зависимости, используя pip, который теперь будет работать внутри этого окружения.

# Например, чтобы установить библиотеку requests, выполните:
# pip install requests

# Деактивация виртуального окружения
# Чтобы деактивировать виртуальное окружение и вернуться к глобальным настройкам Python, выполните команду:
# deactivate

# Итог
# Виртуальное окружение является важным инструментом для управления зависимостями проекта в Python.
# Оно обеспечивает изоляцию проекта, предотвращает конфликты версий библиотек и делает ваш проект более переносимым и управляемым.
# Использование виртуальных окружений рекомендуется для всех Python проектов, чтобы обеспечить их стабильность и независимость.
