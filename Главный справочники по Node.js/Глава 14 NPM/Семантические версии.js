// Глава 14: NPM - Семантические версии в Node.js

// Семантическое версионирование (Semantic Versioning или SemVer) - это стандарт для назначения версий пакетам в Node.js.
// Семантические версии состоят из трех чисел, разделенных точками, например: 1.2.3

// Основные принципы семантического версионирования:
// Каждое число в версии имеет свое значение и важность:
// - Major (основная версия): увеличивается при внесении изменений, несовместимых с предыдущими версиями.
// - Minor (минорная версия): увеличивается при добавлении новых функций, которые не ломают совместимость с предыдущими версиями.
// - Patch (патч): увеличивается при исправлении ошибок, не влияющих на совместимость с предыдущими версиями.

// Пример:
// Версия 2.3.4 означает:
// - 2: Основная версия
// - 3: Минорная версия
// - 4: Патч

// Примеры изменения версий:
// - Если версия была 1.2.3 и исправили баг, новая версия будет 1.2.4
// - Если версия была 1.2.3 и добавили новую функцию, новая версия будет 1.3.0
// - Если версия была 1.2.3 и внесли изменения, несовместимые с предыдущими версиями, новая версия будет 2.0.0

// Использование семантических версий в package.json:
// В файле package.json версии пакетов указываются с использованием семантического версионирования.
// Это позволяет управлять зависимостями и обновлять их безопасным образом.

{
    "name": "my-project",
    "version": "1.0.0",
    "dependencies": {
      "express": "^4.17.1"
    }
  }
  
  // В этом примере:
  // - "express": "^4.17.1" означает, что можно использовать любую версию Express, начиная с 4.17.1 и до, но не включая 5.0.0
  // - Символ ^ (каретка) перед версией означает, что можно обновляться до любой версии, не изменяя основную версию (Major).
  
  // Другие символы для управления версиями:
  // - Тильда (~): позволяет обновляться до патч-версий. Например, "express": "~4.17.1" разрешает обновление до 4.17.x, но не до 4.18.0
  // - Звездочка (*): позволяет использовать любую версию пакета. Например, "express": "*" разрешает установку любой версии Express
  
  // Пример использования символов:
  {
    "dependencies": {
      "express": "^4.17.1", // Любая версия начиная с 4.17.1 до 5.0.0
      "lodash": "~4.17.20", // Любая версия начиная с 4.17.20 до 4.18.0
      "axios": "0.21.1", // Точная версия 0.21.1
      "moment": "*" // Любая версия
    }
  }
  
  // Итог:
  // Семантическое версионирование помогает поддерживать стабильность проектов, управляя зависимостями и их обновлениями.
  // Используйте его для обозначения изменений в вашем коде и для управления версиями пакетов в Node.js.
  