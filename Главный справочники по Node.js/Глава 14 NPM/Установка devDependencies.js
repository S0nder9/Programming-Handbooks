// Глава 14: NPM - Установка devDependencies в Node.js

// В Node.js devDependencies (зависимости для разработки) - это пакеты, которые необходимы только во время разработки проекта.
// Они не требуются для работы приложения в продакшн-среде, поэтому их не включают в конечную сборку.

// Пример использования devDependencies:

// 1. Установка пакета в качестве devDependency:
// Для установки пакета как devDependency используется флаг `--save-dev` или сокращенно `-D`.

$ npm install jest --save-dev
// или
$ npm install jest -D

// После установки пакет будет добавлен в раздел devDependencies в файле package.json:

{
  "name": "my-project",
  "version": "1.0.0",
  "devDependencies": {
    "jest": "^26.6.0"
  }
}

// 2. Использование devDependencies в проекте:
// Пакеты, установленные как devDependencies, могут использоваться для тестирования, сборки и других задач, связанных с разработкой.
// Например, jest - это популярная библиотека для тестирования JavaScript.

"scripts": {
  "test": "jest"
}

// 3. Установка всех зависимостей:
// Команда `npm install` установит все зависимости, включая как dependencies, так и devDependencies, указанные в package.json.

$ npm install

// 4. Установка только продакшн-зависимостей:
// Чтобы установить только те пакеты, которые необходимы для продакшн-среды, используется флаг `--production`.

$ npm install --production

// В этом случае будут установлены только пакеты из раздела dependencies, а devDependencies будут проигнорированы.

// Итог:
// Использование devDependencies позволяет отделить зависимости, необходимые для разработки, от тех, которые требуются для продакшн-среды.
// Это помогает сократить размер конечной сборки и улучшить производительность приложения.
