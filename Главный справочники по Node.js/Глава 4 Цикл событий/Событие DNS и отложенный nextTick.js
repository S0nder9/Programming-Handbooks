// Глава 4: Цикл событий - Событие DNS и отложенный nextTick

// В Node.js цикл событий (event loop) является основой асинхронной модели ввода-вывода.
// Он обрабатывает события и выполняет задачи в фонах, не блокируя основной поток исполнения.

// Событие DNS (Domain Name System):
// При выполнении сетевых операций, таких как HTTP запросы, Node.js часто требуется преобразовать доменные имена в IP-адреса через DNS.
// DNS-запросы могут выполняться асинхронно, чтобы не блокировать цикл событий.

// Пример асинхронного DNS-запроса с использованием модуля 'dns':
const dns = require('dns');

dns.lookup('example.com', (err, address, family) => {
  if (err) {
    console.error('Ошибка DNS запроса:', err);
  } else {
    console.log('IP-адрес:', address);
    console.log('IP-версия:', family);
  }
});

// Отложенный nextTick:
// Функция process.nextTick() позволяет откладывать выполнение функции до следующего цикла событий.
// Это позволяет выполнить асинхронную задачу как можно скорее, но после текущего стека вызовов.

console.log('Перед вызовом nextTick');

process.nextTick(() => {
  console.log('Внутри nextTick');
});

console.log('После вызова nextTick');

// В этом примере, 'Внутри nextTick' будет выведено после 'Перед вызовом nextTick' и 'После вызова nextTick',
// так как nextTick откладывает выполнение функции до завершения текущего стека вызовов.

// Пример использования функции nextTick в асинхронной обработке:
function asyncOperation(callback) {
  console.log('Начало асинхронной операции');

  process.nextTick(() => {
    console.log('Асинхронная операция завершена');
    callback();
  });

  console.log('Конец асинхронной операции');
}

asyncOperation(() => {
  console.log('Callback вызван');
});

// В этом примере 'Конец асинхронной операции' будет выведено до 'Асинхронная операция завершена', так как nextTick 
// откладывает выполнение функции до завершения текущего стека вызовов.

// Пример использования асинхронных функций и nextTick в реальном приложении
const http = require('http');

http.createServer((req, res) => {
  console.log('Получен запрос');

  dns.lookup('example.com', (err, address, family) => {
    if (err) {
      res.writeHead(500);
      res.end('Ошибка DNS запроса');
      return;
    }

    process.nextTick(() => {
      res.writeHead(200, {'Content-Type': 'text/plain'});
      res.end(`IP-адрес example.com: ${address}`);
    });
  });

  console.log('Запрос обработан');
}).listen(3000, () => {
  console.log('Сервер запущен на порту 3000');
});

// В этом примере сервер HTTP получает запрос и выполняет асинхронный DNS-запрос для получения IP-адреса example.com.
// После завершения DNS-запроса, результат отправляется клиенту с использованием process.nextTick, чтобы убедиться, что 
// все другие синхронные операции завершены перед отправкой ответа.

// Итог:
// Цикл событий в Node.js обеспечивает асинхронную обработку операций, таких как DNS-запросы, и позволяет откладывать 
// выполнение функций с помощью process.nextTick для управления порядком выполнения задач. Это помогает создавать 
// эффективные и отзывчивые серверные приложения.
