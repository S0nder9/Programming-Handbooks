// Глава 4: Цикл событий - Архитектура Node.js - Цикл событий (Event Loop)

// Node.js - это серверная платформа, построенная на движке JavaScript V8, которая позволяет выполнять JavaScript вне браузера.
// Одной из ключевых особенностей Node.js является его архитектура, основанная на неблокирующем, событийно-ориентированном программировании, 
// что делает его особенно подходящим для приложений с высокой нагрузкой и параллельными запросами.

// Цикл событий (Event Loop) - это механизм, который позволяет Node.js обрабатывать множество операций без блокировки основного потока исполнения.
// Он отвечает за обработку асинхронных операций и выполняет их обратные вызовы (callbacks) при завершении.

// Основные этапы цикла событий Node.js:

function eventLoopExplanation() {
    // 1. Timers
    // Этап Timers обрабатывает setTimeout и setInterval callbacks.
    // Все таймеры, чье время ожидания истекло, будут выполнены на этом этапе.
    
    // 2. Pending Callbacks
    // Этот этап обрабатывает все I/O callbacks, которые отложены на следующий проход цикла событий.
    // Это касается операций, таких как сокетные ошибки, которые произошли в прошлый раз.
    
    // 3. Idle, Prepare
    // Этот этап используется внутри Node.js для выполнения операций, которые должны быть выполнены между другими этапами.
    
    // 4. Poll
    // Этап Poll отвечает за получение новых I/O событий, выполнение I/O callbacks и блокирование в определенных ситуациях.
    // В этом этапе Node.js будет обрабатывать события, если у него есть задачи I/O, которые нужно выполнить, или если таймеры готовы к выполнению.
    
    // 5. Check
    // Этап Check обрабатывает setImmediate callbacks.
    // Все callbacks, установленные setImmediate, будут выполнены на этом этапе.
    
    // 6. Close Callbacks
    // Этот этап обрабатывает close события, такие как закрытие сокетов или завершение потоков.
  
    // Пример работы цикла событий:
    // setTimeout и setImmediate используются для демонстрации работы циклов событий.
    console.log('Start');
  
    setTimeout(() => {
      console.log('Timeout');
    }, 0);
  
    setImmediate(() => {
      console.log('Immediate');
    });
  
    console.log('End');
  
    // В этом примере, несмотря на то, что setTimeout установлен на 0 миллисекунд, 
    // setImmediate выполнится раньше, так как setTimeout запускается в фазе Timers, 
    // которая выполняется после фазы Poll.
  }
  
  // Итог:
  // Цикл событий Node.js - это ключевой компонент, который позволяет платформе быть неблокирующей и высокопроизводительной.
  // Он обеспечивает эффективное управление асинхронными операциями, позволяя Node.js обрабатывать большое количество одновременных соединений с минимальной нагрузкой на систему.
  