// Глава 4: Цикл событий - Архитектура Node.js

// В Node.js архитектура основана на концепции цикла событий (Event Loop), который управляет асинхронными операциями и колбэками.
// Один из важных аспектов цикла событий — это **группы событий** или **фазы цикла событий**, которые помогают организовать обработку разных типов событий и задач.

// Основные фазы цикла событий в Node.js:

// 1. Таймеры (Timers):
// Эта фаза отвечает за выполнение колбэков для таймеров, установленных с помощью функций setTimeout() и setInterval().
// Пример использования:
console.log('Начало');

setTimeout(() => {
  console.log('Таймер сработал');
}, 1000);

console.log('Конец');

// В этом примере, сообщение 'Таймер сработал' будет выведено после 1 секунды.

// 2. I/O колбэки (I/O Callbacks):
// В этой фазе обрабатываются колбэки, которые не являются таймерами, такие как колбэки для завершения операций ввода/вывода (I/O), например, чтение файлов.
// Пример использования:
const fs = require('fs');

fs.readFile('example.txt', (err, data) => {
  if (err) throw err;
  console.log('Файл прочитан:', data.toString());
});

console.log('Запрос к файлу отправлен');

// В этом примере, сообщение 'Файл прочитан:' будет выведено после того, как файл будет прочитан.

// 3. Полинг (Polling):
// Эта фаза предназначена для обработки событий ввода/вывода и выполнения колбэков для асинхронных операций, которые готовы к выполнению.
// Пример использования:
const net = require('net');

const server = net.createServer((socket) => {
  socket.on('data', (data) => {
    console.log('Получены данные:', data.toString());
  });
});

server.listen(8080, () => {
  console.log('Сервер запущен на порту 8080');
});

// В этом примере, сервер будет слушать входящие соединения и обрабатывать данные от клиента.

// 4. Обработка таймеров (Check):
// В этой фазе обрабатываются колбэки, которые были запланированы с помощью setImmediate().
// Пример использования:
setImmediate(() => {
  console.log('setImmediate сработал');
});

console.log('Перед setImmediate');

// В этом примере, сообщение 'setImmediate сработал' будет выведено после того, как все синхронные операции завершатся.

// 5. Закрытие (Close):
// В этой фазе обрабатываются события закрытия, такие как завершение соединения с сетевыми ресурсами.
// Пример использования:
const closeServer = net.createServer((socket) => {
  socket.on('end', () => {
    console.log('Соединение закрыто');
  });
});

closeServer.listen(8081, () => {
  console.log('Сервер запущен на порту 8081');
});

// В этом примере, сообщение 'Соединение закрыто' будет выведено, когда клиент закроет соединение.

// Группы событий (Event Loop Phases) в Node.js

// Цикл событий делится на несколько фаз, и каждая из них имеет свою очередь колбэков:
// - Timers
// - I/O Callbacks
// - Polling
// - Check
// - Close Callbacks

// Пример всей архитектуры цикла событий:
console.log('Начало');

setTimeout(() => {
  console.log('Таймер сработал');
}, 0);

fs.readFile('example.txt', () => {
  console.log('Файл прочитан');
});

setImmediate(() => {
  console.log('setImmediate сработал');
});

console.log('Конец');

// Как это работает:
// - В начале выводится 'Начало' и 'Конец'.
// - После завершения текущих операций в основном потоке, сначала выполнятся колбэки таймеров, затем I/O Callbacks.
// - Затем обработаются события в фазе Polling, за ней следует Check и наконец обработка Close Callbacks.

// Итог:
// Понимание групп событий в цикле событий помогает разработчикам эффективно управлять асинхронными операциями в Node.js. 
// Это позволяет предсказать порядок выполнения различных задач и оптимизировать производительность приложений.

// Пример кода для иллюстрации различных фаз цикла событий
console.log('Старт');

setTimeout(() => {
  console.log('Таймер завершен');
}, 100);

setImmediate(() => {
  console.log('setImmediate завершен');
});

fs.readFile(__filename, () => {
  console.log('Чтение файла завершено');
});

console.log('Финал');

// В этом примере, 'Финал' будет выведен первым, затем 'Таймер завершен' после 100 мс, 'Чтение файла завершено' 
// и 'setImmediate завершен' после этого, в зависимости от обработки фаз цикла событий.
