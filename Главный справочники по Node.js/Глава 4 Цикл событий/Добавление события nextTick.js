// Глава 4: Цикл событий

// В Node.js цикл событий является фундаментальной частью, которая управляет выполнением асинхронных операций.
// Он обеспечивает выполнение всех асинхронных задач, таких как таймеры, I/O операции, и колбэки.
// В этой главе мы рассмотрим добавление событий с помощью метода process.nextTick().

// process.nextTick():
// Метод process.nextTick() позволяет планировать выполнение функции на следующем "тике" цикла событий.
// Это означает, что перед тем, как Node.js перейдет к выполнению других I/O операций, будет выполнен код, переданный в process.nextTick().

// Пример использования process.nextTick():
const fs = require('fs');

function readFileAndProcess() {
  fs.readFile('example.txt', (err, data) => {
    if (err) {
      console.error('Ошибка при чтении файла:', err);
      return;
    }
    console.log('Файл прочитан:', data.toString());

    process.nextTick(() => {
      console.log('Этот код выполнится после завершения текущего события.');
    });

    console.log('Этот код выполнится до process.nextTick.');
  });
}

readFileAndProcess();

// Важные моменты:
// 1. process.nextTick() используется для выполнения кода после завершения текущего события, но до выполнения I/O операций.
// 2. Использование process.nextTick() может быть полезным для выполнения асинхронных задач, которые должны быть выполнены перед продолжением выполнения других операций.

// Обратите внимание на порядок выполнения кода в примере выше:
// 1. Чтение файла выполняется асинхронно.
// 2. После успешного чтения файла выводится содержимое файла.
// 3. process.nextTick() планирует выполнение функции на следующем тике цикла событий.
// 4. Сообщение 'Этот код выполнится до process.nextTick.' выводится до сообщения из process.nextTick().

// Добавление события с использованием process.nextTick() может быть полезным, например, для обработки ошибок или выполнения дополнительных действий после завершения текущей задачи.

function someAsyncTask(callback) {
  process.nextTick(() => {
    callback('Результат асинхронной задачи');
  });
}

someAsyncTask((result) => {
  console.log(result); // Вывод: 'Результат асинхронной задачи'
});

// Использование process.nextTick() позволяет выполнять callback сразу после завершения текущего цикла событий, обеспечивая быструю реакцию на завершение асинхронной задачи.

// Итог:
// Метод process.nextTick() в Node.js является мощным инструментом для управления асинхронными операциями и выполнения кода после завершения текущего события цикла событий.
// Это позволяет выполнять дополнительные задачи или обрабатывать ошибки до продолжения выполнения других операций.
