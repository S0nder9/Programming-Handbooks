// Глава 13: Модуль stream - Трансформация данных в потоке

// В Node.js модуль stream предоставляет интерфейс для работы с потоками данных.
// Потоки используются для чтения и записи данных асинхронно.
// Существует несколько типов потоков: Readable (чтение), Writable (запись), Duplex (чтение и запись), и Transform (трансформация).

// Трансформирующий поток (Transform stream) позволяет изменять или трансформировать данные, проходящие через поток.
// Он объединяет функциональность Readable и Writable потоков, что позволяет одновременно читать входящие данные, трансформировать их и записывать выходные данные.

// Пример использования Transform stream для преобразования данных в верхний регистр:

const stream = require('stream');

// Создаем новый трансформирующий поток
const upperCaseStream = new stream.Transform({
  // Определяем функцию трансформации
  transform(chunk, encoding, cb) {
    // Преобразуем данные в строку и изменяем на верхний регистр
    const upperCased = chunk.toString().toUpperCase();
    // Передаем преобразованные данные в следующий этап
    cb(null, upperCased);
  }
});

// Используем поток стандартного ввода (process.stdin) для получения данных
// Подключаем его к нашему трансформирующему потоку (upperCaseStream)
// Затем подключаем трансформирующий поток к потоку стандартного вывода (process.stdout)
// Таким образом, все данные, введенные пользователем, будут преобразованы в верхний регистр и выведены на консоль

process.stdin
  .pipe(upperCaseStream)
  .pipe(process.stdout);

// Итог:
// Трансформирующие потоки позволяют изменять данные в процессе их передачи через поток.
// В данном примере мы использовали Transform stream для преобразования текста, введенного пользователем, в верхний регистр.
// Это демонстрирует мощь и гибкость потоков в Node.js для работы с данными в реальном времени.