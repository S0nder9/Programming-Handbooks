// Глава 13: Модуль stream - Копирование файла с помощью потока в Node.js

// В Node.js модуль stream предоставляет интерфейсы для работы с потоками данных.
// Потоки позволяют обрабатывать данные по мере их поступления, что эффективно для работы с большими файлами и потоковыми данными.

// Как работают потоки:
// Потоки могут быть чтения, записи, дуплексные (для чтения и записи) и трансформирующие (для изменения данных во время их передачи).
// Поток чтения используется для чтения данных из источника (например, файла).
// Поток записи используется для записи данных в место назначения (например, в другой файл).

// Использование потоков для копирования файла:
// Для копирования файла мы используем поток чтения (fs.createReadStream) и поток записи (fs.createWriteStream).
// Поток чтения считывает данные из исходного файла, а поток записи записывает эти данные в новый файл.

// Пример копирования файла с помощью потоков:

const fs = require('fs');

// Создаем поток чтения из исходного файла
const readStream = fs.createReadStream('source.txt');

// Создаем поток записи в целевой файл
const writeStream = fs.createWriteStream('destination.txt');

// Подключаем потоки
readStream.pipe(writeStream);

// Обработка событий потока
readStream.on('error', (err) => {
  console.error('Ошибка при чтении файла:', err);
});

writeStream.on('error', (err) => {
  console.error('Ошибка при записи файла:', err);
});

writeStream.on('finish', () => {
  console.log('Файл успешно скопирован');
});

// Описание работы:
// 1. Модуль fs используется для работы с файловой системой.
// 2. fs.createReadStream создает поток для чтения данных из файла 'source.txt'.
// 3. fs.createWriteStream создает поток для записи данных в файл 'destination.txt'.
// 4. readStream.pipe(writeStream) подключает поток чтения к потоку записи, передавая данные из одного потока в другой.
// 5. Обработка ошибок потоков с помощью событий 'error'.
// 6. Событие 'finish' у потока записи срабатывает, когда все данные успешно записаны в файл.

// Итог:
// Модуль stream в Node.js предоставляет мощные инструменты для работы с потоками данных.
// Использование потоков для копирования файлов позволяет эффективно обрабатывать данные и упрощает работу с большими файлами.
