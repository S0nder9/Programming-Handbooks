// Глава 13: Модуль stream - Чтение из стандартного ввода в потоке в Node.js

// В Node.js модуль stream предоставляет абстракции для работы с потоками данных.
// Потоки позволяют обрабатывать данные постепенно, а не загружать их все сразу в память, что особенно полезно для работы с большими объемами данных.
// Один из примеров использования потоков - чтение данных из стандартного ввода (stdin).

// Чтение данных из stdin с использованием потока:
// В Node.js процесс стандартного ввода (stdin) является экземпляром Readable stream.
// Это позволяет считывать данные постепенно по мере их поступления.

// Пример чтения данных из stdin с использованием потока:
process.stdin.setEncoding('utf8'); // Устанавливаем кодировку для входного потока

process.stdin.on('readable', () => {
  let chunk;
  // Используем метод .read() для чтения доступных данных
  while ((chunk = process.stdin.read()) !== null) {
    console.log(`Получено: ${chunk}`);
  }
});

// Пример использования события 'data' для чтения данных:
process.stdin.on('data', (chunk) => {
  console.log(`Получено через событие 'data': ${chunk}`);
});

// Пример завершения чтения данных с использованием события 'end':
process.stdin.on('end', () => {
  console.log('Чтение из stdin завершено.');
});

// Запуск примера:
// Чтобы запустить этот пример, сохраните его в файл, например, stdinStream.js.
// Затем выполните его в терминале и введите текст:
// $ node stdinStream.js
// Вводите текст и нажимайте Enter, чтобы увидеть, как данные читаются и обрабатываются.

// Итог:
// Модуль stream в Node.js предоставляет мощные инструменты для работы с потоками данных.
// Чтение из стандартного ввода с использованием потоков позволяет обрабатывать данные по мере их поступления,
// что особенно полезно для обработки больших объемов данных или работы в реальном времени.
