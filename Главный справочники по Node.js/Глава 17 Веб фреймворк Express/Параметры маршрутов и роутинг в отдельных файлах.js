// Глава 17: Веб фреймворк Express - Параметры маршрутов и роутинг в отдельных файлах в Node.js

// Веб фреймворк Express используется для создания серверных приложений на Node.js.
// Один из ключевых аспектов Express - это маршрутизация, которая позволяет определять, как приложение реагирует на различные запросы к конечным точкам (URL).
// В этой главе рассмотрим параметры маршрутов и роутинг в отдельных файлах, что помогает организовать код более структурированно и легко управляемо.

// Параметры маршрутов:
// Параметры маршрутов позволяют захватывать значения из URL и использовать их в обработчиках маршрутов.
// Например, можно захватывать идентификаторы пользователей или другие динамические сегменты URL.

// Пример использования параметров маршрутов:
const express = require('express');
const app = express();

app.get('/users/:userId', (req, res) => {
  const userId = req.params.userId;
  res.send(`User ID: ${userId}`);
});

// Этот маршрут захватывает параметр userId из URL и возвращает его в ответе.
// Например, запрос к /users/123 вернет "User ID: 123".

// Роутинг в отдельных файлах:
// Для лучшей организации кода маршруты можно разбивать на отдельные файлы.
// Это особенно полезно в крупных приложениях с множеством маршрутов.

// Создадим файл routes/users.js для маршрутов, связанных с пользователями:
const express = require('express');
const router = express.Router();

router.get('/:userId', (req, res) => {
  const userId = req.params.userId;
  res.send(`User ID: ${userId}`);
});

router.post('/', (req, res) => {
  res.send('Create a new user');
});

// Экспортируем роутер для использования в основном файле приложения
module.exports = router;

// В основном файле приложения подключим роутер:
const express = require('express');
const app = express();
const userRoutes = require('./routes/users');

app.use('/users', userRoutes);

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

// Теперь все маршруты, определенные в routes/users.js, будут доступны по пути /users.
// Например, GET запрос к /users/123 будет обработан маршрутом, определенным в routes/users.js.

// Итог:
// Параметры маршрутов в Express позволяют захватывать динамические значения из URL и использовать их в обработчиках маршрутов.
// Роутинг в отдельных файлах помогает организовать код и сделать его более структурированным, что особенно полезно в крупных приложениях.
