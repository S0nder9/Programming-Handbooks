// Глава 17: Веб фреймворк Express - Метод route и цепочка HTTP методов в Node.js

// Express - это минималистичный веб-фреймворк для Node.js, который предоставляет мощные средства для создания веб-приложений и API.
// Одной из полезных функций Express является метод route и возможность создания цепочки HTTP методов.

// Метод route:
// Метод route позволяет определить несколько обработчиков для одного и того же пути, используя различные HTTP методы (GET, POST, PUT, DELETE и т.д.).
// Это позволяет организовать код и упрощает управление различными HTTP запросами к одному и тому же ресурсу.

// Пример использования метода route:
const express = require('express');
const app = express();
const port = 3000;

// Используем метод route для обработки различных HTTP методов для пути '/users'
app.route('/users')
  .get((req, res) => {
    // Обработка GET-запроса на путь '/users'
    res.send('Получение списка пользователей');
  })
  .post((req, res) => {
    // Обработка POST-запроса на путь '/users'
    res.send('Создание нового пользователя');
  })
  .put((req, res) => {
    // Обработка PUT-запроса на путь '/users'
    res.send('Обновление информации о пользователе');
  })
  .delete((req, res) => {
    // Обработка DELETE-запроса на путь '/users'
    res.send('Удаление пользователя');
  });

app.listen(port, () => {
  console.log(`Сервер запущен на http://localhost:${port}`);
});

// Цепочка HTTP методов:
// Express позволяет цепочить несколько обработчиков для одного и того же маршрута с использованием метода route.
// Это позволяет легко управлять логикой обработки запросов и повторно использовать код.

// Пример цепочки HTTP методов:
app.route('/products')
  .get((req, res) => {
    // Обработка GET-запроса на путь '/products'
    res.send('Получение списка продуктов');
  })
  .post((req, res) => {
    // Обработка POST-запроса на путь '/products'
    res.send('Создание нового продукта');
  })
  .put((req, res) => {
    // Обработка PUT-запроса на путь '/products'
    res.send('Обновление информации о продукте');
  })
  .delete((req, res) => {
    // Обработка DELETE-запроса на путь '/products'
    res.send('Удаление продукта');
  });

// Итог:
// Метод route и цепочка HTTP методов в Express позволяют легко управлять различными HTTP запросами к одному и тому же ресурсу.
// Это делает код более организованным и упрощает его сопровождение и расширение.
