 // Глава 17: Веб фреймворк Express - Несколько обработчиков запроса в Node.js

// Express - это минималистичный веб-фреймворк для Node.js, который позволяет создавать серверные приложения и API.
// Одной из его мощных функций является возможность использования нескольких обработчиков для одного и того же маршрута.
// Это позволяет разделить логику обработки запросов на более мелкие, переиспользуемые функции.

// Как работают несколько обработчиков запроса:
// В Express можно использовать массив функций-обработчиков или цепочку функций через метод next().
// Каждая функция-обработчик может выполнять свою часть работы и передавать управление следующей функции в цепочке.

// Пример использования нескольких обработчиков запроса:
const express = require('express');
const app = express();

// Первый обработчик для проверки авторизации
const checkAuth = (req, res, next) => {
  const isAuthenticated = true; // Здесь должна быть логика проверки авторизации
  if (isAuthenticated) {
    next(); // Если пользователь авторизован, передаем управление следующему обработчику
  } else {
    res.status(401).send('Unauthorized');
  }
};

// Второй обработчик для ведения логов
const logRequest = (req, res, next) => {
  console.log(`${req.method} request to ${req.url}`);
  next(); // Передаем управление следующему обработчику
};

// Третий обработчик для обработки самого запроса
const handleRequest = (req, res) => {
  res.send('Hello from the final request handler!');
};

// Использование нескольких обработчиков для одного маршрута
app.get('/protected', [checkAuth, logRequest, handleRequest]);

// Запуск сервера на порту 3000
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

// Пример использования цепочки функций с методом next():
app.get('/example', (req, res, next) => {
  console.log('First handler');
  next(); // Передаем управление следующему обработчику
}, (req, res, next) => {
  console.log('Second handler');
  next(); // Передаем управление следующему обработчику
}, (req, res) => {
  res.send('Response from the final handler');
});

// Итог:
// Использование нескольких обработчиков запросов позволяет создавать более структурированные и поддерживаемые приложения на Express.
// Это позволяет разделять логику на отдельные функции, улучшая читаемость и возможность повторного использования кода.
