// Глава 17: Веб фреймворк Express - Параметры маршрута в Node.js

// Express - это минималистичный веб-фреймворк для Node.js, который позволяет легко создавать серверные приложения.
// Один из полезных аспектов Express - это поддержка параметров маршрута, которые позволяют создавать гибкие и динамичные URL.

// Как работают параметры маршрута:
// В Express параметры маршрута обозначаются двоеточием (:) перед именем параметра в пути маршрута.
// Когда клиент делает запрос к URL, содержащему параметр маршрута, Express может извлечь значение этого параметра и передать его в обработчик маршрута.

// Пример использования параметров маршрута:
// Установим Express, если он еще не установлен:
// npm install express

// Создаем сервер с использованием Express:
const express = require('express');
const app = express();
const port = 3000;

// Определим маршрут с параметром "id":
app.get('/user/:id', (req, res) => {
  // Извлекаем параметр "id" из URL
  const userId = req.params.id;

  // Отправляем ответ с использованием параметра
  res.send(`User ID: ${userId}`);
});

// Запускаем сервер:
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

// При обращении к серверу по адресу http://localhost:3000/user/123, ответ будет "User ID: 123"

// Пример использования нескольких параметров маршрута:
app.get('/user/:id/book/:bookId', (req, res) => {
  const userId = req.params.id;
  const bookId = req.params.bookId;

  res.send(`User ID: ${userId}, Book ID: ${bookId}`);
});

// При обращении к серверу по адресу http://localhost:3000/user/123/book/456, ответ будет "User ID: 123, Book ID: 456"

// Итог:
// Параметры маршрута в Express позволяют создавать гибкие и динамичные URL, которые можно использовать для передачи данных в маршруты.
// Это делает Express мощным инструментом для создания серверных приложений с динамическими маршрутами.
