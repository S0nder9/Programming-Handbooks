// Глава 5: Стек вызовов

// Функция fibonacci без блокирования цикла событий
// Вычисление чисел Фибоначчи является классической задачей, которая может потребовать значительных вычислительных ресурсов,
// особенно для больших чисел. Важно обеспечить, чтобы выполнение функции не блокировало основной поток событий,
// чтобы интерфейс оставался отзывчивым. Для этого можно использовать асинхронные подходы, такие как setTimeout.

// Основная идея состоит в том, чтобы разбить вычисления на небольшие части и выполнять их асинхронно,
// таким образом, избегая блокирования основного потока.

// Пример асинхронного вычисления чисел Фибоначчи с использованием setTimeout:
import React, { useState, useEffect } from 'react';

function FibonacciComponent() {
  const [result, setResult] = useState(null); // состояние для хранения результата
  const [loading, setLoading] = useState(false); // состояние для отслеживания загрузки

  // Асинхронная функция для вычисления числа Фибоначчи
  const fibonacci = (n, callback) => {
    if (n === 0 || n === 1) {
      callback(n);
    } else {
      setTimeout(() => {
        fibonacci(n - 1, (result1) => {
          fibonacci(n - 2, (result2) => {
            callback(result1 + result2);
          });
        });
      }, 0); // планируем выполнение следующей части вычисления
    }
  };

  const handleCalculate = () => {
    setLoading(true);
    setResult(null);

    const n = 40; // число, для которого вычисляется значение Фибоначчи

    fibonacci(n, (result) => {
      setResult(result);
      setLoading(false);
    });
  };

  return (
    <div>
      <h1>Асинхронное вычисление чисел Фибоначчи</h1>
      <button onClick={handleCalculate} disabled={loading}>
        {loading ? 'Вычисление...' : 'Вычислить Фибоначчи'}
      </button>
      {result !== null && (
        <div>
          <h2>Результат:</h2>
          <p>{result}</p>
        </div>
      )}
    </div>
  );
}

// Пример использования FibonacciComponent в другом компоненте
function App() {
  return (
    <div>
      <h1>Пример асинхронного вычисления чисел Фибоначчи в React</h1>
      <FibonacciComponent />
    </div>
  );
}

export default App;

// Итог:
// Использование асинхронных подходов, таких как setTimeout, позволяет выполнять вычислительные задачи без блокирования основного потока событий,
// обеспечивая отзывчивость интерфейса. Это особенно важно для долгих вычислений, таких как вычисление чисел Фибоначчи для больших значений.
