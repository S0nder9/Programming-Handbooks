// Глава 5: Стек вызовов

// Поиск числа Фибоначчи без рекурсии

// Числа Фибоначчи — это последовательность чисел, в которой каждое следующее число является суммой двух предыдущих.
// Последовательность начинается с чисел 0 и 1. Например: 0, 1, 1, 2, 3, 5, 8, 13, ...

// Для вычисления чисел Фибоначчи можно использовать как рекурсивный, так и итеративный подход.
// В этом примере мы рассмотрим итеративный подход, который использует цикл для вычисления чисел Фибоначчи,
// избегая рекурсии и, таким образом, предотвращая возможные проблемы с переполнением стека вызовов.

function findFibonacci(n) {
  if (n < 0) {
    return "Ошибка: входное значение должно быть неотрицательным числом";
  }

  // Инициализация первых двух чисел Фибоначчи
  let a = 0;
  let b = 1;

  // Если n равно 0, возвращаем первое число Фибоначчи
  if (n === 0) {
    return a;
  }

  // Если n равно 1, возвращаем второе число Фибоначчи
  if (n === 1) {
    return b;
  }

  // Вычисление числа Фибоначчи для n
  for (let i = 2; i <= n; i++) {
    let temp = a + b;
    a = b;
    b = temp;
  }

  return b;
}

// Пример использования функции findFibonacci
console.log(findFibonacci(0)); // 0
console.log(findFibonacci(1)); // 1
console.log(findFibonacci(2)); // 1
console.log(findFibonacci(3)); // 2
console.log(findFibonacci(4)); // 3
console.log(findFibonacci(5)); // 5
console.log(findFibonacci(6)); // 8
console.log(findFibonacci(7)); // 13
console.log(findFibonacci(8)); // 21

// Итог:
// Итеративный подход к вычислению чисел Фибоначчи является эффективным способом избежать переполнения стека вызовов,
// которое может возникнуть при использовании рекурсии. Этот подход позволяет вычислять числа Фибоначчи даже для больших значений n,
// не вызывая рекурсивных вызовов, что делает его более устойчивым и производительным.
