// Глава 6: Модули CommonJS

// В этой главе мы изучим модули CommonJS, которые используются в Node.js для управления зависимостями и структурированием кода.
// CommonJS — это стандарт модулей для Node.js, который позволяет импортировать и экспортировать функциональность между файлами.

///////////////////////////////////////
// Подглава 6.1: Введение в CommonJS

// Модули CommonJS основаны на двух ключевых функциях: require и module.exports.

// Основные особенности модулей CommonJS:
// - Использование функции `require` для импорта модулей.
// - Экспорт функциональности с помощью `module.exports`.
// - Модули загружаются синхронно, что означает, что выполнение кода при импорте происходит сразу.

// Пример файла модуля в CommonJS (math.js):
// module.exports = {
//   add: function(a, b) {
//     return a + b;
//   },
//   subtract: function(a, b) {
//     return a - b;
//   }
// };

// Пример использования модуля в другом файле (app.js):
// const math = require('./math');
// console.log(math.add(2, 3)); // 5
// console.log(math.subtract(5, 2)); // 3

///////////////////////////////////////
// Подглава 6.2: Импорты в модулях CommonJS

// В CommonJS используется функция `require` для импорта модулей. Эта функция возвращает экспортированное значение модуля.

// Основной синтаксис функции `require`:
// const module = require('module-path');

// Пример использования:
const fs = require('fs'); // Импорт встроенного модуля fs для работы с файловой системой

fs.readFile('./example.txt', 'utf8', (err, data) => {
  if (err) throw err;
  console.log(data); // Чтение содержимого файла example.txt
});

// Также можно импортировать локальные модули:
const math = require('./math'); // Импорт пользовательского модуля math.js
console.log(math.add(10, 5)); // 15

// Импорт нескольких модулей из разных файлов:
const userUtils = require('./userUtils');
const productUtils = require('./productUtils');

userUtils.createUser('John Doe');
productUtils.addProduct('New Product');

// Импорт встроенных и внешних модулей:
const path = require('path'); // Встроенный модуль для работы с путями файлов
const axios = require('axios'); // Внешний модуль для выполнения HTTP запросов

///////////////////////////////////////
// Подглава 6.3: Функция require в Node.js

// Функция `require` используется для загрузки модулей и их функциональности.
// Эта функция синхронно загружает и кэширует модули, что позволяет повторно использовать их без повторной загрузки.

// Принцип работы `require`:
// 1. `require` ищет модуль по указанному пути.
// 2. Если модуль уже был загружен, он используется из кэша.
// 3. Если модуль еще не был загружен, он будет загружен и выполнен.
// 4. Результат экспорта модуля возвращается в вызывающий код.

// Пример кэширования модулей:
const math1 = require('./math'); // Загрузка модуля
const math2 = require('./math'); // Загрузка модуля из кэша

console.log(math1 === math2); // true - `math1` и `math2` ссылаются на один и тот же объект

///////////////////////////////////////
// Подглава 6.4: Экспортирование функциональности

// В CommonJS модулях функциональность экспортируется через `module.exports`.
// Это может быть объект, функция, класс или любой другой тип данных.

// Экспортирование объекта:
module.exports = {
  add: (a, b) => a + b,
  multiply: (a, b) => a * b
};

// Экспортирование функции:
module.exports = function(a, b) {
  return a + b;
};

// Экспортирование класса:
class Person {
  constructor(name) {
    this.name = name;
  }
  greet() {
    return `Hello, ${this.name}`;
  }
}
module.exports = Person;

///////////////////////////////////////
// Подглава 6.5: Преимущества и недостатки CommonJS

// Преимущества:
// - Синхронная загрузка модулей, что делает код простым и понятным.
// - Простота использования `require` и `module.exports` для импорта и экспорта функциональности.
// - Поддержка кэширования модулей для повышения производительности.

// Недостатки:
// - Синхронная загрузка модулей не подходит для браузеров, где требуется асинхронная загрузка.
// - Модули CommonJS не являются стандартом для фронтенд-разработки, где чаще используется система модулей ES6.

// Примеры использования CommonJS:
const http = require('http'); // Встроенный модуль для создания HTTP-серверов
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello, World!\n');
});
server.listen(3000, () => {
  console.log('Server is listening on port 3000');
});

const Person = require('./Person'); // Импортирование класса из файла Person.js
const john = new Person('John');
console.log(john.greet()); // Hello, John

// Итог:
// CommonJS — это мощный стандарт модулей для Node.js, который позволяет организовывать код и управлять зависимостями.
// Используйте `require` и `module.exports` для работы с модулями в Node.js, а также помните о его преимуществах и недостатках.

// Если вы работаете в среде, поддерживающей модули ES6, вы также можете использовать синтаксис `import` и `export`, который мы рассмотрим в следующих главах.
