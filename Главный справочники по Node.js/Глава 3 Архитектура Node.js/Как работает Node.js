// Глава 3: Архитектура Node.js

// Как работает Node.js:

// Node.js — это серверная платформа, построенная на движке V8, разработанном Google, который используется в браузере Chrome для выполнения JavaScript. 
// Node.js позволяет запускать JavaScript-код на сервере, предоставляя возможность разрабатывать серверные приложения с использованием JavaScript.

// Основные принципы работы Node.js:

// 1. Однопоточность с использованием событийного цикла
// Node.js использует однопоточную модель, основанную на событийном цикле. Это означает, что он обрабатывает все запросы в одном потоке, 
// используя неблокирующий ввод-вывод (I/O). Это позволяет обрабатывать множество запросов одновременно, не блокируя выполнение других операций.

// Пример: однопоточная модель с использованием событийного цикла
function eventLoopExample() {
    console.log('Начало выполнения');
    setTimeout(() => {
      console.log('Таймер сработал');
    }, 1000);
    console.log('Конец выполнения');
  }
  
  eventLoopExample();
  // Вывод будет:
  // Начало выполнения
  // Конец выполнения
  // Таймер сработал
  
  // 2. Неблокирующий ввод-вывод (I/O)
  // В Node.js все операции ввода-вывода являются асинхронными и неблокирующими. Это означает, что приложение может продолжать выполнять другие задачи, 
  // пока ожидает завершения операции ввода-вывода. Это достигается с помощью колбэков, промисов или асинхронных функций.
  
  // Пример: неблокирующий ввод-вывод
  const fs = require('fs');
  
  function nonBlockingIOExample() {
    fs.readFile('example.txt', 'utf8', (err, data) => {
      if (err) {
        console.error('Ошибка чтения файла', err);
        return;
      }
      console.log('Содержимое файла:', data);
    });
    console.log('Чтение файла инициировано');
  }
  
  nonBlockingIOExample();
  // Вывод будет:
  // Чтение файла инициировано
  // (После завершения чтения файла)
  // Содержимое файла: (данные файла)
  
  // 3. Модульная система
  // Node.js имеет встроенную модульную систему CommonJS, которая позволяет разделять код на отдельные файлы и модули. 
  // Это облегчает управление зависимостями и повторное использование кода.
  
  // Пример: создание и использование модуля
  // В файле math.js:
  function add(a, b) {
    return a + b;
  }
  
  function subtract(a, b) {
    return a - b;
  }
  
  module.exports = {
    add,
    subtract,
  };
  
  // В главном файле app.js:
  const math = require('./math');
  
  function useMathModule() {
    console.log('Сумма 2 + 3 =', math.add(2, 3));
    console.log('Разность 5 - 2 =', math.subtract(5, 2));
  }
  
  useMathModule();
  // Вывод будет:
  // Сумма 2 + 3 = 5
  // Разность 5 - 2 = 3
  
  // 4. Управление пакетами с помощью npm
  // Node.js поставляется с npm (Node Package Manager), который используется для управления пакетами и зависимостями. npm позволяет легко устанавливать, 
  // обновлять и удалять пакеты, а также управлять версиями зависимостей.
  
  // Пример: установка и использование пакета через npm
  // В терминале:
  // npm install lodash
  
  // В файле app.js:
  const _ = require('lodash');
  
  function useLodash() {
    const arr = [1, 2, 3, 4, 5];
    const shuffledArr = _.shuffle(arr);
    console.log('Перемешанный массив:', shuffledArr);
  }
  
  useLodash();
  // Вывод будет (например):
  // Перемешанный массив: [ 4, 1, 3, 5, 2 ]
  
  // Итог:
  // Node.js предоставляет мощную платформу для разработки серверных приложений на JavaScript. Его однопоточная модель, неблокирующий ввод-вывод, 
  // модульная система и управление пакетами делают его отличным выбором для создания масштабируемых и производительных серверных приложений.
  