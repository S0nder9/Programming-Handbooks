// Глава 3: Архитектура Node.js - Libuv с циклом событий и пулом потоков

// Node.js — это среда выполнения JavaScript, построенная на движке V8 от Google, которая позволяет запускать JavaScript на сервере.
// Одним из ключевых компонентов Node.js является библиотека libuv, которая предоставляет цикл событий и пул потоков для обработки асинхронных операций.

// Libuv — это кросс-платформенная библиотека, разработанная для работы с асинхронными вводом-выводом (I/O) операциями в Node.js.
// Основные компоненты libuv включают цикл событий (event loop) и пул потоков (thread pool).

// Цикл событий (Event Loop):
// Цикл событий в Node.js отвечает за обработку асинхронных операций. Он постоянно проверяет наличие задач, которые необходимо выполнить, и управляет их выполнением.
// Когда начинается выполнение Node.js программы, инициализируется цикл событий. Весь код, который не является асинхронным, выполняется в основном потоке.

// Основные этапы цикла событий:
// 1. Timers: Обработка setTimeout() и setInterval().
// 2. I/O Callbacks: Обработка I/O операций, которые завершились.
// 3. Idle, Prepare: Внутренние операции Node.js.
// 4. Poll: Получение новых I/O событий; выполнение I/O операций; если нет задач, заблокироваться и подождать.
// 5. Check: Обработка setImmediate().
// 6. Close Callbacks: Обработка событий закрытия, например, socket.on('close', ...).

// Пример простого цикла событий:
setTimeout(() => {
  console.log('Timeout callback');
}, 0);

setImmediate(() => {
  console.log('Immediate callback');
});

console.log('Main code');

// Ожидаемый вывод:
// Main code
// Immediate callback
// Timeout callback

// Пул потоков (Thread Pool):
// Libuv предоставляет пул потоков для выполнения операций, которые не могут быть выполнены асинхронно в основном потоке, таких как операции с файлами, DNS запросы, сжатие данных и другие CPU-bound задачи.
// По умолчанию пул потоков в libuv имеет размер 4, но это значение можно изменить с помощью переменной окружения UV_THREADPOOL_SIZE.

// Пример использования пула потоков для асинхронного чтения файла:
const fs = require('fs');

fs.readFile('example.txt', 'utf8', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});

console.log('Main code');

// Ожидаемый вывод:
// Main code
// (Содержимое файла example.txt)

// Взаимодействие цикла событий и пула потоков:
// Когда Node.js сталкивается с операцией, требующей блокировки, такой как чтение файла, она отправляет эту задачу в пул потоков libuv.
// Пул потоков выполняет задачу в одном из своих потоков и, когда задача завершена, отправляет результат обратно в цикл событий, который затем обрабатывает результат и выполняет соответствующий коллбек.

// Заключение:
// Libuv с циклом событий и пулом потоков является фундаментальной частью архитектуры Node.js, обеспечивая асинхронное и неблокирующее выполнение операций.
// Это позволяет Node.js эффективно управлять большим количеством I/O операций и выполнять их параллельно, что делает его идеальной средой для разработки высокопроизводительных серверных приложений.
