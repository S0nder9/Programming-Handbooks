// Глава 3: Архитектура Node.js - Блокирующие и неблокирующие операции

// Node.js — это среда выполнения JavaScript, построенная на движке V8, которая используется для разработки серверных приложений.
// Одной из ключевых особенностей Node.js является его архитектура, ориентированная на неблокирующие операции ввода-вывода.
// Эта архитектура позволяет создавать высокопроизводительные и масштабируемые приложения.

// Блокирующие операции:
// Блокирующие операции (blocking operations) — это операции, которые при выполнении блокируют выполнение последующего кода до тех пор, 
// пока они не завершатся. Это означает, что выполнение программы приостанавливается, пока блокирующая операция не будет завершена.

function blockingOperation() {
  const fs = require('fs');
  const data = fs.readFileSync('file.txt', 'utf8'); // Блокирующая операция чтения файла
  console.log(data); // Этот код выполнится только после завершения чтения файла
}

blockingOperation();

// Примером блокирующих операций являются функции чтения и записи файлов в синхронном режиме (fs.readFileSync, fs.writeFileSync), синхронные запросы к базе данных и т.д.
// Блокирующие операции могут существенно снижать производительность, так как выполнение программы приостанавливается до завершения этих операций.

// Неблокирующие операции:
// Неблокирующие операции (non-blocking operations) — это операции, которые выполняются асинхронно, 
// не блокируя выполнение последующего кода. Вместо этого они принимают callback-функции, которые вызываются по завершении операции.

function nonBlockingOperation() {
  const fs = require('fs');
  fs.readFile('file.txt', 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log(data); // Этот код выполнится асинхронно, после завершения чтения файла
  });

  console.log('Это сообщение выведется раньше, чем содержимое файла'); // Этот код выполнится до завершения чтения файла
}

nonBlockingOperation();

// Примером неблокирующих операций являются функции чтения и записи файлов в асинхронном режиме (fs.readFile, fs.writeFile), 
// асинхронные запросы к базам данных и другие операции ввода-вывода в Node.js.
// Неблокирующие операции позволяют обрабатывать большое количество запросов одновременно, не блокируя основной поток выполнения.

// Event Loop и Callbacks:
// В основе неблокирующей архитектуры Node.js лежит цикл событий (Event Loop).
// Event Loop отвечает за обработку асинхронных операций, помещая их в очередь и вызывая соответствующие callback-функции по завершении операций.

function eventLoopExample() {
  setTimeout(() => {
    console.log('Это сообщение выведется позже');
  }, 1000);

  console.log('Это сообщение выведется раньше'); // Этот код выполнится до setTimeout
}

eventLoopExample();

// В данном примере setTimeout представляет собой неблокирующую операцию, которая помещает callback в очередь Event Loop.
// Event Loop продолжает выполнение кода, не дожидаясь завершения setTimeout, и выводит сообщение 'Это сообщение выведется раньше'.
// После истечения времени таймера Event Loop вызывает callback и выводит сообщение 'Это сообщение выведется позже'.

// Итог:
// Понимание блокирующих и неблокирующих операций в Node.js является ключевым для создания высокопроизводительных и масштабируемых приложений.
// Использование неблокирующих операций и грамотное управление асинхронным кодом позволяет обрабатывать большое количество запросов одновременно и улучшает производительность приложения.
