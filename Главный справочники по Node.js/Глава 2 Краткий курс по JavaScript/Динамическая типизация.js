// Глава 2: Краткий курс по JavaScript - Динамическая типизация

// Динамическая типизация в JavaScript означает возможность изменения типов данных переменных в процессе выполнения программы.
// Это отличает JavaScript от статически типизированных языков, таких как Java или C++, где типы данных переменных определяются на этапе компиляции.

// 1. Типы данных в JavaScript:
// В JavaScript существует несколько основных типов данных:
// - Примитивные типы: number, string, boolean, null, undefined, symbol.
// - Объекты: объекты, массивы, функции.

// Примеры объявления переменных с различными типами данных:
let age = 30; // number
let name = "John"; // string
let isAdult = true; // boolean
let person = { name: "Alice", age: 25 }; // объект
let numbers = [1, 2, 3, 4, 5]; // массив
let greet = function() { console.log("Hello!"); }; // функция

// 2. Динамическая природа типов данных:
// JavaScript позволяет изменять типы данных переменных в процессе выполнения программы.
let variable = 42; // variable имеет тип number
variable = "forty-two"; // теперь variable имеет тип string

// 3. Преобразование типов (типизация):
// JavaScript выполняет автоматическое преобразование типов данных при выполнении операций.
let x = "5";
let y = "10";
let result = x + y; // результат будет строкой "510", так как произошла конкатенация строк

// Пример явного преобразования типов с помощью функций parseInt и parseFloat:
let numString = "42";
let num = parseInt(numString); // преобразует строку в число

// 4. Сравнение значений разных типов:
// В JavaScript используется два типа сравнений: строгое (===) и нестрогое (==).
// - Строгое сравнение (===) сравнивает значения и типы данных.
// - Нестрогое сравнение (==) выполняет приведение типов для сравнения значений.

let a = 42;
let b = "42";

console.log(a === b); // false, потому что сравниваются разные типы данных (number и string)
console.log(a == b); // true, потому что JavaScript автоматически преобразует типы данных и сравнивает значения

// Итог:
// Динамическая типизация делает JavaScript гибким языком программирования, позволяя легко работать с различными типами данных.
// Однако необходимо быть внимательным при выполнении операций с данными разных типов, чтобы избежать неожиданного поведения программы.
