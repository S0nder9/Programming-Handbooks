// Подглава 5.2: Применение пользовательских событий

// Использование пользовательских событий для управления кастомными функциями и интерфейсом
// Пользовательские события позволяют разработчикам создавать более гибкие и модульные приложения. Они могут использоваться для управления кастомными функциями или интерфейсом, например, для активации определенных функциональных возможностей или отображения специальных сообщений.

// Пример использования пользовательских событий для управления функциями:
const button = document.getElementById('myButton');

button.addEventListener('click', function() {
    const customEvent = new CustomEvent('customClick', {
        bubbles: true,
        cancelable: true,
        detail: { message: 'Button clicked!' }
    });
    this.dispatchEvent(customEvent);
});

// Реализация кастомных событий для оповещения об изменениях состояния приложения
// Пользовательские события могут также применяться для оповещения других частей приложения об изменениях в его состоянии. Например, при изменении данных в модели данных приложения можно инициировать пользовательское событие, чтобы представлениям приложения было известно об изменениях и они могли обновить свой интерфейс соответствующим образом.

// Пример реализации кастомных событий для оповещения об изменениях состояния приложения:
const appState = {
    data: [],
    addData(dataItem) {
        this.data.push(dataItem);
        this.notifyChange();
    },
    notifyChange() {
        const customEvent = new CustomEvent('dataChanged', {
            bubbles: true,
            cancelable: true,
            detail: { newData: this.data }
        });
        document.dispatchEvent(customEvent);
    }
};

document.addEventListener('dataChanged', function(event) {
    console.log('Изменены данные приложения', event.detail.newData);
});

// Далее, в других частях приложения можно подписаться на событие 'dataChanged' и обновить интерфейс или выполнить другие действия в соответствии с изменениями данных.
