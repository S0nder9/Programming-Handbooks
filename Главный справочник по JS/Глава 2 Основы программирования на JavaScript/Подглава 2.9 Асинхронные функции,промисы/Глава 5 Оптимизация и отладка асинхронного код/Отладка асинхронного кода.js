// Подглава 5.2: Отладка асинхронного кода

/**
 * Отладка асинхронного кода
 * 
 * Отладка асинхронного кода может быть сложной из-за его нелинейной природы.
 * Однако современные инструменты разработчика предоставляют мощные средства для отладки такого кода.
 * 
 * Вот некоторые из инструментов, которые можно использовать для отладки асинхронного кода:
 * 
 * 1. Консоль разработчика в браузере:
 *    - Используйте `console.log()`, `console.error()` и другие методы консоли для вывода отладочной информации.
 *    - Используйте брейкпоинты (точки останова) для остановки выполнения кода в определенной точке и анализа состояния.
 *    - Используйте инструменты сети для отслеживания сетевых запросов и ответов.
 * 
 * 2. Инструменты разработчика Node.js:
 *    - Если ваш асинхронный код выполняется в среде Node.js, вы можете использовать инструменты разработчика Node.js.
 *    - Профилируйте выполнение кода с помощью встроенных в Node.js инструментов.
 * 
 * 3. Использование отладчика:
 *    - Многие современные IDE (интегрированные среды разработки) предоставляют отладчики, которые позволяют
 *      устанавливать точки останова, шагать по коду и просматривать значения переменных.
 * 
 * Обработка ошибок и вывод отладочной информации:
 * 
 * Важно обрабатывать ошибки в асинхронном коде и выводить отладочную информацию для быстрого обнаружения и устранения проблем.
 * 
 * Пример обработки ошибок и вывода отладочной информации из предыдущего примера с использованием fetch:
 */

// Пример использования fetch для выполнения GET-запроса с обработкой ошибок и выводом отладочной информации
fetch('https://api.example.com/data')
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        console.log('Data received:', data);
    })
    .catch(error => {
        console.error('There was a problem with the fetch operation:', error);
    });

/**
 * Этот код демонстрирует, как обрабатывать ошибки и выводить отладочную информацию при использовании fetch для выполнения
 * асинхронных запросов. Такой подход поможет быстро обнаружить и исправить проблемы в асинхронном коде.
 */
