/* 
Глава 1: Введение в асинхронное программирование

Подглава 1.1: Основы асинхронности

- Что такое асинхронное программирование?
  Асинхронное программирование — это способ выполнения кода, при котором операции могут быть выполнены 
  вне основного потока выполнения, позволяя другим задачам выполняться параллельно, без блокировки основного потока.

- Преимущества асинхронного подхода в JavaScript:
  1. Повышение производительности за счет возможности выполнения нескольких задач одновременно.
  2. Улучшение отзывчивости приложений, так как длительные операции не блокируют основной поток выполнения.
  3. Более эффективное использование ресурсов, так как асинхронные задачи могут выполняться в фоновом режиме.
*/

// Пример: Асинхронная функция с использованием промиса

function fetchData(url) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const data = { message: "Данные успешно загружены" };
            resolve(data);
        }, 2000);
    });
}

fetchData('https://api.example.com/data')
    .then(data => {
        console.log(data.message);
    })
    .catch(error => {
        console.error("Ошибка загрузки данных:", error);
    });

// Пример: Асинхронная функция с использованием async/await

async function fetchDataAsync(url) {
    try {
        const data = await fetchData(url);
        console.log(data.message);
    } catch (error) {
        console.error("Ошибка загрузки данных:", error);
    }
}

fetchDataAsync('https://api.example.com/data');

/* 
В приведенных примерах функция fetchData имитирует асинхронный запрос к серверу с использованием setTimeout. 
Функция возвращает промис, который разрешается через 2 секунды. 
Метод then используется для обработки успешного результата, а метод catch — для обработки ошибок. 
Вторая функция fetchDataAsync использует синтаксис async/await для упрощения работы с асинхронным кодом.
*/
