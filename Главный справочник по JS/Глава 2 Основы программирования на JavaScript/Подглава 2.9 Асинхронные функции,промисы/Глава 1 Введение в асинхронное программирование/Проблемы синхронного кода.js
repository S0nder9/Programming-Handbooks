/*
Глава 1: Введение в асинхронное программирование

Подглава 1.2: Проблемы синхронного кода
- Блокирующие операции и их негативное влияние на производительность
- Проблемы с управлением потоком выполнения
*/

// Проблемы синхронного кода

// Пример блокирующей операции
console.log("Начало выполнения скрипта");

function блокирующаяФункция() {
    // Имитация долгой задачи с использованием синхронного кода
    let start = Date.now();
    while (Date.now() - start < 3000) {
        // Пауза в 3 секунды
    }
    console.log("Блокирующая операция завершена");
}

блокирующаяФункция(); // Во время выполнения этой функции ничего другое не выполняется

console.log("Конец выполнения скрипта");

// Пример с загрузкой данных
console.log("Начало загрузки данных");

function загрузкаДанных() {
    // Имитация загрузки данных
    let start = Date.now();
    while (Date.now() - start < 3000) {
        // Пауза в 3 секунды
    }
    console.log("Данные загружены");
}

загрузкаДанных(); // Во время загрузки данных браузер не отвечает на другие действия

console.log("Загрузка завершена");

// Проблемы с управлением потоком выполнения

function синхроннаяФункция() {
    console.log("Синхронная функция начала выполнение");
    // Имитация долгой задачи
    let start = Date.now();
    while (Date.now() - start < 3000) {
        // Пауза в 3 секунды
    }
    console.log("Синхронная функция завершила выполнение");
}

function вызовСинхроннойФункции() {
    console.log("Вызов синхронной функции начат");
    синхроннаяФункция();
    console.log("Вызов синхронной функции завершен");
}

console.log("Начало потока выполнения");
вызовСинхроннойФункции();
console.log("Конец потока выполнения");

// Как видно из примеров выше, использование синхронного кода может блокировать выполнение других операций,
// что приводит к снижению производительности и ухудшению пользовательского опыта.
