/*
Глава 2: Промисы
Подглава 2.2: Создание промисов
- Использование конструктора Promise
- Различные состояния промиса: pending, fulfilled, rejected
*/

// Промисы являются важной частью асинхронного программирования в JavaScript. 
// Они позволяют обрабатывать асинхронные операции и управлять их выполнением.

// Пример использования конструктора Promise
const myPromise = new Promise((resolve, reject) => {
    // Здесь выполняется асинхронная операция
    let success = true; // Предположим, что операция может завершиться успешно или с ошибкой

    if (success) {
        resolve("Операция завершена успешно"); // Промис выполнен успешно (fulfilled)
    } else {
        reject("Произошла ошибка"); // Промис завершен с ошибкой (rejected)
    }
});

// Промис может находиться в одном из трех состояний:
// 1. pending: начальное состояние, промис ни выполнен, ни отклонен.
// 2. fulfilled: операция завершена успешно.
// 3. rejected: операция завершена с ошибкой.

// Обработка выполнения промиса с использованием методов then() и catch()
myPromise
    .then((result) => {
        console.log(result); // Выводит "Операция завершена успешно", если промис выполнен успешно
    })
    .catch((error) => {
        console.error(error); // Выводит "Произошла ошибка", если промис завершен с ошибкой
    });

// Пример асинхронной функции, возвращающей промис
function asyncOperation() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            let success = Math.random() > 0.5; // Симулируем успешное выполнение с вероятностью 50%

            if (success) {
                resolve("Асинхронная операция выполнена успешно");
            } else {
                reject("Асинхронная операция завершена с ошибкой");
            }
        }, 2000); // Задержка в 2 секунды
    });
}

// Вызов асинхронной функции и обработка результата
asyncOperation()
    .then((result) => {
        console.log(result); // Выводит результат при успешном выполнении
    })
    .catch((error) => {
        console.error(error); // Выводит ошибку при неудачном выполнении
    });
