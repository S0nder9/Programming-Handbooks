// Глава 2: Промисы

// Подглава 2.1: Введение в промисы

/*
    - Определение промисов
    - Как работают промисы в JavaScript
*/

// Определение промисов
// Промис (Promise) - это объект, представляющий результат выполнения асинхронной операции. Промис может находиться в одном из трех состояний:
// - ожидание (pending): начальное состояние, не выполнен и не отклонен.
// - выполнен (fulfilled): операция завершена успешно.
// - отклонен (rejected): операция завершена с ошибкой.


// Как работают промисы в JavaScript

// Пример создания промиса
let promise = new Promise((resolve, reject) => {
    // Асинхронная операция
    setTimeout(() => {
        let success = true;
        if (success) {
            resolve("Операция завершена успешно!");
        } else {
            reject("Ошибка выполнения операции.");
        }
    }, 2000);
});

// Обработка выполнения промиса
promise
    .then((message) => {
        console.log("Успех: " + message);
    })
    .catch((error) => {
        console.log("Ошибка: " + error);
    })
    .finally(() => {
        console.log("Операция завершена (успешно или с ошибкой).");
    });

/*
Объяснение:
- Промис создается с помощью конструктора `new Promise`, который принимает функцию с двумя параметрами: `resolve` и `reject`.
- Внутри функции выполняется асинхронная операция (в данном случае, `setTimeout`).
- Если операция успешна, вызывается `resolve` с результатом.
- Если операция не удалась, вызывается `reject` с ошибкой.
- Метод `then` используется для обработки успешного выполнения промиса.
- Метод `catch` используется для обработки ошибок.
- Метод `finally` вызывается в любом случае, независимо от результата.
*/
