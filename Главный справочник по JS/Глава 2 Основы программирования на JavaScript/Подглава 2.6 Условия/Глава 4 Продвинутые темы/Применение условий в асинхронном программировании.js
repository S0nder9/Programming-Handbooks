// Подглава 4.2: Применение условий в асинхронном программировании

// Использование условий в асинхронных функциях
// В асинхронном программировании условия могут быть полезны для управления потоком выполнения и обработки различных сценариев.

// Пример:

// Функция, которая возвращает промис с задержкой
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Асинхронная функция, которая выполняет задачу с задержкой и возвращает результат
async function fetchData() {
    // Имитируем получение данных с сервера с задержкой 2 секунды
    await delay(2000);
    const data = { name: "John", age: 30 };
    return data;
}

// Пример использования условий в асинхронной функции
async function processData() {
    try {
        // Получаем данные с сервера
        const userData = await fetchData();
        
        // Проверяем данные на наличие и выводим результат
        if (userData) {
            console.log(`Имя пользователя: ${userData.name}, Возраст: ${userData.age}`);
        } else {
            console.log("Данные не получены");
        }
    } catch (error) {
        console.error("Ошибка при получении данных:", error.message);
    }
}

// Вызываем функцию для обработки данных
processData();


// Обработка ошибок с помощью условий в промисах
// При работе с асинхронными операциями через промисы, условия могут использоваться для обработки ошибок и принятия решений на основе их наличия или отсутствия.

// Пример:

// Функция, которая возвращает промис с задержкой и иногда сгенерирует ошибку
function fetchDataWithError() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const randomNumber = Math.random();
            if (randomNumber < 0.5) {
                resolve("Данные успешно получены");
            } else {
                reject(new Error("Ошибка при получении данных"));
            }
        }, 2000);
    });
}

// Пример использования условий для обработки ошибок в промисе
fetchDataWithError()
    .then(data => console.log(data))
    .catch(error => console.error("Ошибка:", error.message));

