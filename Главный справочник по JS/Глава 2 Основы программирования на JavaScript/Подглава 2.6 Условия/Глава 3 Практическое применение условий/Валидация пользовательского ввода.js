// Подглава 3.1: Валидация пользовательского ввода

// Функция для валидации формы
function validateForm(username, password) {
    if (!username || !password) {
        return "Пожалуйста, заполните все поля";
    } else {
        return "Форма заполнена корректно";
    }
}

// Пример вызова функции validateForm
let username = "user123";
let password = "password123";
console.log(validateForm(username, password));

// Функция для валидации email
function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// Пример вызова функции validateEmail
let userEmail = "example@example.com";
console.log("Email корректный?", validateEmail(userEmail));

// Функция для отображения ошибки
function displayError(errorMessage) {
    console.error("Ошибка:", errorMessage);
}

// Пример вызова функции displayError
let error = "Неверный пароль";
displayError(error);

/*
    В примере validateForm реализуется функция, которая принимает два аргумента: username и password, представляющие собой данные, введенные пользователем в форму. 
    Функция проверяет, что оба поля не пусты, используя условный оператор if. Если хотя бы одно из полей пусто, функция возвращает сообщение "Пожалуйста, заполните все поля". 
    В противном случае, если оба поля заполнены, функция возвращает "Форма заполнена корректно".

    Затем создаются две переменные username и password с примерными значениями, и вызывается функция validateForm, передавая эти значения в качестве аргументов. 
    Результат выполнения функции выводится в консоль.

    Далее, в примере validateEmail реализуется функция для проверки корректности формата email. 
    Внутри функции используется регулярное выражение emailRegex, которое проверяет, соответствует ли переданный email формату email-адреса. Результат проверки возвращается с помощью метода test.

    Для демонстрации примеров вызываются обе функции validateForm и validateEmail с различными данными и выводятся результаты в консоль.

        В третьем примере displayError реализуется функция для отображения ошибки. Она принимает сообщение об ошибке и выводит его в консоль с префиксом "Ошибка:". 
В примере вызывается функция displayError с произвольным сообщением об ошибке, которое затем выводится в консоль.
*/

/*Метод test() - это метод объекта регулярного выражения в JavaScript, который используется для проверки строки на соответствие заданному регулярному выражению. 
Он возвращает true, если строка соответствует регулярному выражению, и false в противном случае.

Вот подробное описание метода test():

Синтаксис:
    regex.test(string)

regex - это объект регулярного выражения, который вы хотите применить к строке.
string - это строка, которую вы хотите проверить на соответствие регулярному выражению.
Возвращаемое значение:
true, если строка соответствует регулярному выражению.
false, если строка не соответствует регулярному выражению.

Пример использования:

    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const email = "example@example.com";
    const isValidEmail = regex.test(email);
    console.log(isValidEmail); // Вернет true
    
Поведение:
Метод test() проверяет, соответствует ли строка (email) регулярному выражению (regex).
Если строка соответствует регулярному выражению, метод test() возвращает true.
Если строка не соответствует регулярному выражению, метод test() возвращает false.
Метод test() не изменяет состояние объекта регулярного выражения (regex). Он просто проверяет, соответствует ли строка регулярному выражению или нет.
*/