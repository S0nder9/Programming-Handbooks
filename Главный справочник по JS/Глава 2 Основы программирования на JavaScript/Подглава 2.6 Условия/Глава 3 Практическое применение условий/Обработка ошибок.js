// Подглава 3.3: Обработка ошибок

// Использование условий для обработки исключений
// Обработка ошибок в JavaScript часто основывается на условных операторах, таких как try...catch.
// С помощью конструкции try...catch можно выполнить код, который может привести к ошибке, и обработать эту ошибку, если она произойдет.
// Это позволяет избежать прерывания выполнения программы и предоставить дополнительную информацию о возникшей проблеме.

// Пример:
try {
    // Пытаемся выполнить опасный код
    const result = someUndefinedVariable + 10;
    console.log(result); // Этот код не выполнится из-за ошибки
} catch (error) {
    // Обрабатываем ошибку
    console.error("Произошла ошибка:", error.message);
}

// Предотвращение ошибок через проверку условий
// Предотвращение ошибок можно осуществить путем проверки условий перед выполнением опасных операций.
// Например, можно проверить, определена ли переменная, прежде чем использовать ее.

// Пример:
let someVariable;

if (typeof someVariable !== 'undefined') {
    // Выполняем код, который зависит от значения переменной
    console.log(someVariable);
} else {
    console.log("Переменная не определена");
}

// Вывод сообщений об ошибках для пользователя
// При разработке пользовательских интерфейсов веб-приложений часто необходимо информировать пользователя об ошибках.
// Для этого можно использовать различные методы, такие как вывод сообщений об ошибках в консоль браузера, показ сообщений на экране и т. д.

// Пример:
function validateInput(input) {
    if (!input) {
        throw new Error("Поле не должно быть пустым");
    }
}

try {
    validateInput(""); // Пытаемся валидировать пустой ввод
} catch (error) {
    // Выводим сообщение об ошибке пользователю
    alert(error.message);
}
