// Подглава 3.3: Рекурсия вместо циклов

// Что такое рекурсивные функции
// Рекурсивная функция - это функция, которая вызывает саму себя в своем теле. 
// Такой подход позволяет решать задачи, которые могут быть выражены в виде повторяющихся шагов или подзадач.

// Применение рекурсии для замены циклов
// - Рекурсия может заменить циклы в некоторых случаях, когда задача имеет структуру, которая легко выражается через повторяющиеся шаги.
// - Например, поиск в глубину в дереве, факториал числа, реверс строки - все это задачи, которые легко решить с помощью рекурсии.

// Пример рекурсивной функции для вычисления факториала числа
function factorial(n) {
    if (n === 0 || n === 1) {
        return 1; // базовый случай: факториал 0 и 1 равен 1
    } else {
        return n * factorial(n - 1); // рекурсивный случай: n! = n * (n - 1)!
    }
}

console.log(factorial(5)); // выводит 120

// Преимущества и недостатки рекурсии
// Преимущества:
// - Рекурсия может сделать код более читаемым и лаконичным, особенно в случаях, когда задача имеет рекурсивную структуру.
// - Рекурсивные решения могут быть более интуитивно понятными и естественными для некоторых задач.
// Недостатки:
// - Рекурсия может быть менее эффективной по сравнению с итеративными алгоритмами из-за дополнительного использования стека вызовов.
// - Слишком глубокая рекурсия может привести к переполнению стека и вызвать ошибку "RangeError: Maximum call stack size exceeded".
// - Некорректная реализация рекурсивных функций может привести к зацикливанию или бесконечному выполнению.
