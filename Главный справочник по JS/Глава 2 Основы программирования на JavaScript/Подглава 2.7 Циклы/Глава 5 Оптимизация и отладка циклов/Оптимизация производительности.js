// Подглава 5.1: Оптимизация производительности

// Уменьшение числа итераций
// При работе с циклами стоит стремиться к уменьшению числа итераций для оптимизации производительности.

// Пример: использование цикла for вместо цикла while для обработки массива
const array = [1, 2, 3, 4, 5];
for (let i = 0; i < array.length; i++) {
    console.log(array[i]);
}

// Избегание дублирования кода
// Дублирование кода внутри циклов может привести к увеличению времени выполнения программы. Чтобы избежать этого, следует выносить повторяющиеся действия за пределы цикла.

// Пример: вычисление суммы элементов массива с использованием цикла
let sum = 0;
for (let i = 0; i < array.length; i++) {
    sum += array[i];
}
console.log('Сумма элементов массива:', sum);

// Применение сокращенных форм записи
// Использование сокращенных форм записи циклов может улучшить читаемость кода и сделать его более компактным.

// Пример: использование метода forEach() для обхода элементов массива
array.forEach(element => {
    console.log(element);
});

// Пример: использование оператора расширения для итерации по массиву
const newArray = [...array];
console.log('Новый массив:', newArray);

// Оптимизация циклов позволяет сделать код более эффективным и улучшить его производительность при выполнении.
