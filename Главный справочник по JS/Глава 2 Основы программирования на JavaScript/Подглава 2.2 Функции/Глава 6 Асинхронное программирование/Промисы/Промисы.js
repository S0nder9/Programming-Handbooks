// Подглава 6.2: Промисы (Promises)

// Основные понятия
/*
Промис (Promise) - это объект, представляющий результат успешно выполненной или отклоненной асинхронной операции. 
Он предоставляет удобный способ обработки асинхронных операций и управления их результатами.
*/

// Создание и использование промисов
/*
Промис создается с помощью конструктора Promise, который принимает функцию исполнитель (executor), 
в которой выполняется асинхронная операция. 
Этот исполнитель принимает два аргумента: функцию resolve для успешного выполнения промиса и функцию reject для его отклонения.
*/

// Пример создания и использования промиса
const fetchDataPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        const data = "Данные с сервера";
        // Если данные успешно получены, вызываем resolve
        resolve(data);
        // Если возникла ошибка при получении данных, вызываем reject
        reject(new Error("Ошибка при получении данных"));
    }, 2000);
});

// Использование промиса с помощью методов then и catch
fetchDataPromise.then(data => {
    console.log("Данные успешно получены:", data);
}).catch(error => {
    console.error("Ошибка при получении данных:", error);
});

/*
В этом примере создается промис fetchDataPromise, который асинхронно получает данные с сервера. 
После завершения операции вызывается метод then, если операция завершилась успешно, и метод catch, если возникла ошибка.
*/

// Цепочки промисов (promise chaining)
/*
Цепочка промисов - это последовательное выполнение нескольких асинхронных операций, 
где результат одной операции передается как входной параметр для следующей операции. 
Это делает код более читаемым и понятным.
*/

// Пример цепочки промисов
fetchDataPromise.then(data => {
    console.log("Шаг 1: Данные успешно получены:", data);
    return processData(data); // Возвращаем новый промис
}).then(result => {
    console.log("Шаг 2: Данные успешно обработаны:", result);
}).catch(error => {
    console.error("Ошибка:", error);
});

/*
В этом примере метод then вызывается после успешного выполнения промиса fetchDataPromise для обработки полученных данных. 
Затем результат этой операции передается в следующий метод then для дальнейшей обработки. 
Если возникнет ошибка в любом из шагов, будет вызван метод catch для ее обработки.
*/
