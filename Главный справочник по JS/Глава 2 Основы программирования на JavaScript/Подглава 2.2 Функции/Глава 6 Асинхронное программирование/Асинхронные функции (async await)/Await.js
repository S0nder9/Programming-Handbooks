// Подглава 6.3: Асинхронные функции await

// Асинхронные функции и ключевое слово await
/*
Асинхронные функции - это функции, которые позволяют выполнять асинхронные операции в синхронном стиле. 
Они объявляются с использованием ключевого слова async перед ключевым словом function.
Ключевое слово await используется внутри асинхронной функции для ожидания выполнения другой асинхронной операции и возврата ее результата.
*/

// Пример использования асинхронной функции и ключевого слова await
async function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const data = "Данные с сервера";
            resolve(data);
        }, 2000);
    });
}

async function processData() {
    try {
        const data = await fetchData();
        console.log("Данные успешно получены:", data);
        // Дальнейшая обработка данных
    } catch (error) {
        console.error("Ошибка при получении данных:", error);
    }
}

processData();

/*
В этом примере функция fetchData возвращает промис, который асинхронно получает данные с сервера. 
Функция processData объявлена как асинхронная с помощью ключевого слова async и вызывает fetchData с использованием ключевого слова await.
Пока fetchData выполняется, выполнение кода приостанавливается до тех пор, пока промис не будет разрешен или отклонен. 
Если промис разрешен, результат его выполнения (данные) сохраняется в переменной data и продолжается выполнение кода внутри функции processData.
Если возникнет ошибка при выполнении промиса, будет вызван блок catch для ее обработки.
*/
