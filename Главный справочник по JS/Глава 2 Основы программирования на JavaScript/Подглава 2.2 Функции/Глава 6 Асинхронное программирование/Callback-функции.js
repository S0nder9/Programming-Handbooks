// Глава 6: Асинхронное программирование

// Подглава 6.1: Callback-функции

// Что такое callback-функции
/*
Callback-функция - это функция, которая передается в другую функцию в качестве аргумента и вызывается внутри этой функции в определенный момент времени 
или при выполнении определенного условия. Callback-функции часто используются в асинхронном программировании для обработки результатов асинхронных операций.
*/

// Пример использования callback-функции
function fetchData(url, callback) {
    // Предположим, что это асинхронная операция, которая занимает время
    setTimeout(() => {
        const data = "Данные с сервера";
        callback(data);
    }, 2000);
}

function processData(data) {
    console.log("Обработка данных:", data);
}

fetchData("https://example.com/api/data", processData);

/*
В этом примере функция fetchData принимает URL и callback-функцию. 
Она асинхронно получает данные по указанному URL и, когда данные готовы, вызывает callback-функцию, передавая ей полученные данные. 
Функция processData является callback-функцией, которая обрабатывает полученные данные.
*/

// Проблемы callback hell и их решение
/*
Callback hell - это ситуация, когда вложенность callback-функций становится слишком глубокой, что делает код сложным для чтения и поддержки. 
Это может привести к ошибкам, трудностям в отладке и понимании кода. 
Для решения этой проблемы используются различные техники, такие как использование промисов, async/await или библиотеки для управления асинхронными операциями.
*/

// Пример callback hell
asyncFunction1((err, result1) => {
    if (err) {
        console.error(err);
        return;
    }
    asyncFunction2(result1, (err, result2) => {
        if (err) {
            console.error(err);
            return;
        }
        asyncFunction3(result2, (err, result3) => {
            if (err) {
                console.error(err);
                return;
            }
            // и так далее...
        });
    });
});

/*
Этот пример демонстрирует callback hell, когда несколько асинхронных операций выполняются последовательно и каждая зависит от результата предыдущей. 
Это приводит к глубокой вложенности callback-функций, что делает код сложным для чтения и поддержки.
*/
