// Глава 10: Оптимизация функций
// Подглава 10.1: Основные принципы оптимизации

// Избегание лишних вызовов функций
/*
Лишние вызовы функций могут привести к излишней нагрузке на производительность приложения. 
Чтобы избежать лишних вызовов функций, рекомендуется:
1. Объединять несколько операций в одну функцию, если они часто используются вместе.
2. Избегать рекурсивных вызовов функций в случаях, когда это необходимо, так как рекурсия может быть затратной по памяти.
3. Использовать стрелочные функции, которые имеют более легковесный механизм создания и выполнения, чем обычные функции.
4. Использовать кэширование результатов выполнения функций для избегания повторных вычислений.
*/

// Минимизация обращений к внешним ресурсам
/*
Обращения к внешним ресурсам, таким как файлы, базы данных или сетевые запросы, могут быть замедляющим фактором в работе приложения. 
Чтобы минимизировать обращения к внешним ресурсам, рекомендуется:
1. Использовать кэширование данных для уменьшения частоты обращений к внешним источникам.
2. Оптимизировать запросы к базам данных, используя индексы, батч-операции и другие методы оптимизации.
3. Асинхронно загружать данные из внешних источников для уменьшения блокировок и ожидания ответа.
4. Минимизировать передачу данных по сети, отправляя только необходимые данные и используя сжатие данных.
*/

// Примеры оптимизации функций
//1. Избегание лишних вызовов функций:
function calculateTotal(a, b, c) {
    return a + b + c;
}
// Плохо:
for (let i = 0; i < 1000; i++) {
    calculateTotal(1, 2, 3);
}
// Хорошо:
const total = calculateTotal(1, 2, 3);
for (let i = 0; i < 1000; i++) {
    // Используем результат предыдущего вызова
}

//2. Минимизация обращений к внешним ресурсам:
// Плохо:
function fetchDataFromAPI() {
    return fetch('https://api.example.com/data')
        .then(response => response.json());
}
// Хорошо:
let cachedData;
async function fetchData() {
    if (!cachedData) {
        cachedData = await fetch('https://api.example.com/data')
            .then(response => response.json());
    }
    return cachedData;
}

