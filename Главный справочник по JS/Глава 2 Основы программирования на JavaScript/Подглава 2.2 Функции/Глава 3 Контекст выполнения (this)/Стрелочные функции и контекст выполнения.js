// Подглава 3.3: Стрелочные функции и контекст выполнения

// Отличия контекста выполнения в стрелочных функциях
/*
В стрелочных функциях отсутствует собственный контекст выполнения. 
Это означает, что контекст выполнения стрелочной функции берется из окружающего лексического контекста.
*/

// Пример 1: Отсутствие собственного контекста выполнения
const obj = {
    name: "Объект",
    greet: () => {
        console.log(`Привет, меня зовут ${this.name}.`);
    }
};

obj.greet(); // Выведет: Привет, меня зовут undefined.

/*
В этом примере у стрелочной функции greet отсутствует собственный контекст выполнения. 
Вместо этого контекст выполнения берется из окружающего лексического контекста (глобальной области или функции, в которой она была объявлена). 
Поскольку в данном случае стрелочная функция объявлена в глобальной области, контекст выполнения будет глобальным объектом (window в браузере), 
и свойство name не будет найдено.
*/

// Пример 2: Использование контекста выполнения из внешней функции
function outerFunction() {
    const name = "Внешняя функция";
    const innerFunction = () => {
        console.log(`Привет, меня зовут ${name}.`);
    };
    innerFunction();
}

outerFunction(); // Выведет: Привет, меня зовут Внешняя функция.

/*
В этом примере стрелочная функция innerFunction берет контекст выполнения из внешней функции outerFunction. 
Таким образом, при вызове innerFunction контекст выполнения будет таким же, как у outerFunction, 
и она будет иметь доступ к переменной name из внешней функции.
*/

// Пример 3: Использование в методах объекта
const person = {
    name: "Алекс",
    greet: function() {
        setTimeout(() => {
            console.log(`Привет, меня зовут ${this.name}.`);
        }, 1000);
    }
};

person.greet(); // Выведет: Привет, меня зовут Алекс.

/*
В этом примере метод greet объекта person использует стрелочную функцию внутри setTimeout. 
Стрелочная функция сохраняет контекст выполнения метода greet, поэтому при вызове setTimeout контекст выполнения сохраняется и ссылается на объект person, 
что позволяет получить доступ к его свойству name.
*/

// Пример 4: Использование в коллбэках
const button = document.getElementById("myButton");
button.addEventListener("click", () => {
    console.log(`Кнопка "${this.innerText}" была нажата.`);
});

/*
В этом примере стрелочная функция используется в качестве коллбэка для события click на кнопке. 
Стрелочная функция не имеет собственного контекста выполнения и берет его из окружающего контекста, 
который, в данном случае, будет глобальным объектом (window), так как функция была объявлена в глобальной области.
*/
