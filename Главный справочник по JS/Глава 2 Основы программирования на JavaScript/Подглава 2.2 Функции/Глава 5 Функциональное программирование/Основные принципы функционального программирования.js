// Глава 5: Функциональное программирование

// Подглава 5.1: Основные принципы функционального программирования

// Чистые функции
/*
Чистая функция - это функция, которая всегда возвращает одинаковый результат для одних и тех же входных данных 
и не имеет побочных эффектов, то есть не изменяет состояние программы и не взаимодействует с внешними данными.
*/

// Пример чистой функции
function add(a, b) {
    return a + b;
}

console.log(add(2, 3)); // Выведет: 5

/*
Этот пример демонстрирует чистую функцию add, которая всегда возвращает одинаковый результат для одних и тех же аргументов.
*/

// Неизменяемость данных
/*
Неизменяемость данных - это принцип, согласно которому данные в программе не могут быть изменены после их создания. 
Вместо этого любые изменения в данных приводят к созданию новых данных.
*/

// Пример неизменяемости данных
const arr = [1, 2, 3];

// Добавление элемента в массив с использованием распыления (spread operator)
const newArr = [...arr, 4];

console.log(newArr); // Выведет: [1, 2, 3, 4]
console.log(arr); // Выведет: [1, 2, 3]

/*
Этот пример демонстрирует неизменяемость данных в JavaScript. 
Оригинальный массив arr остается неизменным, а новый массив newArr создается путем объединения оригинального массива и нового элемента.
*/

// Функции высшего порядка
/*
Функция высшего порядка - это функция, которая принимает другие функции в качестве аргументов или возвращает функцию как результат.
*/

// Пример функции высшего порядка
function higherOrderFunction(callback) {
    console.log("Вызов функции высшего порядка");
    callback();
}

function callbackFunction() {
    console.log("Функция обратного вызова");
}

higherOrderFunction(callbackFunction);

/*
Этот пример демонстрирует функцию высшего порядка higherOrderFunction, которая принимает другую функцию callback в качестве аргумента. 
При вызове higherOrderFunction передается функция callbackFunction, которая затем вызывается внутри higherOrderFunction.
*/
