// Подглава 5.3: Каррирование и композиция функций

// Что такое каррирование
/*
Каррирование - это процесс преобразования функции, принимающей несколько аргументов, в последовательность функций, 
каждая из которых принимает только один аргумент. Это позволяет удобно создавать новые функции путем частичного применения аргументов.
*/

// Пример каррирования
function curryAdd(a) {
    return function(b) {
        return a + b;
    };
}

const add5 = curryAdd(5);
console.log(add5(3)); // Выведет: 8

/*
В этом примере функция curryAdd принимает один аргумент a и возвращает функцию, которая принимает второй аргумент b и возвращает их сумму. 
Затем создается новая функция add5, которая прибавляет 5 к переданному ей значению.
*/

// Применение каррирования в JavaScript
/*
Каррирование может быть полезным при создании функций с предопределенными аргументами или при создании функций высшего порядка.
*/

// Пример: Создание функции с предопределенным аргументом
const multiply = (a, b) => a * b;
const double = curryAdd(2); // Предопределенный аргумент a = 2

console.log(double(3)); // Выведет: 6

/*
В этом примере функция double создается с помощью каррирования функции curryAdd с аргументом 2. 
Теперь double может быть использована для удвоения любого числа, предоставив только второй аргумент.
*/

// Композиция функций
/*
Композиция функций - это процесс объединения нескольких функций в одну, где результат выполнения одной функции является входным параметром для другой.
*/

// Пример композиции функций
const square = x => x * x;
const increment = x => x + 1;

const squareThenIncrement = x => increment(square(x));

console.log(squareThenIncrement(3)); // Выведет: 10

/*
В этом примере функция squareThenIncrement создается путем композиции функций square и increment. 
Результат выполнения функции square(x) (квадрат числа x) передается в качестве входного параметра для функции increment, 
которая увеличивает его на 1.
*/
