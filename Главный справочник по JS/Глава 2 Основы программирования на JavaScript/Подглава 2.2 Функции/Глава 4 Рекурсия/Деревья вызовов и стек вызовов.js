// Подглава 4.2: Деревья вызовов и стек вызовов

// Как работает стек вызовов
/*
Стек вызовов - это механизм в JavaScript, который отслеживает порядок вызова функций во время выполнения программы. 
При вызове функции она помещается в вершину стека вызовов, а при завершении выполнения удаляется из него. 
Это позволяет JavaScript сохранять контекст выполнения каждой функции и возвращаться к предыдущему контексту при завершении текущей функции.
*/

// Пример работы стека вызовов
function firstFunction() {
    secondFunction();
}

function secondFunction() {
    thirdFunction();
}

function thirdFunction() {
    console.log("Третья функция выполнена.");
}

firstFunction(); // Вызов первой функции

/*
В этом примере первая функция firstFunction вызывает вторую функцию secondFunction, 
которая в свою очередь вызывает третью функцию thirdFunction. 
После завершения выполнения третьей функции, управление возвращается обратно к secondFunction, 
затем к firstFunction, и, наконец, к глобальной области.
*/

// Деревья вызовов и их связь с рекурсией
/*
Дерево вызовов - это структура данных, которая показывает последовательность вызова функций в программе. 
В рекурсивной функции каждый новый вызов создает новую ветвь дерева вызовов, 
что позволяет решать задачи, основанные на принципе "разделяй и властвуй".
*/

// Пример дерева вызовов рекурсивной функции
function recursiveFunction(n) {
    if (n === 0) {
        return;
    }
    console.log(`Вызов функции с параметром ${n}`);
    recursiveFunction(n - 1);
}

recursiveFunction(3);

/*
В этом примере при вызове рекурсивной функции recursiveFunction(3) происходят следующие вызовы функций:
- recursiveFunction(3)
  - recursiveFunction(2)
    - recursiveFunction(1)
      - recursiveFunction(0)
После завершения выполнения функции с параметром 0, выполнение возвращается обратно к предыдущему вызову, и так далее, пока не завершится последний вызов.
*/
