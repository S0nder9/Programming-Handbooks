// Раздел 8: React Advanced - Использование функции очистки

/*
Использование функции очистки (cleanup function) в React имеет важное значение для управления побочными эффектами в функциональных компонентах, 
особенно когда используются хуки, такие как useEffect. Функция очистки позволяет убрать или отменить эффекты, которые больше не нужны, 
например, очистить таймеры, отменить подписки или удалить обработчики событий, чтобы избежать утечек памяти и других непредвиденных проблем.

1. Что такое функция очистки?
Функция очистки - это функция, которая возвращается из хука useEffect и вызывается React при размонтировании компонента или перед каждым следующим выполнением эффекта.
Она используется для очистки или отмены побочных эффектов, которые были установлены в useEffect.

2. Почему важна функция очистки?
Функция очистки помогает избежать утечек памяти, а также нежелательного поведения, вызванного продолжением работы эффектов после того, как компонент был размонтирован или обновлен.

3. Использование функции очистки в хуке useEffect
Ниже приведены примеры, демонстрирующие, как использовать функцию очистки в React.

Пример: Очистка таймера
*/

// Импортируем необходимые модули из React
import React, { useState, useEffect } from 'react';

function TimerComponent() {
  const [seconds, setSeconds] = useState(0);

  useEffect(() => {
    // Устанавливаем интервал
    const interval = setInterval(() => {
      setSeconds(prevSeconds => prevSeconds + 1);
    }, 1000);

    // Возвращаем функцию очистки
    return () => {
      // Эта функция будет вызвана при размонтировании компонента или перед следующим запуском эффекта
      clearInterval(interval); // Очищаем интервал, чтобы предотвратить утечки памяти
    };
  }, []); // Пустой массив зависимостей означает, что эффект будет запущен только один раз при монтировании

  return (
    <div>
      <p>Seconds: {seconds}</p>
    </div>
  );
}

// export default TimerComponent;

/*
В этом примере useEffect устанавливает интервал, который увеличивает счетчик секунд каждую секунду. 
Функция очистки, возвращаемая из useEffect, очищает этот интервал при размонтировании компонента, 
что предотвращает утечку памяти и ненужные вызовы setInterval.

Пример: Очистка обработчиков событий
*/

// Импортируем необходимые модули из React
import React, { useState, useEffect } from 'react';

function WindowResizeComponent() {
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  useEffect(() => {
    // Обработчик события изменения размера окна
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };

    // Добавляем обработчик события
    window.addEventListener('resize', handleResize);

    // Возвращаем функцию очистки
    return () => {
      // Эта функция будет вызвана при размонтировании компонента или перед следующим запуском эффекта
      window.removeEventListener('resize', handleResize); // Удаляем обработчик события при размонтировании или обновлении эффекта
    };
  }, []); // Пустой массив зависимостей означает, что эффект будет запущен только один раз при монтировании

  return (
    <div>
      <p>Window width: {windowWidth}</p>
    </div>
  );
}

// export default WindowResizeComponent;

/*
В этом примере useEffect добавляет обработчик события изменения размера окна, 
который обновляет состояние windowWidth при каждом изменении размера окна. 
Функция очистки удаляет этот обработчик события при размонтировании компонента, 
что предотвращает утечку памяти и нежелательное поведение.

Заключение
Использование функции очистки в React помогает управлять побочными эффектами и предотвращать утечки памяти. 
Это особенно важно для компонентов, которые взаимодействуют с внешними ресурсами, такими как таймеры, 
обработчики событий и подписки. Всегда возвращайте функцию очистки из useEffect, когда устанавливаете такие эффекты.
*/
