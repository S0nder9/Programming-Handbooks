// Глава 3: Состояние и Работа с Событиями

// Коммуникация компонентов наследник-родитель (снизу вверх)

// Для передачи данных от дочернего компонента к родительскому компоненту в React используется механизм колбэков.
// Колбэк представляет собой функцию, переданную из родительского компонента дочернему через пропсы. 
// Дочерний компонент вызывает этот колбэк с переданными данными при возникновении определенного события, 
// и тем самым сообщает родительскому компоненту о произошедшем событии или изменениях.

// Рассмотрим пример:

// Пример коммуникации компонентов наследник-родитель снизу вверх

// В этом примере у нас есть компонент Child, который содержит кнопку.
// Когда кнопка нажимается, компонент Child отправляет данные своему родительскому компоненту через колбэк, который передается ему в качестве пропса.

// Child.js
import React from 'react';

const Child = ({ sendDataToParent }) => {
  const handleClick = () => {
    // Отправляем данные родительскому компоненту через колбэк
    sendDataToParent('Привет, мама!');
  };

  return (
    <div>
      <button onClick={handleClick}>Нажми меня</button>
    </div>
  );
};

// export default Child;

// Parent.js
import React, { useState } from 'react';
import Child from './Child';

const Parent = () => {
  const [messageFromChild, setMessageFromChild] = useState('');

  // Функция, которая будет передана в Child в качестве пропса
  const handleDataFromChild = (data) => {
    // Обновляем состояние родительского компонента с данными от Child
    setMessageFromChild(data);
  };

  return (
    <div>
      <h2>Родительский компонент</h2>
      <p>Сообщение от ребенка: {messageFromChild}</p>
      {/* Передаем функцию обратного вызова в качестве пропса в Child */}
      <Child sendDataToParent={handleDataFromChild} />
    </div>
  );
};

// export default Parent;