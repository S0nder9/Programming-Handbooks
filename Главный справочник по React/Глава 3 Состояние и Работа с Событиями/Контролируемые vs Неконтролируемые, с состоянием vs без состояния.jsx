// Глава 3: Состояние и Работа с Событиями

// Контролируемые vs Неконтролируемые компоненты, с состоянием vs без состояния

// Контролируемые компоненты:
// В контролируемых компонентах значение элемента формы (input, textarea, select) контролируется React'ом через состояние.
// Это означает, что значение элемента формы хранится в состоянии компонента, и React отслеживает его изменения, обновляя состояние при вводе пользователя.

import React, { useState } from 'react';

const ControlledComponentExample = () => {
  // Состояние для хранения значения input
  const [inputValue, setInputValue] = useState('');

  // Обработчик изменения input
  const handleChange = (event) => {
    setInputValue(event.target.value); // Обновляем состояние при изменении значения input
  };

  return (
    <div>
      {/* Input - контролируемый компонент */}
      <input type="text" value={inputValue} onChange={handleChange} />
      {/* Отображаем текущее значение input */}
      <p>Текущее значение: {inputValue}</p>
    </div>
  );
};

// export default ControlledComponentExample;

// Неконтролируемые компоненты:
// В неконтролируемых компонентах значение элемента формы хранится в DOM, а не в состоянии React'а.
// React не управляет значением напрямую, а использует ссылку на DOM элемент для получения и обновления значения.

import React, { useRef } from 'react';

const UncontrolledComponentExample = () => {
  // Создаем ссылку на input элемент
  const inputRef = useRef(null);

  // Функция для получения текущего значения input
  const getValue = () => {
    // Получаем значение из ссылки на DOM элемент
    return inputRef.current.value;
  };

  // Функция для изменения значения input
  const handleClick = () => {
    // Изменяем значение через ссылку на DOM элемент
    inputRef.current.value = 'Новое значение';
  };

  return (
    <div>
      {/* Input - неконтролируемый компонент */}
      <input type="text" ref={inputRef} />
      {/* Кнопка для изменения значения */}
      <button onClick={handleClick}>Изменить значение</button>
      {/* Отображаем текущее значение input */}
      <p>Текущее значение: {getValue()}</p>
    </div>
  );
};

// export default UncontrolledComponentExample;

// В примере с контролируемым компонентом значение input хранится в состоянии React'а, а в примере с неконтролируемым компонентом значение хранится в DOM элементе и обновляется через ссылку на него.

// Таким образом, контролируемые компоненты дают больше контроля над данными и лучше соответствуют концепциям React. 
// Однако, неконтролируемые компоненты могут быть полезны в определенных случаях, например, при интеграции с сторонними библиотеками или при работе с неуправляемыми данными.