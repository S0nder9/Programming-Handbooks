// Глава 3: Состояние и Работа с Событиями

// В React функции-компоненты выполняются следующим образом:

// 1. Определение компонента как функции
//    Компонент определяется как JavaScript функция, которая возвращает JSX (разметку).

// Пример:
import React from 'react';

function MyComponent() {
    return <div>Hello, world!</div>;
}

// 2. Рендеринг компонента
//    Когда компонент используется в JSX, React вызывает эту функцию и получает возвращаемый JSX.
//    Затем он рендерит этот JSX на странице.

// Пример:
function App() {
    return (
        <div>
            <h1>My App</h1>
            <MyComponent />
        </div>
    );
}

// Рендеринг компонента <MyComponent /> в компоненте App приведет к следующему результату:
// <div>
//     <h1>My App</h1>
//     <div>Hello, world!</div>
// </div>

// 3. Обновление компонента при изменении его состояния или пропсов
//    Функции-компоненты могут использовать хуки, такие как useState или useEffect,
//    для управления состоянием компонента или выполнения побочных эффектов.

// Пример:
import React, { useState } from 'react';

function Counter() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>Вы нажали {count} раз</p>
            <button onClick={() => setCount(count + 1)}>
                Нажми меня
            </button>
        </div>
    );
}

// В этом примере Counter - это функциональный компонент, который использует хук useState
// для создания переменной состояния count и функции setCount для ее обновления.
// Каждый раз, когда пользователь нажимает кнопку, значение count увеличивается на 1,
// что вызывает перерендеринг компонента с новым значением.

// Таким образом, функции-компоненты в React представляют из себя простые JavaScript функции,
// которые возвращают JSX и могут использовать хуки для управления состоянием и другими аспектами компонента.
