// Раздел 8 React Advanced - Побочные Эффекты

// Подглава 8.1: Использование хука useEffect
// Что такое использование хука useEffect?
// Хук useEffect в React позволяет выполнять побочные эффекты в функциональных компонентах.
// Побочные эффекты включают такие операции, как получение данных с сервера, подписка на потоки данных,
// манипуляции с DOM и т.д. useEffect помогает отделить логику побочных эффектов от основного рендеринга компонента.

useEffect(() => {
    // Этот код будет выполняться при каждом рендере компонента.

  }, []);   // Массив зависимостей содержит переменные, при изменении которых будет выполнен эффект. 
            // Если передать пустой массив, эффект выполнится только при монтировании и размонтировании компонента.
  

import React, { useState, useEffect } from 'react';

function ExampleComponent() {
  // Шаг 1: Инициализация состояния
  // С помощью useState инициализируем состояние компонента.
  const [count, setCount] = useState(0);

  // Шаг 2: Определение побочного эффекта
  // Используем хук useEffect для выполнения побочного эффекта.
  // Он принимает два аргумента: функцию-эффект и массив зависимостей.
  useEffect(() => {
    // Этот код будет выполняться при каждом рендере компонента.
    console.log('Компонент смонтирован или обновлен');

    // Шаг 3: Установка заголовка документа
    // Меняем заголовок документа в зависимости от значения состояния count.
    document.title = `Вы нажали ${count} раз`;

    // Шаг 4: Очистка побочного эффекта
    // Возвращаем функцию очистки, которая будет вызываться перед размонтированием компонента
    // или перед следующим выполнением эффекта.
    return () => {
      console.log('Очистка эффекта');
    };
  }, [count]); // Шаг 5: Зависимости эффекта
  // Массив зависимостей содержит переменные, при изменении которых будет выполнен эффект.
  // Если передать пустой массив, эффект выполнится только при монтировании и размонтировании компонента.

  // Шаг 6: Обработчик события
  // Создаем функцию для обновления состояния при нажатии на кнопку.
  const handleClick = () => {
    setCount(count + 1);
  };

  // Шаг 7: Рендеринг компонента
  // Возвращаем JSX для отображения компонента.
  return (
    <div>
      <p>Вы нажали {count} раз</p>
      <button onClick={handleClick}>Нажми меня</button>
    </div>
  );
}

export default ExampleComponent;

// Описание шагов использования хука useEffect:

// 1. Инициализация состояния: Используем useState для создания состояния компонента.
// 2. Определение побочного эффекта: useEffect принимает функцию, в которой описан побочный эффект.
// 3. Установка заголовка документа: Внутри эффекта меняем заголовок документа на основе состояния.
// 4. Очистка побочного эффекта: Возвращаем функцию очистки, которая выполнится перед следующим запуском эффекта или перед размонтированием компонента.
// 5. Зависимости эффекта: Массив зависимостей определяет, при изменении каких переменных будет выполняться эффект. Если массив пустой, эффект выполняется только при монтировании и размонтировании.
// 6. Обработчик события: Создаем функцию для обновления состояния при взаимодействии с пользователем.
// 7. Рендеринг компонента: Возвращаем JSX для отображения интерфейса компонента.

// Хук useEffect помогает управлять побочными эффектами в функциональных компонентах React, делая код чище и упрощая логику взаимодействия с внешними системами или данными.
