// Глава 10: Компоненты на основе классов

// Компоненты на основе классов vs функциональные компоненты
// В React компоненты можно создавать двумя основными способами: как классовые компоненты и как функциональные компоненты. 

// Компоненты на основе классов

// Компоненты на основе классов были основным способом создания компонентов до появления хуков в React 16.8.
// Классовые компоненты позволяют использовать состояние (state) и методы жизненного цикла (lifecycle methods).

// Пример классового компонента
import React, { Component } from 'react';

class ClassComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }

  increment = () => {
    this.setState({ count: this.state.count + 1 });
  };

  render() {
    return (
      <div>
        <p>Счетчик: {this.state.count}</p>
        <button onClick={this.increment}>Увеличить</button>
      </div>
    );
  }
}

// Функциональные компоненты

// Функциональные компоненты - это более простой способ создания компонентов. Они были усовершенствованы с появлением хуков, которые позволяют использовать состояние и другие возможности React внутри функциональных компонентов.

import React, { useState } from 'react';

// Пример функционального компонента
const FunctionalComponent = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <p>Счетчик: {count}</p>
      <button onClick={increment}>Увеличить</button>
    </div>
  );
};

// Зачем использовать классовые компоненты и функциональные компоненты?

// До React 16.8 классовые компоненты были необходимы для работы с состоянием и методами жизненного цикла. 
// С появлением хуков большинство разработчиков предпочитают функциональные компоненты из-за их простоты и более чистого синтаксиса.

// Где используются классовые компоненты и функциональные компоненты?

// В современном React большинство новых проектов используют функциональные компоненты. 
// Классовые компоненты могут все еще использоваться в старых кодовых базах или когда разработчики предпочитают их структуру.


// Актуально ли?

// Функциональные компоненты с хуками считаются современным стандартом в разработке на React. 
// Классовые компоненты по-прежнему поддерживаются, но их использование постепенно сокращается.


// Несколько примеров

// Пример классового компонента
class ClassComponentExample extends Component {
  constructor(props) {
    super(props);
    this.state = {
      message: 'Привет из классового компонента'
    };
  }

  render() {
    return <h1>{this.state.message}</h1>;
  }
}

// Пример функционального компонента
const FunctionalComponentExample = () => {
  const [message, setMessage] = useState('Привет из функционального компонента');

  return <h1>{message}</h1>;
};

// Итог
// Классовые компоненты и функциональные компоненты - это два способа создания компонентов в React.
// Функциональные компоненты с хуками сейчас являются предпочтительным способом благодаря их простоте и мощным возможностям, которые они предоставляют.

export { ClassComponent, FunctionalComponent, ClassComponentExample, FunctionalComponentExample };
