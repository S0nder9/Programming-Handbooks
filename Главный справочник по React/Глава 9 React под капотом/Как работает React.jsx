// Глава 9: React под капотом

// React - это популярная библиотека для построения пользовательских интерфейсов, разработанная Facebook.
// Она позволяет создавать компоненты, которые являются строительными блоками интерфейса, и эффективно управляет обновлением этих компонентов.

import React, { useState, useEffect } from 'react';

// Основные концепции

// 1. Компоненты
// В React все строится вокруг компонентов. Компонент - это независимый, переиспользуемый кусок UI, который можно комбинировать с другими компонентами.
const MyComponent = () => {
  return <div>Привет, мир!</div>;
};

// 2. Виртуальный DOM
// React использует виртуальный DOM, который является копией реального DOM. Когда состояние компонента меняется, React создает новый виртуальный DOM и сравнивает его с предыдущим.
// Этот процесс называется "диффинг". После этого React применяет минимально необходимые изменения к реальному DOM.

const Counter = () => {
  const [count, setCount] = useState(0);

  const increment = () => setCount(count + 1);

  return (
    <div>
      <p>Счетчик: {count}</p>
      <button onClick={increment}>Увеличить</button>
    </div>
  );
};

// 3. Рендеринг
// React вызывает функцию рендеринга компонента, чтобы создать виртуальный DOM. Затем он сравнивает этот виртуальный DOM с предыдущим, чтобы определить, какие изменения нужно внести в реальный DOM.

const RenderExample = () => {
  useEffect(() => {
    console.log('Компонент смонтирован');
    return () => console.log('Компонент размонтирован');
  }, []);

  return <div>Этот компонент демонстрирует процесс рендеринга</div>;
};

// 4. Хуки
// React предоставляет хуки, такие как useState и useEffect, которые позволяют функциональным компонентам иметь состояние и побочные эффекты.

const HooksExample = () => {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch('https://api.example.com/data')
      .then(response => response.json())
      .then(data => setData(data));
  }, []);

  return (
    <div>
      {data ? <p>Данные: {data}</p> : <p>Загрузка...</p>}
    </div>
  );
};

// Итог
// Под капотом React использует концепции компонентов, виртуального DOM и хуков для создания эффективных и интерактивных пользовательских интерфейсов.
// Понимание того, как работает React, помогает разработчикам писать более оптимизированный и поддерживаемый код.

export { MyComponent, Counter, RenderExample, HooksExample };
