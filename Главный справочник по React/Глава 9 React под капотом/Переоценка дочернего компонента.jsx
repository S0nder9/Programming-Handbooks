// Глава 8: React Advanced - Переоценка дочернего компонента

// Переоценка дочернего компонента
// Переоценка (re-rendering) дочернего компонента происходит, когда React обновляет виртуальный DOM и повторно рендерит компонент для синхронизации с реальным DOM.
// Это может происходить по разным причинам, таким как изменения состояния или пропсов.

// Зачем используется и где применяется
// Переоценка необходима для того, чтобы интерфейс пользователя всегда был актуален и отображал последние изменения.
// Это важно в случаях, когда данные, на которые опирается компонент, изменяются в результате пользовательских действий или сетевых запросов.
// Понимание того, когда и почему происходит переоценка, помогает оптимизировать производительность приложения, предотвращая ненужные рендеры.

// Как это работает
// React отслеживает изменения в состоянии и пропсах компонента. Когда происходит изменение, React сравнивает новый виртуальный DOM с предыдущим и обновляет только изменившиеся части реального DOM.
// Дочерний компонент переоценивается, если:
// - Изменились его пропсы
// - Изменилось его состояние
// - Родительский компонент переоценился и передал новые пропсы

// Актуально ли
// Переоценка компонентов является фундаментальной частью работы React и остается актуальной при разработке всех React приложений.
// Оптимизация рендеров помогает улучшить производительность, что особенно важно в больших и сложных приложениях.

// Несколько примеров
import React, { useState, useEffect, memo } from 'react';

// Пример простого компонента, который переоценивается при изменении состояния
const ChildComponent = ({ count }) => {
  useEffect(() => {
    console.log('ChildComponent рендерится');
  });
  return <div>Count: {count}</div>;
};

// Пример использования memo для предотвращения ненужных рендеров
const MemoizedChildComponent = memo(({ count }) => {
  useEffect(() => {
    console.log('MemoizedChildComponent рендерится');
  });
  return <div>Count: {count}</div>;
});

const ParentComponent = () => {
  const [count, setCount] = useState(0);
  const [text, setText] = useState('');

  const increment = () => setCount(count + 1);

  return (
    <div>
      <button onClick={increment}>Increment</button>
      <input
        type="text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Type something"
      />
      <ChildComponent count={count} />
      <MemoizedChildComponent count={count} />
    </div>
  );
};

// Итог
// Переоценка дочерних компонентов - это важная часть работы React, обеспечивающая актуальность пользовательского интерфейса.
// Понимание того, как и когда происходит рендеринг, помогает улучшить производительность приложения и избежать ненужных обновлений компонентов.

export default ParentComponent;
