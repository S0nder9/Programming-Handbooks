// Глава 15: Основы Redux

// Redux — это библиотека для управления состоянием приложения. 
// Она помогает создавать предсказуемые приложения с легко управляемым состоянием.

// Основные концепции Redux включают в себя:
// 1. Store — Хранилище состояния приложения.
// 2. Reducer — Функция, которая определяет, как состояние изменяется в ответ на действия (actions).
// 3. Action — Объект, который описывает изменения, которые нужно внести в состояние.
// 4. Dispatch — Метод для отправки actions в store.
// 5. Subscribe — Метод для регистрации функций обратного вызова, которые будут вызываться при изменении состояния.

// Пример использования Redux без использования React:
const redux = require('redux');

// Определение редьюсера
const counterReducer = (state = { counter: 0 }, action) => {
  if (action.type === 'inc') {
    return {
      counter: state.counter + 1,
    };
  }

  if (action.type === 'dec') {
    return {
      counter: state.counter - 1,
    };
  }

  return state;
};

// Создание хранилища Redux
const store = redux.legacy_createStore(counterReducer);

// Определение функции подписчика, которая будет вызываться при каждом изменении состояния
const counterSubscriber = () => {
  const newState = store.getState();
  console.log(newState);
};

// Подписка на изменения состояния
store.subscribe(counterSubscriber);

// Отправка действий (actions) для изменения состояния
store.dispatch({ type: 'inc' }); // Увеличение счетчика на 1
store.dispatch({ type: 'dec' }); // Уменьшение счетчика на 1

// Итог:
// В данном примере мы создали простое приложение на Redux, которое управляет состоянием счетчика.
// Мы определили редьюсер, который обрабатывает два типа действий: увеличение и уменьшение счетчика.
// Затем мы создали хранилище Redux с использованием этого редьюсера.
// Мы также определили функцию подписчика, которая выводит новое состояние в консоль каждый раз, когда состояние изменяется.
// Наконец, мы отправили несколько действий для изменения состояния счетчика и увидели изменения в консоли.
