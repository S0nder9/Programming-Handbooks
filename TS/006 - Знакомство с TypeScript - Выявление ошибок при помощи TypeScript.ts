/**
 * 006 - Знакомство с TypeScript
 * =============================
 * 
 * Выявление ошибок при помощи TypeScript
 * --------------------------------------
 * В этом уроке мы разберём, как TypeScript помогает находить ошибки в коде
 * ещё до его выполнения. Рассмотрим типизацию, ошибки компиляции и способы
 * их исправления.
 */

/**
 * 1. Статическая типизация
 * -------------------------
 * TypeScript проверяет типы во время компиляции, помогая избежать ошибок.
 * Попробуем объявить переменную и присвоить ей значение другого типа.
 */

// Ошибка: Type 'number' is not assignable to type 'string'
let message: string = "Привет, TypeScript!";
// message = 42; // Раскомментируйте эту строку, чтобы увидеть ошибку

/**
 * 2. Проверка аргументов функций
 * -------------------------------
 * TypeScript проверяет типы аргументов при вызове функций.
 */

function greet(name: string, age: number): string {
    return `Привет, ${name}! Тебе ${age} лет. Добро пожаловать в TypeScript.`;
}

console.log(greet("Никита", 25)); // ✅ Правильный вызов
// console.log(greet(123, "двадцать пять")); // ❌ Ошибка типов

/**
 * 3. Ошибки при работе с объектами
 * ---------------------------------
 * TypeScript также проверяет доступ к свойствам объектов.
 */

interface User {
    name: string;
    age: number;
}

let user: User = { name: "Алиса", age: 30 };
// console.log(user.email); // ❌ Ошибка: свойство 'email' не существует в User

/**
 * 4. Использование строгого режима
 * ---------------------------------
 * Включение строгого режима (strict mode) позволяет находить больше ошибок.
 * В файле tsconfig.json измените настройку:
 * 
 *   "strict": true
 * 
 * Это поможет TypeScript выявлять потенциальные ошибки ещё на этапе компиляции.
 */

/**
 * Заключение
 * ----------
 * TypeScript помогает находить ошибки ещё до запуска кода:
 * - Проверяет типы переменных и аргументов функций
 * - Не даёт использовать несуществующие свойства объектов
 * - Позволяет включить строгий режим для более тщательной проверки
 * 
 * В следующем уроке мы подробнее разберём работу с интерфейсами и типами.
 */
